apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "eric-scp.name" . }}-worker-envoy-static-config
  labels:
{{- include "eric-scp.labels" . | indent 4 }}
    app: {{ template "eric-scp.name" . }}-worker
  annotations:
{{- include "eric-scp.helm-annotations" . | indent 4 }}
{{- include "eric-scp.config-annotations" . | indent 4 }}
data:
  envoy.yaml: |
    ## note: envoy-POD_UID is replaced from entrypoint.sh as a different UID is needed for each envoy instance
    #  so the manager can differentiate between them
    node:
      id: envoy-POD_UID
      cluster: "csa-1"
      metadata:
        version: {{ template "eric-scp.version" . }}
    dynamic_resources:
      cds_config: {ads: {}, resource_api_version: "V3"}
      lds_config: {ads: {}, resource_api_version: "V3"}
      ads_config:
        transport_api_version: "V3"
        api_type: GRPC
        grpc_services:
          envoy_grpc:
            cluster_name: internal_ads
    static_resources:
      listeners:
      - name: local_stats_listener_tls
        address:
          socket_address:
            address: {{ include "eric-scp.worker.address" . }}
            port_value: 9902
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
              stat_prefix: ingress_http_metrics
              codec_type: AUTO
              route_config:
                name: local_admin_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  response_headers_to_add:
                  - header:
                      key: "Access-Control-Allow-Origin"
                      value: "*"
                  routes:
                  - match: { prefix: "/stats/prometheus" }
                    route: { cluster: local_admin_cluster }
              http_filters:
              - name: envoy.router
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
              http2_protocol_options:
                max_concurrent_streams: 2147483647
                allow_connect: true
              common_http_protocol_options:
                idle_timeout: 3600s
                max_stream_duration: 6s
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_params:
                  tls_minimum_protocol_version: TLSv1_2
                  tls_maximum_protocol_version: TLSv1_3
                alpn_protocols:
                  - h2
                tls_certificate_sds_secret_configs:
                  - name: pm_worker_server_cert
                    sds_config:
                      api_config_source:
                        api_type: GRPC
                        grpc_services:
                          - envoy_grpc:
                              cluster_name: internal_sds
                        transport_api_version: V3
                      resource_api_version: V3
                validation_context_sds_secret_config:
                  name: internal_pm_ca
                  sds_config:
                    api_config_source:
                      api_type: GRPC
                      grpc_services:
                        - envoy_grpc:
                            cluster_name: internal_sds
                      transport_api_version: V3
                    resource_api_version: V3
              require_client_certificate: true
      clusters:
      - name: local_admin_cluster
        type: STATIC
        load_assignment:
          cluster_name: local_admin_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ include "eric-scp.worker.address" . }}
                    port_value: 9901
        upstream_bind_config:
          socket_options:
            description: tcp_user_timeout
            int_value: '5030'
            level: '6'
            name: '18'
          source_address:
            address: {{ include "eric-scp.worker.address" . }}
            port_value: 0
        upstream_connection_options:
          tcp_keepalive:
            keepalive_interval: 5
            keepalive_probes: 6
            keepalive_time: 5
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: internal_ads
        connect_timeout: { seconds: 5 }
        dns_lookup_family: {{ include "eric-scp.ipfamily" . | default "V4_ONLY" | quote }}
        upstream_bind_config:
          socket_options:
            description: "TCP_USER_TIMEOUT"
            int_value: 5030
            level: 6
            name: 18
          source_address:
            address: {{ include "eric-scp.worker.address" . }}
            port_value: 0
        upstream_connection_options:
          tcp_keepalive:
            keepalive_interval: 5
            keepalive_probes: 6
            keepalive_time: 5
        type: STATIC
        load_assignment:
          cluster_name: ads_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: eric-scp-manager-grpc
                    port_value: 9900
        lb_policy: ROUND_ROBIN
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                tls_minimum_protocol_version: TLSv1_2
                tls_maximum_protocol_version: TLSv1_3
              alpn_protocols:
              - h2
              tls_certificate_sds_secret_configs:
              - name: worker_manager_grpc
                sds_config:
                  api_config_source:
                    api_type: GRPC
                    grpc_services:
                    - envoy_grpc:
                        cluster_name: internal_sds
                    transport_api_version: V3
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: internal_ca
                sds_config:
                  api_config_source:
                    api_type: GRPC
                    grpc_services:
                    - envoy_grpc:
                        cluster_name: internal_sds
                    transport_api_version: V3
                  resource_api_version: V3
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        type: logical_dns
      - name: internal_sds
        connect_timeout: { seconds: 5 }
        type: STATIC
        load_assignment:
          cluster_name: sds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  pipe:
                    path: /mnt/sds_uds
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
    admin:
      access_log:
        name: "envoy.access_loggers.file"
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/dev/null"
      address:
        socket_address:
          protocol: TCP
          address: {{ include "eric-scp.worker.address" . }}
          port_value: 9901
          ipv4_compat: true
      ignore_global_conn_limit: true
    stats_config:
      stats_tags:
        # Tag modification for the Prometheus counters at /stat/prometheus.
        # These modifications rely on a certain structure of the counter names.
        # Cluster alt_stat_name: egress.n8e.<nf-instance-name>.s5e.<service-name>
        #       counter example: cluster.egress.n8e.West1.s5e.convergedCharging.upstream_rq_200
        # --> Prometheus format: envoy_upstream_rq{nf="scp",envoy_response_code="200",
        #     service="convergedCharging",nf_instance="West1",envoy_cluster_name="egress"}
        # Virtual cluster  name: <operation>.n8e.<nf-instance-name>
        #      counter  example: vhost.eric-scp-worker.vcluster.cc_create.n8e.West1.upstream_rq_201
        # --> Prometheus format: envoy_upstream_rq{nf="scp",envoy_response_code="201",
        #     nf_instance="West1",operation="cc_create",envoy_virtual_cluster="cc_create.n8e.West1",
        #     envoy_virtual_host="eric-scp-worker"} 1
        # Some regex use (?: and ) to make a non-capturing group, because Envoy
        # uses the first and second capture groups, so we cannot just introduce one
        # in between. More capturing groups are needed to match alternatives.
        # It is also not possible to split this into two tags+regexp because Envoy
        # does not allow to use the same tag_name twice.
        # Message screening tags:
        #     example stat name: http.eric_proxy.n8e.West1.s8c3.case1.s8r3.rule1.envoy_ms_reject_message_in_total
        # --> Prometheus format: envoy_ms_reject_message_in_total{nf-instance="West1",
        #     screening_case="case1",screening_rule="rule1"}
        #
      - tag_name: service
        regex: "^((?:vhost\\..+?\\.vcluster\\..+?|cluster\\.egress)\\.n8e\\..+?\\.s5e\\.(.+?)\\.)"
      #nf value is changing per deployment type in entrypoint.sh
      - tag_name: nf
        fixed_value: scp
      #pool_name tag is applied only in generic SCP & SEPP
      - tag_name: pool_name
        regex: "^((?:vhost\\..+?\\.vcluster\\..+?|cluster\\.egress|http\\.ingress|http\\.eric_proxy)\\.n8e\\..+?\\.p2l\\.(.+?))\\."
      - tag_name: nf_instance
        regex: "^((?:vhost\\..+?\\.vcluster\\..+?|cluster\\..+?\\.eric_tap_stats|cluster\\.egress|listener\\..+?\\.eric_tap_stats|.*?http\\.ingress|http\\.eric_proxy|http\\.lrl|http\\.eirl)\\.n8e\\.(.+?)\\.)"
      - tag_name: group
        regex: "^((?:vhost\\..+?\\.vcluster\\..+?|cluster\\..+?\\.eric_tap_stats|cluster\\.egress|listener\\..+?\\.eric_tap_stats|http\\.ingress|http\\.eric_proxy|http\\.lrl|http\\.eirl)\\.n8e\\..+?\\.g3p\\.(.+?)\\.)"
      - tag_name: group_internal
        regex: "^((?:listener.+?\\.http\\.ingress)\\.n8e\\..+?\\.g3p\\.(.+?)\\.)"
      - tag_name: operation
        regex: "^(vhost\\..*?\\.vcluster\\.(.+?)\\.n8e)"
      - tag_name: region
        regex: "^((?:vhost\\..+?\\.vcluster\\..+?|cluster\\.egress|http\\.ingress)\\.n8e\\..+?\\.r4n\\.(.+?)\\.)"
      - tag_name: request_screening_case
        regex: "^(http\\.eric_proxy\\.n8e\\..+?\\.s8c3\\.(.+?)\\.s8r3\\..+?\\.)ms.+?req"
      - tag_name: response_screening_case
        regex: "^(http\\.eric_proxy\\.n8e\\..+?\\.s8c3\\.(.+?)\\.s8r3\\..+?\\.)ms.+?resp"
      - tag_name: screening_rule
        regex: "^(http\\.eric_proxy\\.n8e\\..+?\\.s8c3\\..+?\\.s8r3\\.(.+?)\\.)"
      - tag_name: roaming_partner
        regex: "^(http\\.(?:eirl|ingress)\\.n8e\\..+?\\.g3p\\..+?\\.r12r\\.(.+?)\\.)"
      - tag_name: network
        regex: "^(http\\.(?:lrl|eirl)\\.n8e\\..+?\\.g3p\\..+?\\.(?:s6a6\\..+?\\.)?n5k\\.(.+?)\\.)"
      - tag_name: service_address
        regex: "^(http\\.lrl\\.n8e\\..+?\\.g3p\\..+?\\.s6a6\\.(.+?)\\.)"
      - tag_name: target_type
        regex: "^(http\\.(?:eirl|ingress)\\.n8e\\..+?\\.g3p\\..+?\\.r12r\\..+?\\.t8e\\.(.+?)\\.)"
      - tag_name: type
        regex: "^(http\\.(?:eirl|ingress)\\.n8e\\..+?\\.g3p\\..+?\\.r12r\\..+?\\.t8e\\..+?\\.t2e\\.(.+?)\\.)"
      - tag_name: service
        regex: "^(http\\.(?:eirl|ingress)\\.n8e\\..+?\\.g3p\\..+?\\.r12r\\..+?(?:\\.t8e\\..+?|)\\.s5e\\.(.+?)\\.)"
      - tag_name: origin
        regex: "^(http\\.(?:eirl|ingress)\\.n8e\\..+?\\.g3p\\..+?\\.r12r\\..+?(?:\\.t8e\\..+?|)\\.(?:t2e|s5e).+?\\.o4n\\.(.+?)\\.)"
      - tag_name: encryption_id
        regex: "^(http\\.(?:eirl|ingress)\\.n8e\\..+?\\.g3p\\..+?\\.r12r\\..+?\\.s5e\\..+?\\.o4n\\..+?\\.e10d\\.(.+?)\\.)"
      - tag_name: segment_type
        regex: "^((?:cluster|listener)\\..+?\\.eric_tap_stats\\.n8e\\..+?\\.g3p\\..+?\\.s9e\\.(.+?)\\.)"
      - tag_name: event_type
        regex: "^((?:cluster|listener)\\..+?\\.eric_tap_stats\\.n8e\\..+?\\.g3p\\..+?\\.e7e\\.(.+?)\\.)"
      - tag_name: nf_instance_id
        regex: "^(cluster\\.egress\\.n8e\\..+?\\.p2l\\..+?\\.g3p\\..+?\\.n10d\\.(.+?)\\.)"
      # This replaces the default tags (in combination with "use_all_default_tags: false")
      # so that we can change the regex for the virtual_host to span further than the first
      # dot (DND-18714). Same order as in:
      # https://github.com/envoyproxy/envoy/blob/v1.11.1/source/common/config/well_known_names.cc
      # If no regex is given for a tag_name, then the matching definition from the well_known_names
      # is used.
      # Not included are: DynamoDB, MongoDB, GrpcBridge
      - tag_name: envoy.response_code
      - tag_name: envoy.response_code_class
      - tag_name: envoy.http_user_agent
      - tag_name: envoy.virtual_cluster
        regex: "^(vhost\\..+?\\.vcluster\\.(.+?)\\.n8e)"
      - tag_name: envoy.fault_downstream_cluster
      - tag_name: envoy.ssl_cipher
      - tag_name: cipher_suite
      - tag_name: envoy.tcp_prefix
      - tag_name: envoy.clientssl_prefix
      - tag_name: envoy.ratelimit_prefix
      - tag_name: envoy.cluster_name
      - tag_name: envoy.listener_address
      - tag_name: envoy.virtual_host
        regex: "^vhost\\.((.*?)\\.vcluster)"
      - tag_name: envoy.rds_route_config
      - tag_name: envoy.worker_id
      use_all_default_tags: false
    cluster_manager:
      outlier_detection:
        event_log_path: /mnt/pipe.log
    layered_runtime:
      layers:
        - name: edge_protection
          static_layer:
            overload:
              global_downstream_max_connections: {{ .Values.spec.worker.max_active_tcp_connections }}
              premature_reset_total_stream_count: {{ .Values.spec.worker.premature_reset_total_stream_count }}
              premature_reset_min_stream_lifetime_seconds: {{ .Values.spec.worker.premature_reset_min_stream_lifetime_seconds }}
            {{- if ne .Values.spec.worker.max_requests_per_io_cycle "0" }}
            http:
              max_requests_per_io_cycle: {{ .Values.spec.worker.max_requests_per_io_cycle }}
            {{- end }}
            restart_features:
              send_goaway_for_premature_rst_streams: {{ .Values.spec.worker.send_goaway_for_premature_rst_streams }}
            re2:
              max_program_size:
                error_level: 500
