## Create HorizontalPodAutoscaler object for deployment type
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3 ## default is 10
  # metrics:
    # - type: Resource
      # resource:
      # name: cpu
      # targetAverageUtilization: 60
    # - type: Resource
      # resource:
      # name: memory
      # targetAverageUtilization: 60

## See `kubectl explain poddisruptionbudget.spec` for more
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget:
  minAvailable: 1
  # maxUnavailable: 1 ## ANOTHER OPTION

## See `kubectl explain deployment.spec.strategy` for more
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
deploymentStrategy:
  type: RollingUpdate

image:
  repository: armdockerhub.rnd.ericsson.se/grafana/grafana

testFramework:
  image: "armdockerhub.rnd.ericsson.se/bats/bats"

# Apply extra labels to common labels.
extraLabels: {}

downloadDashboardsImage:
  repository: armdockerhub.rnd.ericsson.se/curlimages/curl

## Pod Annotations
# podAnnotations: {}

## Pod Labels
# podLabels: {}

podPortName: grafana

## Deployment annotations
# annotations: {}

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  enabled: true
  type: LoadBalancer
  port: 9966
  targetPort: 3000
  annotations: {}
  labels: {}

resources: {}
# limits:
  # cpu: 100m
  # memory: 128Mi
# requests:
  # cpu: 100m
  # memory: 128Mi

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
persistence:
  type: pvc
  enabled: true
  storageClassName: network-block
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  # annotations: {}
  finalizers:
    - kubernetes.io/pvc-protection
  # selectorLabels: {}
  # subPath: ""
  # existingClaim:

initChownData:
  ## If false, data ownership will not be reset at startup
  ## This allows the prometheus-server to be run with an arbitrary user
  enabled: true

  ## initChownData container image
  image:
    repository: armdockerhub.rnd.ericsson.se/busybox

  ## initChownData resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

## Administrator credentials when not using an existing secret (see below)
adminUser: admin
adminPassword: rootroot

## Use an existing secret for the admin user.
# admin:
  # existingSecret: ""
  # userKey: admin-user
  # passwordKey: admin-password

## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
fullnameOverride: eric-grafana

sidecar:
  image:
    repository: armdockerhub.rnd.ericsson.se/quay.io/kiwigrid/k8s-sidecar
  resources: {}
  # limits:
    # cpu: 100m
    # memory: 100Mi
  # requests:
    # cpu: 50m
    # memory: 50Mi

## Override the deployment namespace
namespaceOverride: ""

## Number of old ReplicaSets to retain
revisionHistoryLimit: 10

## Add a seperate remote image renderer deployment/service
imageRenderer:
  enabled: false ## Enable the image-renderer deployment & service
  image:
    repository: armdockerhub.rnd.ericsson.se/grafana/grafana-image-renderer
  resources: {}
  # limits:
    # cpu: 100m
    # memory: 100Mi
  # requests:
    # cpu: 50m
    # memory: 50Mi

# Extra configmaps to mount in grafana pods
# Values are templated.
extraConfigmapMounts:
  - name: sc-dashboards
    mountPath: /var/lib/grafana/dashboards
    configMap: eric-grafana-sc-dashboards
    readOnly: true
    subPath: ""

## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/<provider_name>
##
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      uid: prom123
      editable: true
      url: http://eric-pm-server:9090
      access: proxy
    - name: InfluxDb
      type: influxdb
      uid: influxdb123
      access: proxy
      url: http://eric-influxdb2:8086
      editable: true
      secureJsonData:
        token: "rootroot"
      jsonData:
        version: Flux
        organization: ericsson
        defaultBucket: metrics
