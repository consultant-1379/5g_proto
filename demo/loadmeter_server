#!/usr/bin/perl

use Socket;
use File::stat;
use Time::localtime;

$server_port = shift;
print "This server will listen on port $server_port\n";

##------------------------------------------------------------------------
# This comes straight from Perl Cookbook:
# make the socket
socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp'));

# so we can restart our server quickly
setsockopt(SERVER, SOL_SOCKET, SO_REUSEADDR, 1);


#
# build up my socket address
$my_addr = sockaddr_in($server_port, INADDR_ANY);
bind(SERVER, $my_addr)
    or die "Couldn't bind to port $server_port : $!\n";

# establish a queue for incoming connections
listen(SERVER, SOMAXCONN)
    or die "Couldn't listen on port $server_port: $!\n";

# ignore broken pipe error when the client exits
$SIG{PIPE} = 'IGNORE';

print "Waiting for user to connect on $my_addr:$server_port ...\n";

# accept and process connections
while (accept(CLIENT, SERVER))
{
    # make the connection to the client unbuffered (auto-flushed)
    $old_fh = select(CLIENT);
    $| = 1;
    select($old_fh);

    binmode CLIENT;

    print "Connected.\n";

    # a client has connected.
    # read commands until he enters "exit"
    while (1)
    {
        $command = <CLIENT>;           # read a command from client
        last if (!defined($command));  # exit when connection lost
        $command =~ s/[ \r\n]*$//;     # remove CR/LF from command
        ##print CLIENT "$command\n";     # echo command to client
        #print CLIENT "\n";
        # print ">$command<\n";

        last if ($command eq "exit");  # user wants to quit
    
        if ($command eq "ekm")
        {
            # special treatment: random values
            #my $max_rand = 33.33333333;
#            my $max_rand = 10.0;
#            my $r1 = 1 +  int(rand($max_rand));
#            my $r2 = 1 +  int(rand($max_rand));
#            my $r3 = 1 +  int(rand($max_rand));
#            my $r4 = 1 +  int(rand($max_rand));
#            my $r5 = 1 +  int(rand($max_rand));
#            my $r6 = 1 +  int(rand($max_rand));
#            my $r7 = 1 +  int(rand($max_rand));
#            my $r8 = 1 +  int(rand($max_rand));
#            my $r9 = 1 +  int(rand($max_rand));
#            my $r10 = 1 + int(rand($max_rand));
#            my $r11 = 1 + int(rand($max_rand));
#            my $r12 = 1 + int(rand($max_rand));
#            my $len = 85 - 12 + length("$r2$r2$r3$r4$r5$r6$r7$r8$r9$r10$r11$r12");
#            my $resp = "LoadData:4:$len                  \n";
#            $resp   .= "MSS1:5:$r1 $r2 $r3\n";
#            $resp   .= "HSS1:6:$r4 $r5 $r6\n";
#            $resp   .= "HSS2:7:$r7 $r8 $r9\n";
#            $resp   .= "HSS3:8:$r10 $r11 $r12\n";
#	    
#	    $resp  = "LoadData:4:63                  \n";
#	    $resp .= "HSS1:5:220 1 1\n";
#	    $resp .= "MME1:6:220 1 1\n";
	    
	    open(INFILE, "< temp_data_$server_port.txt");
            
            my $now = time();
            my $timestamp = stat(INFILE)->mtime;
            $diff =  $now-$timestamp;

	    $resp = "";
            if ($diff< 3) {
	        while (<INFILE>) {
	    	    $resp .= $_ ;
	        }
            }else{
#Loaddata:4:98                  
#:5:420 0 0
#                print STDERR "time of file too old ($diff seconds), faking data\n";
                $linecounter = 0;
                while (<INFILE>) {
                    if ($_ =~ /(\w+:\d+:)\d+( \d+ \d+)/) {
                       $resp .= "${1}0${2}\n";
                       $linecounter++;
#                    } else {
#                        $resp .= $_ ;
                    }
                }
                $len = length($resp)+33;
                $resp = "Loaddata:$linecounter:$len                  \n$resp";

            }   
	    close(INFILE);
#	    print STDERR "$resp\n";
    
            print CLIENT $resp."\0\0";
            # print        $resp . "\nLen: ".(length($resp)+1);
        }
        elsif (defined $response{$command})
        {
            print CLIENT $response{$command}."\0";  # print the response to this cmd
            print        $response{$command};  # print the response to this cmd
        }
        elsif ($command eq "sleep")   # simulate a looong response time
        {
            sleep(30);
            print CLIENT "wake up\r\n";
        }
        elsif ($command eq "interact")  # return live result entered into
        {                               # fakecello
            my $l;
            print "Enter result, \".\" to end\n";
            while (($l = <>) !~ m/^\.$/)
            {
                print CLIENT "$l\n";
            }
            print "ok.\n";
        }
        elsif ($command eq "")      # user just hit enter
        {
            print CLIENT "\r\n";
        }
        else
        {
            print        "unknown command\n";
            print CLIENT "unknown command\r\n";
        }
    }
    close(CLIENT);
    print "User disconnected: $user -----------------------------------\n";
    print "Waiting for user to connect...\n";
}

close(SERVER);
