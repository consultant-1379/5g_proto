#!/usr/bin/expect

################################################################################
#
#  Author   : eustone
#
#  Revision : 1.1
#  Date     : 2022-12-07 11:41:41
#
################################################################################
#
# (C) COPYRIGHT ERICSSON GMBH 2022
#
# The copyright to the computer program(s) herein is the property of
# Ericsson GmbH, Germany.
#
# The program(s) may be used and/or copied only with the written permission
# of Ericsson GmbH in accordance with the terms and conditions stipulated in
# the agreement/contract under which the program(s) have been supplied.
#
################################################################################

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# ------------------------------- Procedures ----------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Show syntax and help information.
# Input:
#  -
#
# Output:
#  -
#
proc show_syntax {} {
    global argv0

    #              1         2         3         4         5         6         7         8
    #     12345678901234567890123456789012345678901234567890123456789012345678901234567890
    puts "This script connects to the CMYP IP address via CLI and list the current stored"
    puts "configuration data backups."
    puts ""
    puts ""
    puts "syntax:"
    puts "======="
    puts ""
    puts "  $argv0 <mandatory> <optional>"
    puts ""
    puts "<mandatory> is:"
    puts "   --ip=<IP address to the node via SSH>"
    puts "   --password=<password for login>"
    puts "   --user=<username for login>"
    puts ""
    puts "<optional> is one or more of the following:"
    puts "  --debug"
    puts "  --help"
    puts "  --port=<port number>"
    puts "  --timeout=<seconds>"
    puts ""
    puts "Where:"
    puts ""
    puts "  --debug"
    puts "    Shows extra debug messages."
    puts ""
    puts "  --help"
    puts "    Shows this help information."
    puts ""
    puts "  --ip=<IP address to the node via SSH>"
    puts "    Set the IP-address to use for connecting to the node, the connection is"
    puts "    done using the SSH protocol."
    puts ""
    puts "  --password=<password for login>"
    puts "    Set the user password to use for connecting to the node, the connection is"
    puts "    done using the SSH protocol."
    puts ""
    puts "  --port=<port number>"
    puts "    Set the port number to use for connecting to the node."
    puts "    If not specified then the default value used would be '22'."
    puts ""
    puts "  --timeout=<seconds>"
    puts "    Set the timeout value to use when sending a command to the node before a"
    puts "    printout is returned back by the node."
    puts "    If nothing is returned back from the node within this time frame or"
    puts "    if the node prompt is not returned back after the last printout then it"
    puts "    is considered as a failure."
    puts "    For long executing commands that takes longer than the default (1200) seconds"
    puts "    to produce any printouts, set this parameter to a higher value."
    puts "    Default is '1200' seconds if not specified."
    puts ""
    puts "  --user=<username for login>"
    puts "    Set the user name to use for connecting to the node, the connection is"
    puts "    done using the SSH protocol."
    puts ""
    puts ""
    puts "Examples:"
    puts "========="
    puts ""
    puts "Example 1:"
    puts "List all backups."
    puts ""
    puts "  $argv0 --user=expert --ip=10.117.41.210 --password='rootroot'"
    puts ""
    puts ""
    puts "The script returns:"
    puts "==================="
    puts ""
    puts " 0: Successful termination"
    puts " 1: Unsuccessful termination"
    puts " 2: Unsuccessful login"
    puts ""
}

source [file join [file dirname [info script]] ../lib/_error_message.exp]
source [file join [file dirname [info script]] ../lib/_exit_all.exp]
source [file join [file dirname [info script]] ../lib/_exit_with_error_message.exp]
source [file join [file dirname [info script]] ../lib/_get_shell_type.exp]
source [file join [file dirname [info script]] ../lib/_login_via_ssh.exp]


# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# ----------------------------- Main code loop --------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------


# increased the default timeout to 1200 in order to let the long-running MAPIWF extension execute
# Set timeout value in seconds to use for waiting for the expected string
set timeout 1200

# Initialize the global error counter
set errorcnt 0

# Initialize debug_list for the scripts that need it
set debug_list {}

set current_time [clock seconds]
set debug_messages 0
set detected_prompt ""
set error_line ""
set ignore_errors 0
set ip ""
set shell ""
set param ""
set password ""
set port ""
set user ""

# Parse all command line parameters
foreach cmd_arg $argv {
    append all_args $cmd_arg " "

    # --help
    if {[regexp "^(\-\-help)$" $cmd_arg junk param] == 1} {
        show_syntax
        exit 1

    # --debug
    } elseif {[regexp "^(\-\-debug)$" $cmd_arg junk param] == 1} {
        set debug_messages 1

    # --ip=
    } elseif {[regexp "^(\-\-ip)=(.+)" $cmd_arg junk param value] == 1} {
        set ip $value

    # --password=
    } elseif {[regexp "^(\-\-password)=(.+)" $cmd_arg junk param value] == 1} {
        set password $value

    # --port=
    } elseif {[regexp "^(\-\-port)=(.+)" $cmd_arg junk param value] == 1} {
        set port $value

    # --timeout=
    } elseif {[regexp "^(\-\-timeout)=(.+)" $cmd_arg junk param value] == 1} {
        set timeout $value

    # --user=
    } elseif {[regexp "^(\-\-user)=(.+)" $cmd_arg junk param value] == 1} {
        set user $value

    } else {
        exit_with_error_message 1 "Unknown parameter \"$cmd_arg\" detected, use parameter --help to see syntax"
    }
}

# Check consistency of the parameters
if {$ip != ""} {
    if {$user == ""} {
        exit_with_error_message 1 "Missing parameter --user="
    }
    if {$password == ""} {
        exit_with_error_message 1 "Missing parameter --password="
    }
} else {
    exit_with_error_message 1 "Missing parameter --ip="
}

# Workaround for problem which happens when this script is run as part of the
# DAFT server playlist which runs the script using a terminal type "dumb" which
# causes the CLISS to not show any prompt which causes all sent commands to
# time out.
# The workaround is to trick the terminal to use a terminal type of "xterm" which
# at least seems to return back a proper CLISS prompt.
set env(TERM) "xterm"

# Connect to the node
if {[login_via_ssh $ip $user $password $port] > 0} {
    # Some error have occurred
    if { $port != "" } {
        exit_with_error_message 2 "Unable to login to node via SSH at IP address $ip and port $port"
    } else {
        exit_with_error_message 2 "Unable to login to node via SSH at IP address $ip"
    }
}

# Determine what kind of shell we have connected to
set shell_type [get_shell_type]

if {$shell_type != "CMYP-CLI"} {
    # CLISS
    # CMXB-LINUX
    # CYGWIN
    # DIRECTOR-LINUX
    # DMX
    # GEP-LINUX
    # GEP-SIGNMCLI
    # ISS
    # LINUX
    # NETCONF
    # SCXB-LINUX-BSP
    # SCXB-LINUX-DMX
    # UNKNOWN
    exit_all
    exit_with_error_message 1 "Unable to determine the shell type or not supported shell type ($shell_type)"
}

# Show previous stored backups
send -- "show brm backup-manager DEFAULT backup | nomore\r"
expect -re "$detected_prompt$"

# Time to exit out of the node, send exit or end until the connection is dropped
exit_all

# Check for any errors
if {$errorcnt > 0} {
    exit_with_error_message 1 "Error Counter = $errorcnt"
} else {
    puts ""
    if { $debug_messages == 1 } {
        if { [info exists debug_list] } {
            if { [llength $debug_list] > 0 } {
                puts "\nThe information printed below can be used as trouble shooting help to find out why the script failed but is probably only useful for the developers of the script.\nThe following events has been seen:"
                puts "-----------------------------------------------------"
                foreach line $debug_list {
                    puts "$line"
                }
                puts "-----------------------------------------------------"
                puts ""
            }
        }
    }
    exit 0
}
