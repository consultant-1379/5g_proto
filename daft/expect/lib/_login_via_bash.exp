################################################################################
#
#  Author   : eustone
#
#  Revision : 1.3
#  Date     : 2023-03-02 18:25:48
#
################################################################################
#
# (C) COPYRIGHT ERICSSON GMBH 2018, 2020, 2022, 2023
#
# The copyright to the computer program(s) herein is the property of
# Ericsson GmbH, Germany.
#
# The program(s) may be used and/or copied only with the written permission
# of Ericsson GmbH in accordance with the terms and conditions stipulated in
# the agreement/contract under which the program(s) have been supplied.
#
################################################################################

source [file join [file dirname [info script]] ../lib/_debug_message.exp]

# -----------------------------------------------------------------------------
# Start a new bash shell.
#
# Input:
#  -
#
# Output:
#  - 0: Success
#    1: Timeout or failure to start bash
#
proc login_via_bash { } {
    global spawn_id
    global timeout

    # Fetch any previously detected prompt and update the local prompt variable
    global detected_prompt
    global detected_prompt_raw
    if {$detected_prompt == ""} {
        set default_prompt "aPromptThatShouldNeverBeMatched1234567890"
        set prompt $default_prompt
    } else {
        set default_prompt $detected_prompt
        set prompt $default_prompt
    }

    # Start a new shell
    debug_message "login_via_bash: spawn -noecho bash"
    if [catch "spawn -noecho bash" reason] {
        puts "\nSpawn of 'bash' failed with reason: $reason\n"
        exit 1
    }
    debug_message "    Prompt before login: $prompt"

    # Save currently set timeout value
    set default_timeout $timeout

    set potential_prompt 0

    # Wait for password request from node
    expect {
        "\n" {
            # Line received, wait for more

            # Restore default timeout value since we have not received the prompt
            set timeout $default_timeout
            set prompt $default_prompt
            set potential_prompt 0

            exp_continue
        }
        -re "$prompt$" {
            if { $prompt == "" } {
                # Continue looking for prompt
                exp_continue
            } else {
                # Restore timeout value
                set timeout $default_timeout
                debug_message "    Prompt detected: $prompt"
                # Ready for next command
            }
        }
        -re "(\[^\r\n\]+\[$#><\] )$" {
            # We have received something that looks like a normal Unix prompt
            set prompt $expect_out(1,string)
            debug_message "    UNIX Prompt detected: $prompt"
        }
        -re "(\[^\r\n\]+)$" {
            # We have received a potential prompt, wait max 1 second for something more to come
            set timeout 1
            set potential_prompt 1
            set prompt $expect_out(1,string)
            debug_message "    Potential Prompt detected: $prompt"

            exp_continue
        }
        eof {
            puts "\nWe were unable to start a new bash shell due to lost connection\n"
            debug_message "    eof detected"
            set timeout $default_timeout
            return 1
        }
        timeout {
            debug_message "    timeout detected, potential_prompt=$potential_prompt"
            if { $potential_prompt == 1 } {
                # Treat this as a success but first restore timeout value
                set timeout $default_timeout
            } else {
                puts "\nWe were unable to start a new bash shell due to a timeout\n"
                set timeout $default_timeout
                return 1
            }
        }
    }

    # Read any pending output
    expect -re ".*"

    # Update the detected prompt , if needed
    if {$prompt != $detected_prompt} {
        # Save the raw prompt before we convert the non-ASCII characters to \uXXXX values
        set detected_prompt_raw $prompt

        # Convert all non-ASCII and Tcl-significant characters into \u escape sequences by using regsub and subst in combination
        # Code copied from example on web page: https://www.tcl.tk/man/tcl8.4/TclCmd/regsub.htm
        set RE {[][{}\$\s\u0100-\uffff]}
        set substitution {[format \\\\u%04x [scan "\\&" %c]]}
        debug_message "    Prompt changed from: $default_prompt"
        set prompt [subst [regsub -all $RE $prompt $substitution]]
        debug_message "    Prompt changed to:   $prompt"

        set default_prompt $prompt
        set detected_prompt $prompt
    }

    return 0
}
