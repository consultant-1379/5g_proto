modelVersion: 2.0

import:
  base: ruleset2.0-eric-base.yaml

description: "An interactive visualization web application"

properties:
  - GRAFANA_REPO_URL: https://grafana.github.io/helm-charts
  - GRAFANA_CHART_NAME: grafana
  - GRAFANA_CHART_VERSION: 6.29.1
  - GRAFANA_DIR: devtools/grafana
  - GRAFANA_SERVICE_NAME: eric-${GRAFANA_CHART_NAME}
  - EXPORT_DIR: ${base.OUTPUT_DIR}/export-grafana

env:
  - RELEASE (default=false)
       
var:
  - build-proxy
  - grafana-chart-version
  - ldap-creds
  - namespace
  - pm-server-fqdn
  - iccr-http-port

rules:
  download:
    - task: move-old-grafana-folder
      cmd: /bin/bash -c "if [[ -d ${GRAFANA_DIR}/helm ]];
                         then
                            mkdir -p ${GRAFANA_DIR}/helm_old;
                            cp -Rp ${GRAFANA_DIR}/helm/. ${GRAFANA_DIR}/helm_old;
                         fi;"
    - task: create-grafana-folder
      cmd: /bin/bash -c "if [[ ! -d ${GRAFANA_DIR}/helm ]];
                         then
                            mkdir -p ${GRAFANA_DIR}/helm;
                         fi;"
    - task: repo-add-pull
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
      cmd: /bin/bash -c "helm repo add ${GRAFANA_CHART_NAME} ${GRAFANA_REPO_URL};
                         helm pull ${GRAFANA_CHART_NAME}/${GRAFANA_CHART_NAME} --version ${GRAFANA_CHART_VERSION} --destination ${GRAFANA_DIR}"
    - task: extract-chart
      cmd: "tar zxvf ${GRAFANA_DIR}/${GRAFANA_CHART_NAME}-${GRAFANA_CHART_VERSION}.tgz --directory ${GRAFANA_DIR}/helm --strip-components=1"
    - task: remove-tgz
      cmd: /bin/bash -c "rm -fr ${GRAFANA_DIR}/*.tgz"
    - task: check-downloaded-version
      cmd: "if [[ -d ${GRAFANA_DIR}/helm_old ]]; then
               diff -qr ${GRAFANA_DIR}/helm/ ${GRAFANA_DIR}/helm_old/;
               if [ $? -eq 0 ]; then
                  echo 'No changes identified';
                  rm -fr ${GRAFANA_DIR}/helm_old;
               else
                  echo 'Changes identified in the new telegraf chart, please check changes';
                  exit 1;
               fi;
            fi;"
      
  init:
    - task: set-output-dir
      cmd: /bin/bash -c "if [[ ! -d ${base.OUTPUT_DIR} ]];
                         then
                            mkdir ${base.OUTPUT_DIR};
                         fi;"
    - task: set-namespace
      cmd: /bin/bash -c "./scripts/bash/setNamespace -u ${env.base.USER} -n ${env.base.NAMESPACE} -h ${env.base.KUBE_HOST}"
    - task: grafana-chart-version
      cmd: /bin/bash -c "echo ${GRAFANA_CHART_VERSION} > ${base.OUTPUT_DIR}/var.grafana-chart-version"
    - task: set-kube-config
      cmd: /bin/bash -c "cp /home/${env.base.USER}/.kube/${env.base.KUBE_HOST}.config ${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf;"
    - task: get-pm-server-fqdn
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
        - "--env KUBECTL_VERSION=${base.KUBECTL_VERSION_HELMBUILDERPY3}"
        - "--env KUBECONFIG=$PWD/${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
      cmd: sh -c 'kubectl get httpproxy eric-pm-server -o=jsonpath='{.spec.virtualhost.fqdn}' -n 5g-bsf-${env.base.USER} > ${base.OUTPUT_DIR}/var.pm-server-fqdn; exit $?'
    - task: get-iccr-http-port
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
        - "--env KUBECTL_VERSION=${base.KUBECTL_VERSION_HELMBUILDERPY3}"
        - "--env KUBECONFIG=$PWD/${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
      cmd: sh -c 'kubectl get svc eric-tm-ingress-controller-cr -o=jsonpath="{.spec.ports[?(@.port==80)].nodePort}" -n 5g-bsf-${env.base.USER} > ${base.OUTPUT_DIR}/var.iccr-http-port; exit $?'

  package:
    - task: copy-values
      cmd: /bin/bash -c "cp ${GRAFANA_DIR}/mods/values.yaml ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}-values.yaml"
    - task: update-prometheus-datasource
      cmd: /bin/bash -c "sed -i 's/eric-pm-server/'${var.pm-server-fqdn}'/g' ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}-values.yaml;
                         sed -i 's/9090/'${var.iccr-http-port}'/g' ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}-values.yaml;"
    - task: copy-grafana-chart
      cmd: /bin/bash -c "if [[ ! -d ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}/helm ]];
                         then
                            mkdir -p ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}/helm;
                         fi;
                         cp -Rp ${GRAFANA_DIR}/helm/. ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}/helm;"
    - task: copy-dashboard-configmap
      cmd: /bin/bash -c "\cp ${GRAFANA_DIR}/mods/sc-dashboards-configmap.yaml ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}/helm/templates/"
    - task: copy-dashboards
      cmd: /bin/bash -c "\cp ${GRAFANA_DIR}/mods/dashboards/* ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}/helm/dashboards;
                         \rm ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}/helm/dashboards/custom-dashboard.json"
    - task: grafana-chart
      docker-image: base.adp-release-auto
      cmd: /bin/bash -c "helm-package --folder ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}/helm
                                      --output ${base.OUTPUT_DIR}
                                      --version ${GRAFANA_CHART_VERSION}"

  deploy:
    - task: grafana
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
        - "--env KUBECONFIG=$PWD/${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
        - "--env HELM_USER=${env.base.USER}"
      cmd: /bin/bash -c 'helm install ${GRAFANA_SERVICE_NAME}-${env.base.USER} --timeout 1500s --namespace ${var.namespace} ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}-${var.grafana-chart-version}.tgz -f ${base.OUTPUT_DIR}/${GRAFANA_CHART_NAME}-values.yaml'

  undeploy:
    - task: telegraf
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
        - "--env KUBECONFIG=${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
        - "--env HELM_USER=${env.base.USER}"
      cmd: sh -c 'helm uninstall ${GRAFANA_SERVICE_NAME}-${env.base.USER} -n ${var.namespace}' 
    - task: remove-all-resources
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env KUBECONFIG=$PWD/${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
      cmd: kubectl api-resources --verbs=list -o name | xargs -n 1 --verbose kubectl delete --ignore-not-found -l app.kubernetes.io/instance=${GRAFANA_SERVICE_NAME}-${env.base.USER}

  clean:
    - task: generated-files
      cmd: /bin/bash -c "rm -rf ${base.OUTPUT_DIR}/*${GRAFANA_CHART_NAME}*;
                         rm -rf ${base.OUTPUT_DIR}/*tmp*"


