modelVersion: 2.0

import:
  base: ruleset2.0-eric-base.yaml

description: "sftp tool for backup export/import testing"

properties:
  - SFTP_NAME: eric-atmoz-sftp

  - EXPORT_DIR: ${base.OUTPUT_DIR}/export-sftp
  
env:
 - BOB_FORCE_IMAGE_PULL (default=false)
 - RELEASE (default=false)
 - TEST_TYPE (default=)

var:
 - sftp-version

rules:
  init:
    - task: base.init:create-output-dir
    - task: base.init:set-namespace
    - task: base.init:set-kube-config
    - task: base.init:api-tokens
    - task: sftp-version
      docker-image: base.adp-release-auto
      cmd: generate-version --is-release ${env.RELEASE} --output sftp-version

  conditions:
    - task: sftp-not-deployed
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
        - "--env KUBECONFIG=$PWD/${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
        - "--env XDG_DATA_HOME=/home/helmuser/.helm"
      cmd: /bin/bash -c "if [ \"\$(helm list -n ${var.base.namespace} | grep ${SFTP_NAME}-${env.base.USER} | wc -l)\" -eq \"1\" ];
                         then exit 1;
                         else exit 0;
                         fi;"

  image:
    - task: build-sftp
      cmd: docker build ./devtools/sftp/
           --file devtools/sftp/Dockerfile
           --tag ${base.ARM_DOCKER_REGISTRY}/${env.base.USER}/${SFTP_NAME}:${var.sftp-version}
           
  lint:
    - task: helm-sftp
      docker-image: base.helm-builder
      cmd: helm devtools/sftp/helm

  package:
    - task: helm-chart-sftp
      docker-image: base.helm-builder
      cmd: 
        - /bin/bash -c "mkdir -p ${base.OUTPUT_DIR}/${SFTP_NAME}"
        - /bin/bash -c "cp -r devtools/sftp/helm/* ${base.OUTPUT_DIR}/${SFTP_NAME}"
        - /bin/bash -c "sed -i 's|sftp_repoPath|'${base.DOCKER_REPO_PATH}'/'${env.base.USER}'|g' ${base.OUTPUT_DIR}/${SFTP_NAME}/eric-product-info.yaml"
        - /bin/bash -c "sed -i 's/sftp_image_name/'${SFTP_NAME}'/g' ${base.OUTPUT_DIR}/${SFTP_NAME}/eric-product-info.yaml"
        - /bin/bash -c "sed -i 's/sftp_image_tag/'${var.sftp-version}'/g' ${base.OUTPUT_DIR}/${SFTP_NAME}/eric-product-info.yaml" 
        - helm package --version ${var.sftp-version} --app-version ${var.sftp-version} ${base.OUTPUT_DIR}/${SFTP_NAME}/ -d ${base.OUTPUT_DIR}/

  push:
    - task: docker-image-sftp
      cmd: docker push ${base.ARM_DOCKER_REGISTRY}/${env.base.USER}/${SFTP_NAME}:${var.sftp-version}
    - task: helm-chart-sftp
      cmd: "curl -f -k -H \"Authorization: Bearer ${var.base.armdocker-api-token}\" --upload-file ${base.OUTPUT_DIR}/${SFTP_NAME}-${var.sftp-version}.tgz \"${base.HELM_CHART_REPO}/${SFTP_NAME}-${var.sftp-version}.tgz\""

  deploy:
    - task: deploy-sftp
      condition: conditions:sftp-not-deployed
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
        - "--env KUBECONFIG=$PWD/${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
        - "--env XDG_DATA_HOME=/home/helmuser/.helm"
      cmd: /bin/bash -c 'if [[ "${env.TEST_TYPE}" = "IaaS_Stability_tools_on_separate_workers" ]];
                        then
                            helm install ${SFTP_NAME}-${env.base.USER} --namespace ${var.base.namespace} --set nodeSelector.usage=tools --set tolerations.sftp[0].key=usage,tolerations.sftp[0].operator=Equal,tolerations.sftp[0].value=tools,tolerations.sftp[0].effect=NoSchedule ${base.OUTPUT_DIR}/${SFTP_NAME}-${var.sftp-version}.tgz;
                        else
                            helm install ${SFTP_NAME}-${env.base.USER} --namespace ${var.base.namespace} ${base.OUTPUT_DIR}/${SFTP_NAME}-${var.sftp-version}.tgz;
                        fi;
                        '

  undeploy:
    - task: undeploy-sftp
      docker-image: base.helm-builder-py3
      docker-flags:
        - "--env HELM_VERSION=${base.HELM_VERSION_HELMBUILDERPY3}"
        - "--env KUBECONFIG=$PWD/${base.OUTPUT_DIR}/${env.base.KUBE_HOST}.admin.conf"
        - "--env XDG_DATA_HOME=home/helmuser/.helm" 
      cmd: helm uninstall ${SFTP_NAME}-${env.base.USER} --namespace ${var.base.namespace} 
      
  export:
    - task: clean:export
    - task: folders
      cmd: /bin/bash -c "mkdir -p ${EXPORT_DIR}; mkdir -p ${EXPORT_DIR}/helm; mkdir -p ${EXPORT_DIR}/docker";      
    - task: helm
      cmd: /bin/bash -c 'cp ${base.OUTPUT_DIR}/${SFTP_NAME}-${var.sftp-version}.tgz ${EXPORT_DIR}/helm';
    - task: image
      cmd: /bin/bash -c 'docker save ${base.DOCKER_REGISTRY_URL}/${base.DOCKER_REPO_PATH}/${env.base.USER}/${SFTP_NAME}:${var.sftp-version} > ${EXPORT_DIR}/docker/${SFTP_NAME}-${var.sftp-version}.tar';

  clean:
    - task: export
      cmd: rm -rf ${EXPORT_DIR}
    - task: helm
      cmd:
        - rm -f ${base.OUTPUT_DIR}/${SFTP_NAME}-*.tgz
        - rm -rf ${base.OUTPUT_DIR}/${SFTP_NAME}
    - task: templates-sftp
      cmd: rm -rf ${base.OUTPUT_DIR}/${SFTP_NAME}/templates/*.yaml
    - task: version
      cmd: rm -f ${base.OUTPUT_DIR}/var.sftp-version
