/*
 * RLF Rate Limiting Service
 * RLF Rate Limiting Service. Â© 2022, Ericsson GmbH. All rights reserved. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.internal.nrlf.ratelimiting;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModelProperty;

/**
 * BucketConfig
 */
@JsonPropertyOrder({ BucketConfig.JSON_PROPERTY_NAME, BucketConfig.JSON_PROPERTY_CAPACITY, BucketConfig.JSON_PROPERTY_FILL_RATE })
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-03-21T10:49:48.438927+01:00[Europe/Berlin]")
public class BucketConfig
{
    public static final String JSON_PROPERTY_NAME = "nm";
    private String name;

    public static final String JSON_PROPERTY_CAPACITY = "cp";
    private Long capacity;

    public static final String JSON_PROPERTY_FILL_RATE = "fr";
    private Double fillRate;

    public BucketConfig name(String name)
    {

        this.name = name;
        return this;
    }

    /**
     * The name of the token bucket, unique within its namespace
     * 
     * @return name
     **/
    @ApiModelProperty(required = true, value = "The name of the token bucket, unique within its namespace")
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public BucketConfig capacity(Long capacity)
    {
        this.capacity = capacity;
        return this;
    }

    /**
     * The capacity of the token bucket minimum: 1
     * 
     * @return capacity
     **/
    @ApiModelProperty(required = true, value = "The capacity of the token bucket")
    @JsonProperty(JSON_PROPERTY_CAPACITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Long getCapacity()
    {
        return capacity;
    }

    public void setCapacity(Long capacity)
    {
        this.capacity = capacity;
    }

    public BucketConfig fillRate(Double fillRate)
    {
        this.fillRate = fillRate;
        return this;
    }

    /**
     * The fill rate [1/s] of the token bucket minimum: 0
     * 
     * @return fillRate
     **/
    @ApiModelProperty(required = true, value = "The fill rate [1/s] of the token bucket")
    @JsonProperty(JSON_PROPERTY_FILL_RATE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Double getFillRate()
    {
        return fillRate;
    }

    public void setFillRate(Double fillRate)
    {
        this.fillRate = fillRate;
    }

    @Override
    public boolean equals(java.lang.Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        BucketConfig bucketConfig = (BucketConfig) o;
        return Objects.equals(this.name, bucketConfig.name) && Objects.equals(this.capacity, bucketConfig.capacity)
               && Objects.equals(this.fillRate, bucketConfig.fillRate);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(name, capacity, fillRate);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class BucketConfig {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
        sb.append("    fillRate: ").append(toIndentedString(fillRate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
