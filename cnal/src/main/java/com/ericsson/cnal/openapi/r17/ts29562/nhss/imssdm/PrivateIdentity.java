/*
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29562.nhss.imssdm;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * IMS Private Identity and its identity type (IMPI or IMSI)
 */
@ApiModel(description = "IMS Private Identity and its identity type (IMPI or IMSI)")
@JsonPropertyOrder({ PrivateIdentity.JSON_PROPERTY_PRIVATE_IDENTITY, PrivateIdentity.JSON_PROPERTY_PRIVATE_IDENTITY_TYPE })
public class PrivateIdentity
{
    public static final String JSON_PROPERTY_PRIVATE_IDENTITY = "privateIdentity";
    private String privateIdentity;

    public static final String JSON_PROPERTY_PRIVATE_IDENTITY_TYPE = "privateIdentityType";
    private String privateIdentityType;

    public PrivateIdentity()
    {
    }

    public PrivateIdentity privateIdentity(String privateIdentity)
    {

        this.privateIdentity = privateIdentity;
        return this;
    }

    /**
     * String containing a Private User Identity or a Private Service Identity
     * 
     * @return privateIdentity
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "String containing a Private User Identity or a Private Service Identity")
    @JsonProperty(JSON_PROPERTY_PRIVATE_IDENTITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getPrivateIdentity()
    {
        return privateIdentity;
    }

    @JsonProperty(JSON_PROPERTY_PRIVATE_IDENTITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPrivateIdentity(String privateIdentity)
    {
        this.privateIdentity = privateIdentity;
    }

    public PrivateIdentity privateIdentityType(String privateIdentityType)
    {

        this.privateIdentityType = privateIdentityType;
        return this;
    }

    /**
     * Represents the type of IMS Private Identity (IMPI or IMSI)
     * 
     * @return privateIdentityType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Represents the type of IMS Private Identity (IMPI or IMSI)")
    @JsonProperty(JSON_PROPERTY_PRIVATE_IDENTITY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getPrivateIdentityType()
    {
        return privateIdentityType;
    }

    @JsonProperty(JSON_PROPERTY_PRIVATE_IDENTITY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPrivateIdentityType(String privateIdentityType)
    {
        this.privateIdentityType = privateIdentityType;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        PrivateIdentity privateIdentity = (PrivateIdentity) o;
        return Objects.equals(this.privateIdentity, privateIdentity.privateIdentity)
               && Objects.equals(this.privateIdentityType, privateIdentity.privateIdentityType);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(privateIdentity, privateIdentityType);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class PrivateIdentity {\n");
        sb.append("    privateIdentity: ").append(toIndentedString(privateIdentity)).append("\n");
        sb.append("    privateIdentityType: ").append(toIndentedString(privateIdentityType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
