/*
 * Nnwdaf_MLModelProvision
 * Nnwdaf_MLModelProvision API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.mlmodelprovision;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription.TargetUeInformation;
import com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.analyticsinfo.EventFilter;
import com.ericsson.cnal.openapi.r17.ts29122.commondata.TimeWindow;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents a subscription to a single event.
 */
@ApiModel(description = "Represents a subscription to a single event.")
@JsonPropertyOrder({ MLEventSubscription.JSON_PROPERTY_M_L_EVENT,
                     MLEventSubscription.JSON_PROPERTY_M_L_EVENT_FILTER,
                     MLEventSubscription.JSON_PROPERTY_TGT_UE,
                     MLEventSubscription.JSON_PROPERTY_M_L_TARGET_PERIOD,
                     MLEventSubscription.JSON_PROPERTY_EXPIRY_TIME })
public class MLEventSubscription
{
    public static final String JSON_PROPERTY_M_L_EVENT = "mLEvent";
    private String mLEvent;

    public static final String JSON_PROPERTY_M_L_EVENT_FILTER = "mLEventFilter";
    private EventFilter mLEventFilter;

    public static final String JSON_PROPERTY_TGT_UE = "tgtUe";
    private TargetUeInformation tgtUe;

    public static final String JSON_PROPERTY_M_L_TARGET_PERIOD = "mLTargetPeriod";
    private TimeWindow mLTargetPeriod;

    public static final String JSON_PROPERTY_EXPIRY_TIME = "expiryTime";
    private OffsetDateTime expiryTime;

    public MLEventSubscription()
    {
    }

    public MLEventSubscription mLEvent(String mLEvent)
    {

        this.mLEvent = mLEvent;
        return this;
    }

    /**
     * Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed
     * is load level information of Network Slice - NETWORK_PERFORMANCE: Indicates
     * that the event subscribed is network performance information. - NF_LOAD:
     * Indicates that the event subscribed is load level and status of one or
     * several Network Functions. - SERVICE_EXPERIENCE: Indicates that the event
     * subscribed is service experience. - UE_MOBILITY: Indicates that the event
     * subscribed is UE mobility information. - UE_COMMUNICATION: Indicates that the
     * event subscribed is UE communication information. - QOS_SUSTAINABILITY:
     * Indicates that the event subscribed is QoS sustainability. -
     * ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal
     * behaviour. - USER_DATA_CONGESTION: Indicates that the event subscribed is
     * user data congestion information. - NSI_LOAD_LEVEL: Indicates that the event
     * subscribed is load level information of Network Slice and the optionally
     * associated Network Slice Instance - DN_PERFORMANCE: Indicates that the event
     * subscribed is DN performance information. - DISPERSION: Indicates that the
     * event subscribed is dispersion information. - RED_TRANS_EXP: Indicates that
     * the event subscribed is redundant transmission experience. -
     * WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance. -
     * SM_CONGESTION: Indicates the Session Management Congestion Control Experience
     * information for specific DNN and/or S-NSSAI.
     * 
     * @return mLEvent
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice   - NETWORK_PERFORMANCE: Indicates that the event subscribed is network performance information.   - NF_LOAD: Indicates that the event subscribed is load level and status of one or several Network Functions.   - SERVICE_EXPERIENCE: Indicates that the event subscribed is service experience.   - UE_MOBILITY: Indicates that the event subscribed is UE mobility information.   - UE_COMMUNICATION: Indicates that the event subscribed is UE communication information.   - QOS_SUSTAINABILITY: Indicates that the event subscribed is QoS sustainability.   - ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour.   - USER_DATA_CONGESTION: Indicates that the event subscribed is user data congestion information.   - NSI_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice and the optionally associated Network Slice Instance   - DN_PERFORMANCE: Indicates that the event subscribed is DN performance information.   - DISPERSION: Indicates that the event subscribed is dispersion information.   - RED_TRANS_EXP: Indicates that the event subscribed is redundant transmission experience.   - WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance.   - SM_CONGESTION: Indicates the Session Management Congestion Control Experience information for specific DNN and/or S-NSSAI. ")
    @JsonProperty(JSON_PROPERTY_M_L_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getmLEvent()
    {
        return mLEvent;
    }

    @JsonProperty(JSON_PROPERTY_M_L_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setmLEvent(String mLEvent)
    {
        this.mLEvent = mLEvent;
    }

    public MLEventSubscription mLEventFilter(EventFilter mLEventFilter)
    {

        this.mLEventFilter = mLEventFilter;
        return this;
    }

    /**
     * Get mLEventFilter
     * 
     * @return mLEventFilter
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_M_L_EVENT_FILTER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public EventFilter getmLEventFilter()
    {
        return mLEventFilter;
    }

    @JsonProperty(JSON_PROPERTY_M_L_EVENT_FILTER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setmLEventFilter(EventFilter mLEventFilter)
    {
        this.mLEventFilter = mLEventFilter;
    }

    public MLEventSubscription tgtUe(TargetUeInformation tgtUe)
    {

        this.tgtUe = tgtUe;
        return this;
    }

    /**
     * Get tgtUe
     * 
     * @return tgtUe
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_TGT_UE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public TargetUeInformation getTgtUe()
    {
        return tgtUe;
    }

    @JsonProperty(JSON_PROPERTY_TGT_UE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTgtUe(TargetUeInformation tgtUe)
    {
        this.tgtUe = tgtUe;
    }

    public MLEventSubscription mLTargetPeriod(TimeWindow mLTargetPeriod)
    {

        this.mLTargetPeriod = mLTargetPeriod;
        return this;
    }

    /**
     * Get mLTargetPeriod
     * 
     * @return mLTargetPeriod
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_M_L_TARGET_PERIOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public TimeWindow getmLTargetPeriod()
    {
        return mLTargetPeriod;
    }

    @JsonProperty(JSON_PROPERTY_M_L_TARGET_PERIOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setmLTargetPeriod(TimeWindow mLTargetPeriod)
    {
        this.mLTargetPeriod = mLTargetPeriod;
    }

    public MLEventSubscription expiryTime(OffsetDateTime expiryTime)
    {

        this.expiryTime = expiryTime;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return expiryTime
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_EXPIRY_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getExpiryTime()
    {
        return expiryTime;
    }

    @JsonProperty(JSON_PROPERTY_EXPIRY_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExpiryTime(OffsetDateTime expiryTime)
    {
        this.expiryTime = expiryTime;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        MLEventSubscription mlEventSubscription = (MLEventSubscription) o;
        return Objects.equals(this.mLEvent, mlEventSubscription.mLEvent) && Objects.equals(this.mLEventFilter, mlEventSubscription.mLEventFilter)
               && Objects.equals(this.tgtUe, mlEventSubscription.tgtUe) && Objects.equals(this.mLTargetPeriod, mlEventSubscription.mLTargetPeriod)
               && Objects.equals(this.expiryTime, mlEventSubscription.expiryTime);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(mLEvent, mLEventFilter, tgtUe, mLTargetPeriod, expiryTime);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class MLEventSubscription {\n");
        sb.append("    mLEvent: ").append(toIndentedString(mLEvent)).append("\n");
        sb.append("    mLEventFilter: ").append(toIndentedString(mLEventFilter)).append("\n");
        sb.append("    tgtUe: ").append(toIndentedString(tgtUe)).append("\n");
        sb.append("    mLTargetPeriod: ").append(toIndentedString(mLTargetPeriod)).append("\n");
        sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
