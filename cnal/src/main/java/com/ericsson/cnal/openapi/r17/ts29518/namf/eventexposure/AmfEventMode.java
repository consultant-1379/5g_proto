/*
 * Namf_EventExposure
 * AMF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29518.namf.eventexposure;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Describes how the reports shall be generated by a subscribed event
 */
@ApiModel(description = "Describes how the reports shall be generated by a subscribed event")
@JsonPropertyOrder({ AmfEventMode.JSON_PROPERTY_TRIGGER,
                     AmfEventMode.JSON_PROPERTY_MAX_REPORTS,
                     AmfEventMode.JSON_PROPERTY_EXPIRY,
                     AmfEventMode.JSON_PROPERTY_REP_PERIOD,
                     AmfEventMode.JSON_PROPERTY_SAMP_RATIO,
                     AmfEventMode.JSON_PROPERTY_PARTITIONING_CRITERIA,
                     AmfEventMode.JSON_PROPERTY_NOTIF_FLAG })
public class AmfEventMode
{
    public static final String JSON_PROPERTY_TRIGGER = "trigger";
    private String trigger;

    public static final String JSON_PROPERTY_MAX_REPORTS = "maxReports";
    private Integer maxReports;

    public static final String JSON_PROPERTY_EXPIRY = "expiry";
    private OffsetDateTime expiry;

    public static final String JSON_PROPERTY_REP_PERIOD = "repPeriod";
    private Integer repPeriod;

    public static final String JSON_PROPERTY_SAMP_RATIO = "sampRatio";
    private Integer sampRatio;

    public static final String JSON_PROPERTY_PARTITIONING_CRITERIA = "partitioningCriteria";
    private List<String> partitioningCriteria = null;

    public static final String JSON_PROPERTY_NOTIF_FLAG = "notifFlag";
    private String notifFlag;

    public AmfEventMode()
    {
    }

    public AmfEventMode trigger(String trigger)
    {

        this.trigger = trigger;
        return this;
    }

    /**
     * Describes how AMF should generate the report for the event
     * 
     * @return trigger
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Describes how AMF should generate the report for the event")
    @JsonProperty(JSON_PROPERTY_TRIGGER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getTrigger()
    {
        return trigger;
    }

    @JsonProperty(JSON_PROPERTY_TRIGGER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTrigger(String trigger)
    {
        this.trigger = trigger;
    }

    public AmfEventMode maxReports(Integer maxReports)
    {

        this.maxReports = maxReports;
        return this;
    }

    /**
     * Get maxReports
     * 
     * @return maxReports
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_MAX_REPORTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getMaxReports()
    {
        return maxReports;
    }

    @JsonProperty(JSON_PROPERTY_MAX_REPORTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMaxReports(Integer maxReports)
    {
        this.maxReports = maxReports;
    }

    public AmfEventMode expiry(OffsetDateTime expiry)
    {

        this.expiry = expiry;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return expiry
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_EXPIRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getExpiry()
    {
        return expiry;
    }

    @JsonProperty(JSON_PROPERTY_EXPIRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExpiry(OffsetDateTime expiry)
    {
        this.expiry = expiry;
    }

    public AmfEventMode repPeriod(Integer repPeriod)
    {

        this.repPeriod = repPeriod;
        return this;
    }

    /**
     * indicating a time in seconds.
     * 
     * @return repPeriod
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "indicating a time in seconds.")
    @JsonProperty(JSON_PROPERTY_REP_PERIOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getRepPeriod()
    {
        return repPeriod;
    }

    @JsonProperty(JSON_PROPERTY_REP_PERIOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRepPeriod(Integer repPeriod)
    {
        this.repPeriod = repPeriod;
    }

    public AmfEventMode sampRatio(Integer sampRatio)
    {

        this.sampRatio = sampRatio;
        return this;
    }

    /**
     * Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS
     * 23.502), expressed in percent. minimum: 1 maximum: 100
     * 
     * @return sampRatio
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  ")
    @JsonProperty(JSON_PROPERTY_SAMP_RATIO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getSampRatio()
    {
        return sampRatio;
    }

    @JsonProperty(JSON_PROPERTY_SAMP_RATIO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSampRatio(Integer sampRatio)
    {
        this.sampRatio = sampRatio;
    }

    public AmfEventMode partitioningCriteria(List<String> partitioningCriteria)
    {

        this.partitioningCriteria = partitioningCriteria;
        return this;
    }

    public AmfEventMode addPartitioningCriteriaItem(String partitioningCriteriaItem)
    {
        if (this.partitioningCriteria == null)
        {
            this.partitioningCriteria = new ArrayList<>();
        }
        this.partitioningCriteria.add(partitioningCriteriaItem);
        return this;
    }

    /**
     * Get partitioningCriteria
     * 
     * @return partitioningCriteria
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_PARTITIONING_CRITERIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getPartitioningCriteria()
    {
        return partitioningCriteria;
    }

    @JsonProperty(JSON_PROPERTY_PARTITIONING_CRITERIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPartitioningCriteria(List<String> partitioningCriteria)
    {
        this.partitioningCriteria = partitioningCriteria;
    }

    public AmfEventMode notifFlag(String notifFlag)
    {

        this.notifFlag = notifFlag;
        return this;
    }

    /**
     * Possible values are: - ACTIVATE: The event notification is activated. -
     * DEACTIVATE: The event notification is deactivated and shall be muted. The
     * available event(s) shall be stored. - RETRIEVAL: The event notification shall
     * be sent to the NF service consumer(s), after that, is muted again.
     * 
     * @return notifFlag
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Possible values are: - ACTIVATE: The event notification is activated. - DEACTIVATE: The event notification is deactivated and shall be muted. The available    event(s) shall be stored. - RETRIEVAL: The event notification shall be sent to the NF service consumer(s),   after that, is muted again.  ")
    @JsonProperty(JSON_PROPERTY_NOTIF_FLAG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNotifFlag()
    {
        return notifFlag;
    }

    @JsonProperty(JSON_PROPERTY_NOTIF_FLAG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNotifFlag(String notifFlag)
    {
        this.notifFlag = notifFlag;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        AmfEventMode amfEventMode = (AmfEventMode) o;
        return Objects.equals(this.trigger, amfEventMode.trigger) && Objects.equals(this.maxReports, amfEventMode.maxReports)
               && Objects.equals(this.expiry, amfEventMode.expiry) && Objects.equals(this.repPeriod, amfEventMode.repPeriod)
               && Objects.equals(this.sampRatio, amfEventMode.sampRatio) && Objects.equals(this.partitioningCriteria, amfEventMode.partitioningCriteria)
               && Objects.equals(this.notifFlag, amfEventMode.notifFlag);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(trigger, maxReports, expiry, repPeriod, sampRatio, partitioningCriteria, notifFlag);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class AmfEventMode {\n");
        sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
        sb.append("    maxReports: ").append(toIndentedString(maxReports)).append("\n");
        sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
        sb.append("    repPeriod: ").append(toIndentedString(repPeriod)).append("\n");
        sb.append("    sampRatio: ").append(toIndentedString(sampRatio)).append("\n");
        sb.append("    partitioningCriteria: ").append(toIndentedString(partitioningCriteria)).append("\n");
        sb.append("    notifFlag: ").append(toIndentedString(notifFlag)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
