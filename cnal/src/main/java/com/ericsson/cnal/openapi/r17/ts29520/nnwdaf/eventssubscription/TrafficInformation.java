/*
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Traffic information including UL/DL data rate and/or Traffic volume.
 */
@ApiModel(description = "Traffic information including UL/DL data rate and/or Traffic volume.")
@JsonPropertyOrder({ TrafficInformation.JSON_PROPERTY_UPLINK_RATE,
                     TrafficInformation.JSON_PROPERTY_DOWNLINK_RATE,
                     TrafficInformation.JSON_PROPERTY_UPLINK_VOLUME,
                     TrafficInformation.JSON_PROPERTY_DOWNLINK_VOLUME,
                     TrafficInformation.JSON_PROPERTY_TOTAL_VOLUME })
public class TrafficInformation
{
    public static final String JSON_PROPERTY_UPLINK_RATE = "uplinkRate";
    private String uplinkRate;

    public static final String JSON_PROPERTY_DOWNLINK_RATE = "downlinkRate";
    private String downlinkRate;

    public static final String JSON_PROPERTY_UPLINK_VOLUME = "uplinkVolume";
    private Long uplinkVolume;

    public static final String JSON_PROPERTY_DOWNLINK_VOLUME = "downlinkVolume";
    private Long downlinkVolume;

    public static final String JSON_PROPERTY_TOTAL_VOLUME = "totalVolume";
    private Long totalVolume;

    public TrafficInformation()
    {
    }

    public TrafficInformation uplinkRate(String uplinkRate)
    {

        this.uplinkRate = uplinkRate;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return uplinkRate
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_UPLINK_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getUplinkRate()
    {
        return uplinkRate;
    }

    @JsonProperty(JSON_PROPERTY_UPLINK_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUplinkRate(String uplinkRate)
    {
        this.uplinkRate = uplinkRate;
    }

    public TrafficInformation downlinkRate(String downlinkRate)
    {

        this.downlinkRate = downlinkRate;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return downlinkRate
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_DOWNLINK_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDownlinkRate()
    {
        return downlinkRate;
    }

    @JsonProperty(JSON_PROPERTY_DOWNLINK_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDownlinkRate(String downlinkRate)
    {
        this.downlinkRate = downlinkRate;
    }

    public TrafficInformation uplinkVolume(Long uplinkVolume)
    {

        this.uplinkVolume = uplinkVolume;
        return this;
    }

    /**
     * Unsigned integer identifying a volume in units of bytes. minimum: 0
     * 
     * @return uplinkVolume
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Unsigned integer identifying a volume in units of bytes.")
    @JsonProperty(JSON_PROPERTY_UPLINK_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Long getUplinkVolume()
    {
        return uplinkVolume;
    }

    @JsonProperty(JSON_PROPERTY_UPLINK_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUplinkVolume(Long uplinkVolume)
    {
        this.uplinkVolume = uplinkVolume;
    }

    public TrafficInformation downlinkVolume(Long downlinkVolume)
    {

        this.downlinkVolume = downlinkVolume;
        return this;
    }

    /**
     * Unsigned integer identifying a volume in units of bytes. minimum: 0
     * 
     * @return downlinkVolume
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Unsigned integer identifying a volume in units of bytes.")
    @JsonProperty(JSON_PROPERTY_DOWNLINK_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Long getDownlinkVolume()
    {
        return downlinkVolume;
    }

    @JsonProperty(JSON_PROPERTY_DOWNLINK_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDownlinkVolume(Long downlinkVolume)
    {
        this.downlinkVolume = downlinkVolume;
    }

    public TrafficInformation totalVolume(Long totalVolume)
    {

        this.totalVolume = totalVolume;
        return this;
    }

    /**
     * Unsigned integer identifying a volume in units of bytes. minimum: 0
     * 
     * @return totalVolume
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Unsigned integer identifying a volume in units of bytes.")
    @JsonProperty(JSON_PROPERTY_TOTAL_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Long getTotalVolume()
    {
        return totalVolume;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTotalVolume(Long totalVolume)
    {
        this.totalVolume = totalVolume;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        TrafficInformation trafficInformation = (TrafficInformation) o;
        return Objects.equals(this.uplinkRate, trafficInformation.uplinkRate) && Objects.equals(this.downlinkRate, trafficInformation.downlinkRate)
               && Objects.equals(this.uplinkVolume, trafficInformation.uplinkVolume) && Objects.equals(this.downlinkVolume, trafficInformation.downlinkVolume)
               && Objects.equals(this.totalVolume, trafficInformation.totalVolume);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(uplinkRate, downlinkRate, uplinkVolume, downlinkVolume, totalVolume);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class TrafficInformation {\n");
        sb.append("    uplinkRate: ").append(toIndentedString(uplinkRate)).append("\n");
        sb.append("    downlinkRate: ").append(toIndentedString(downlinkRate)).append("\n");
        sb.append("    uplinkVolume: ").append(toIndentedString(uplinkVolume)).append("\n");
        sb.append("    downlinkVolume: ").append(toIndentedString(downlinkVolume)).append("\n");
        sb.append("    totalVolume: ").append(toIndentedString(totalVolume)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
