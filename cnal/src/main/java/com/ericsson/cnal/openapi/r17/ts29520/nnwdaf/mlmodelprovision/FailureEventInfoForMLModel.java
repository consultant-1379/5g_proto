/*
 * Nnwdaf_MLModelProvision
 * Nnwdaf_MLModelProvision API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.mlmodelprovision;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents the event(s) that the subscription is not successful including the
 * failure reason(s).
 */
@ApiModel(description = "Represents the event(s) that the subscription is not successful including the failure  reason(s). ")
@JsonPropertyOrder({ FailureEventInfoForMLModel.JSON_PROPERTY_EVENT, FailureEventInfoForMLModel.JSON_PROPERTY_FAILURE_CODE })
public class FailureEventInfoForMLModel
{
    public static final String JSON_PROPERTY_EVENT = "event";
    private String event;

    public static final String JSON_PROPERTY_FAILURE_CODE = "failureCode";
    private String failureCode;

    public FailureEventInfoForMLModel()
    {
    }

    public FailureEventInfoForMLModel event(String event)
    {

        this.event = event;
        return this;
    }

    /**
     * Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed
     * is load level information of Network Slice - NETWORK_PERFORMANCE: Indicates
     * that the event subscribed is network performance information. - NF_LOAD:
     * Indicates that the event subscribed is load level and status of one or
     * several Network Functions. - SERVICE_EXPERIENCE: Indicates that the event
     * subscribed is service experience. - UE_MOBILITY: Indicates that the event
     * subscribed is UE mobility information. - UE_COMMUNICATION: Indicates that the
     * event subscribed is UE communication information. - QOS_SUSTAINABILITY:
     * Indicates that the event subscribed is QoS sustainability. -
     * ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal
     * behaviour. - USER_DATA_CONGESTION: Indicates that the event subscribed is
     * user data congestion information. - NSI_LOAD_LEVEL: Indicates that the event
     * subscribed is load level information of Network Slice and the optionally
     * associated Network Slice Instance - DN_PERFORMANCE: Indicates that the event
     * subscribed is DN performance information. - DISPERSION: Indicates that the
     * event subscribed is dispersion information. - RED_TRANS_EXP: Indicates that
     * the event subscribed is redundant transmission experience. -
     * WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance. -
     * SM_CONGESTION: Indicates the Session Management Congestion Control Experience
     * information for specific DNN and/or S-NSSAI.
     * 
     * @return event
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice   - NETWORK_PERFORMANCE: Indicates that the event subscribed is network performance information.   - NF_LOAD: Indicates that the event subscribed is load level and status of one or several Network Functions.   - SERVICE_EXPERIENCE: Indicates that the event subscribed is service experience.   - UE_MOBILITY: Indicates that the event subscribed is UE mobility information.   - UE_COMMUNICATION: Indicates that the event subscribed is UE communication information.   - QOS_SUSTAINABILITY: Indicates that the event subscribed is QoS sustainability.   - ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour.   - USER_DATA_CONGESTION: Indicates that the event subscribed is user data congestion information.   - NSI_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice and the optionally associated Network Slice Instance   - DN_PERFORMANCE: Indicates that the event subscribed is DN performance information.   - DISPERSION: Indicates that the event subscribed is dispersion information.   - RED_TRANS_EXP: Indicates that the event subscribed is redundant transmission experience.   - WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance.   - SM_CONGESTION: Indicates the Session Management Congestion Control Experience information for specific DNN and/or S-NSSAI. ")
    @JsonProperty(JSON_PROPERTY_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEvent()
    {
        return event;
    }

    @JsonProperty(JSON_PROPERTY_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEvent(String event)
    {
        this.event = event;
    }

    public FailureEventInfoForMLModel failureCode(String failureCode)
    {

        this.failureCode = failureCode;
        return this;
    }

    /**
     * Possible values are - UNAVAILABLE_ML_MODEL: Indicates the requested ML model
     * for the event is unavailable.
     * 
     * @return failureCode
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Possible values are - UNAVAILABLE_ML_MODEL: Indicates the requested ML model for the event is unavailable. ")
    @JsonProperty(JSON_PROPERTY_FAILURE_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getFailureCode()
    {
        return failureCode;
    }

    @JsonProperty(JSON_PROPERTY_FAILURE_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFailureCode(String failureCode)
    {
        this.failureCode = failureCode;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        FailureEventInfoForMLModel failureEventInfoForMLModel = (FailureEventInfoForMLModel) o;
        return Objects.equals(this.event, failureEventInfoForMLModel.event) && Objects.equals(this.failureCode, failureEventInfoForMLModel.failureCode);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(event, failureCode);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class FailureEventInfoForMLModel {\n");
        sb.append("    event: ").append(toIndentedString(event)).append("\n");
        sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
