/*
 * Unified Data Repository Service API file for Application Data
 * The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: -
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29519.application.data;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents traffic influence data for notification.
 */
@ApiModel(description = "Represents traffic influence data for notification.")
@JsonPropertyOrder({ TrafficInfluDataNotif.JSON_PROPERTY_RES_URI, TrafficInfluDataNotif.JSON_PROPERTY_TRAFFIC_INFLU_DATA })
public class TrafficInfluDataNotif
{
    public static final String JSON_PROPERTY_RES_URI = "resUri";
    private String resUri;

    public static final String JSON_PROPERTY_TRAFFIC_INFLU_DATA = "trafficInfluData";
    private TrafficInfluData trafficInfluData;

    public TrafficInfluDataNotif()
    {
    }

    public TrafficInfluDataNotif resUri(String resUri)
    {

        this.resUri = resUri;
        return this;
    }

    /**
     * String providing an URI formatted according to RFC 3986.
     * 
     * @return resUri
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "String providing an URI formatted according to RFC 3986.")
    @JsonProperty(JSON_PROPERTY_RES_URI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getResUri()
    {
        return resUri;
    }

    @JsonProperty(JSON_PROPERTY_RES_URI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setResUri(String resUri)
    {
        this.resUri = resUri;
    }

    public TrafficInfluDataNotif trafficInfluData(TrafficInfluData trafficInfluData)
    {

        this.trafficInfluData = trafficInfluData;
        return this;
    }

    /**
     * Get trafficInfluData
     * 
     * @return trafficInfluData
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_TRAFFIC_INFLU_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public TrafficInfluData getTrafficInfluData()
    {
        return trafficInfluData;
    }

    @JsonProperty(JSON_PROPERTY_TRAFFIC_INFLU_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTrafficInfluData(TrafficInfluData trafficInfluData)
    {
        this.trafficInfluData = trafficInfluData;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        TrafficInfluDataNotif trafficInfluDataNotif = (TrafficInfluDataNotif) o;
        return Objects.equals(this.resUri, trafficInfluDataNotif.resUri) && Objects.equals(this.trafficInfluData, trafficInfluDataNotif.trafficInfluData);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(resUri, trafficInfluData);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class TrafficInfluDataNotif {\n");
        sb.append("    resUri: ").append(toIndentedString(resUri)).append("\n");
        sb.append("    trafficInfluData: ").append(toIndentedString(trafficInfluData)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
