/*
 * Nsmf_EventExposure
 * Session Management Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29508.nsmf.eventexposure;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents information on the SM congestion control applied SM NAS messages
 * that SMF sends to UE for PDU Session.
 */
@ApiModel(description = "Represents information on the SM congestion control applied SM NAS messages that SMF sends  to UE for PDU Session. ")
@JsonPropertyOrder({ SmNasFromSmf.JSON_PROPERTY_SM_NAS_TYPE,
                     SmNasFromSmf.JSON_PROPERTY_TIME_STAMP,
                     SmNasFromSmf.JSON_PROPERTY_BACKOFF_TIMER,
                     SmNasFromSmf.JSON_PROPERTY_APPLIED_SMCC_TYPE })
public class SmNasFromSmf
{
    public static final String JSON_PROPERTY_SM_NAS_TYPE = "smNasType";
    private String smNasType;

    public static final String JSON_PROPERTY_TIME_STAMP = "timeStamp";
    private OffsetDateTime timeStamp;

    public static final String JSON_PROPERTY_BACKOFF_TIMER = "backoffTimer";
    private Integer backoffTimer;

    public static final String JSON_PROPERTY_APPLIED_SMCC_TYPE = "appliedSmccType";
    private Object appliedSmccType;

    public SmNasFromSmf()
    {
    }

    public SmNasFromSmf smNasType(String smNasType)
    {

        this.smNasType = smNasType;
        return this;
    }

    /**
     * Get smNasType
     * 
     * @return smNasType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_SM_NAS_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getSmNasType()
    {
        return smNasType;
    }

    @JsonProperty(JSON_PROPERTY_SM_NAS_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSmNasType(String smNasType)
    {
        this.smNasType = smNasType;
    }

    public SmNasFromSmf timeStamp(OffsetDateTime timeStamp)
    {

        this.timeStamp = timeStamp;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return timeStamp
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_TIME_STAMP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getTimeStamp()
    {
        return timeStamp;
    }

    @JsonProperty(JSON_PROPERTY_TIME_STAMP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimeStamp(OffsetDateTime timeStamp)
    {
        this.timeStamp = timeStamp;
    }

    public SmNasFromSmf backoffTimer(Integer backoffTimer)
    {

        this.backoffTimer = backoffTimer;
        return this;
    }

    /**
     * indicating a time in seconds.
     * 
     * @return backoffTimer
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "indicating a time in seconds.")
    @JsonProperty(JSON_PROPERTY_BACKOFF_TIMER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getBackoffTimer()
    {
        return backoffTimer;
    }

    @JsonProperty(JSON_PROPERTY_BACKOFF_TIMER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBackoffTimer(Integer backoffTimer)
    {
        this.backoffTimer = backoffTimer;
    }

    public SmNasFromSmf appliedSmccType(Object appliedSmccType)
    {

        this.appliedSmccType = appliedSmccType;
        return this;
    }

    /**
     * Get appliedSmccType
     * 
     * @return appliedSmccType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_APPLIED_SMCC_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Object getAppliedSmccType()
    {
        return appliedSmccType;
    }

    @JsonProperty(JSON_PROPERTY_APPLIED_SMCC_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAppliedSmccType(Object appliedSmccType)
    {
        this.appliedSmccType = appliedSmccType;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        SmNasFromSmf smNasFromSmf = (SmNasFromSmf) o;
        return Objects.equals(this.smNasType, smNasFromSmf.smNasType) && Objects.equals(this.timeStamp, smNasFromSmf.timeStamp)
               && Objects.equals(this.backoffTimer, smNasFromSmf.backoffTimer) && Objects.equals(this.appliedSmccType, smNasFromSmf.appliedSmccType);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(smNasType, timeStamp, backoffTimer, appliedSmccType);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class SmNasFromSmf {\n");
        sb.append("    smNasType: ").append(toIndentedString(smNasType)).append("\n");
        sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
        sb.append("    backoffTimer: ").append(toIndentedString(backoffTimer)).append("\n");
        sb.append("    appliedSmccType: ").append(toIndentedString(appliedSmccType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
