/*
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Indicates the usage ranking criterion between the high, medium and low usage
 * UE.
 */
@ApiModel(description = "Indicates the usage ranking criterion between the high, medium and low usage UE.")
@JsonPropertyOrder({ RankingCriterion.JSON_PROPERTY_HIGH_BASE, RankingCriterion.JSON_PROPERTY_LOW_BASE })
public class RankingCriterion
{
    public static final String JSON_PROPERTY_HIGH_BASE = "highBase";
    private Integer highBase;

    public static final String JSON_PROPERTY_LOW_BASE = "lowBase";
    private Integer lowBase;

    public RankingCriterion()
    {
    }

    public RankingCriterion highBase(Integer highBase)
    {

        this.highBase = highBase;
        return this;
    }

    /**
     * Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS
     * 23.502), expressed in percent. minimum: 1 maximum: 100
     * 
     * @return highBase
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  ")
    @JsonProperty(JSON_PROPERTY_HIGH_BASE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getHighBase()
    {
        return highBase;
    }

    @JsonProperty(JSON_PROPERTY_HIGH_BASE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setHighBase(Integer highBase)
    {
        this.highBase = highBase;
    }

    public RankingCriterion lowBase(Integer lowBase)
    {

        this.lowBase = lowBase;
        return this;
    }

    /**
     * Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS
     * 23.502), expressed in percent. minimum: 1 maximum: 100
     * 
     * @return lowBase
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  ")
    @JsonProperty(JSON_PROPERTY_LOW_BASE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getLowBase()
    {
        return lowBase;
    }

    @JsonProperty(JSON_PROPERTY_LOW_BASE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLowBase(Integer lowBase)
    {
        this.lowBase = lowBase;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        RankingCriterion rankingCriterion = (RankingCriterion) o;
        return Objects.equals(this.highBase, rankingCriterion.highBase) && Objects.equals(this.lowBase, rankingCriterion.lowBase);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(highBase, lowBase);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class RankingCriterion {\n");
        sb.append("    highBase: ").append(toIndentedString(highBase)).append("\n");
        sb.append("    lowBase: ").append(toIndentedString(lowBase)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
