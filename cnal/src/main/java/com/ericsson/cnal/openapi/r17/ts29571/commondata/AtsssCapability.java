/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Containes Capability to support procedures related to Access Traffic
 * Steering, Switching, Splitting.
 */
@ApiModel(description = "Containes Capability to support procedures related to Access Traffic Steering, Switching, Splitting. ")
@JsonPropertyOrder({ AtsssCapability.JSON_PROPERTY_ATSSS_L_L, AtsssCapability.JSON_PROPERTY_MPTCP, AtsssCapability.JSON_PROPERTY_RTT_WITHOUT_PMF })
public class AtsssCapability
{
    public static final String JSON_PROPERTY_ATSSS_L_L = "atsssLL";
    private Boolean atsssLL = false;

    public static final String JSON_PROPERTY_MPTCP = "mptcp";
    private Boolean mptcp = false;

    public static final String JSON_PROPERTY_RTT_WITHOUT_PMF = "rttWithoutPmf";
    private Boolean rttWithoutPmf = false;

    public AtsssCapability()
    {
    }

    public AtsssCapability atsssLL(Boolean atsssLL)
    {

        this.atsssLL = atsssLL;
        return this;
    }

    /**
     * Indicates the ATSSS-LL capability to support procedures related to Access
     * Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS
     * 23.501). true: Supported false (default): Not Supported
     * 
     * @return atsssLL
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Indicates the ATSSS-LL capability to support procedures related to Access Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS 23.501). true: Supported false (default): Not Supported ")
    @JsonProperty(JSON_PROPERTY_ATSSS_L_L)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getAtsssLL()
    {
        return atsssLL;
    }

    @JsonProperty(JSON_PROPERTY_ATSSS_L_L)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAtsssLL(Boolean atsssLL)
    {
        this.atsssLL = atsssLL;
    }

    public AtsssCapability mptcp(Boolean mptcp)
    {

        this.mptcp = mptcp;
        return this;
    }

    /**
     * Indicates the MPTCP capability to support procedures related to Access
     * Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS
     * 23.501 true: Supported false (default): Not Supported
     * 
     * @return mptcp
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Indicates the MPTCP capability to support procedures related to Access Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS 23.501 true: Supported false (default): Not Supported ")
    @JsonProperty(JSON_PROPERTY_MPTCP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getMptcp()
    {
        return mptcp;
    }

    @JsonProperty(JSON_PROPERTY_MPTCP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMptcp(Boolean mptcp)
    {
        this.mptcp = mptcp;
    }

    public AtsssCapability rttWithoutPmf(Boolean rttWithoutPmf)
    {

        this.rttWithoutPmf = rttWithoutPmf;
        return this;
    }

    /**
     * This IE is only used by the UPF to indicate whether the UPF supports RTT
     * measurement without PMF (see clauses 5.32.2, 6.3.3.3 of 3GPP TS 23.501 true:
     * Supported false (default): Not Supported
     * 
     * @return rttWithoutPmf
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "This IE is only used by the UPF to indicate whether the UPF supports RTT measurement without PMF (see clauses 5.32.2, 6.3.3.3 of 3GPP TS 23.501 true: Supported false (default): Not Supported ")
    @JsonProperty(JSON_PROPERTY_RTT_WITHOUT_PMF)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getRttWithoutPmf()
    {
        return rttWithoutPmf;
    }

    @JsonProperty(JSON_PROPERTY_RTT_WITHOUT_PMF)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRttWithoutPmf(Boolean rttWithoutPmf)
    {
        this.rttWithoutPmf = rttWithoutPmf;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        AtsssCapability atsssCapability = (AtsssCapability) o;
        return Objects.equals(this.atsssLL, atsssCapability.atsssLL) && Objects.equals(this.mptcp, atsssCapability.mptcp)
               && Objects.equals(this.rttWithoutPmf, atsssCapability.rttWithoutPmf);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(atsssLL, mptcp, rttWithoutPmf);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class AtsssCapability {\n");
        sb.append("    atsssLL: ").append(toIndentedString(atsssLL)).append("\n");
        sb.append("    mptcp: ").append(toIndentedString(mptcp)).append("\n");
        sb.append("    rttWithoutPmf: ").append(toIndentedString(rttWithoutPmf)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
