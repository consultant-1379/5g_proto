/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The sdRanges and wildcardSd attributes shall be exclusive from each other. If
 * one of these attributes is present, the sd attribute shall also be present
 * and it shall contain one Slice Differentiator value within the range of SD
 * (if the sdRanges attribute is present) or with any value (if the wildcardSd
 * attribute is present).
 */
@ApiModel(description = "The sdRanges and wildcardSd attributes shall be exclusive from each other. If one of these attributes is present,  the sd attribute shall also be present and it shall contain one Slice Differentiator value within the range of SD  (if the sdRanges attribute is present) or with any value (if the wildcardSd attribute is present). ")
@JsonPropertyOrder({ ExtSnssai.JSON_PROPERTY_SST, ExtSnssai.JSON_PROPERTY_SD, ExtSnssai.JSON_PROPERTY_SD_RANGES, ExtSnssai.JSON_PROPERTY_WILDCARD_SD })
public class ExtSnssai
{
    public static final String JSON_PROPERTY_SST = "sst";
    private Integer sst;

    public static final String JSON_PROPERTY_SD = "sd";
    private String sd;

    public static final String JSON_PROPERTY_SD_RANGES = "sdRanges";
    private List<SdRange> sdRanges = null;

    /**
     * When present, it shall be set to true, to indicate that all SD values are
     * supported for the Slice/Service Type value indicated in the sst attribute of
     * the Snssai data type.
     */
    public enum WildcardSdEnum
    {
        TRUE(true);

        private Boolean value;

        WildcardSdEnum(Boolean value)
        {
            this.value = value;
        }

        @JsonValue
        public Boolean getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static WildcardSdEnum fromValue(Boolean value)
        {
            for (WildcardSdEnum b : WildcardSdEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_WILDCARD_SD = "wildcardSd";
    private WildcardSdEnum wildcardSd;

    public ExtSnssai()
    {
    }

    public ExtSnssai sst(Integer sst)
    {

        this.sst = sst;
        return this;
    }

    /**
     * Unsigned integer, within the range 0 to 255, representing the Slice/Service
     * Type. It indicates the expected Network Slice behaviour in terms of features
     * and services. Values 0 to 127 correspond to the standardized SST range.
     * Values 128 to 255 correspond to the Operator-specific range. See clause
     * 28.4.2 of 3GPP TS 23.003. Standardized values are defined in clause 5.15.2.2
     * of 3GPP TS 23.501. minimum: 0 maximum: 255
     * 
     * @return sst
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Unsigned integer, within the range 0 to 255, representing the Slice/Service Type.  It indicates the expected Network Slice behaviour in terms of features and services. Values 0 to 127 correspond to the standardized SST range. Values 128 to 255 correspond  to the Operator-specific range. See clause 28.4.2 of 3GPP TS 23.003. Standardized values are defined in clause 5.15.2.2 of 3GPP TS 23.501.  ")
    @JsonProperty(JSON_PROPERTY_SST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getSst()
    {
        return sst;
    }

    @JsonProperty(JSON_PROPERTY_SST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSst(Integer sst)
    {
        this.sst = sst;
    }

    public ExtSnssai sd(String sd)
    {

        this.sd = sd;
        return this;
    }

    /**
     * 3-octet string, representing the Slice Differentiator, in hexadecimal
     * representation. Each character in the string shall take a value of
     * \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or
     * \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most
     * significant character representing the 4 most significant bits of the SD
     * shall appear first in the string, and the character representing the 4 least
     * significant bit of the SD shall appear last in the string. This is an
     * optional parameter that complements the Slice/Service type(s) to allow to
     * differentiate amongst multiple Network Slices of the same Slice/Service type.
     * This IE shall be absent if no SD value is associated with the SST.
     * 
     * @return sd
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "3-octet string, representing the Slice Differentiator, in hexadecimal representation. Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the SD shall appear first in the string, and the character representing the 4 least significant bit of the SD shall appear last in the string. This is an optional parameter that complements the Slice/Service type(s) to allow to  differentiate amongst multiple Network Slices of the same Slice/Service type. This IE shall be absent if no SD value is associated with the SST. ")
    @JsonProperty(JSON_PROPERTY_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSd()
    {
        return sd;
    }

    @JsonProperty(JSON_PROPERTY_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSd(String sd)
    {
        this.sd = sd;
    }

    public ExtSnssai sdRanges(List<SdRange> sdRanges)
    {

        this.sdRanges = sdRanges;
        return this;
    }

    public ExtSnssai addSdRangesItem(SdRange sdRangesItem)
    {
        if (this.sdRanges == null)
        {
            this.sdRanges = new ArrayList<>();
        }
        this.sdRanges.add(sdRangesItem);
        return this;
    }

    /**
     * When present, it shall contain the range(s) of Slice Differentiator values
     * supported for the Slice/Service Type value indicated in the sst attribute of
     * the Snssai data type
     * 
     * @return sdRanges
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type ")
    @JsonProperty(JSON_PROPERTY_SD_RANGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<SdRange> getSdRanges()
    {
        return sdRanges;
    }

    @JsonProperty(JSON_PROPERTY_SD_RANGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSdRanges(List<SdRange> sdRanges)
    {
        this.sdRanges = sdRanges;
    }

    public ExtSnssai wildcardSd(WildcardSdEnum wildcardSd)
    {

        this.wildcardSd = wildcardSd;
        return this;
    }

    /**
     * When present, it shall be set to true, to indicate that all SD values are
     * supported for the Slice/Service Type value indicated in the sst attribute of
     * the Snssai data type.
     * 
     * @return wildcardSd
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type. ")
    @JsonProperty(JSON_PROPERTY_WILDCARD_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public WildcardSdEnum getWildcardSd()
    {
        return wildcardSd;
    }

    @JsonProperty(JSON_PROPERTY_WILDCARD_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWildcardSd(WildcardSdEnum wildcardSd)
    {
        this.wildcardSd = wildcardSd;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ExtSnssai extSnssai = (ExtSnssai) o;
        return Objects.equals(this.sst, extSnssai.sst) && Objects.equals(this.sd, extSnssai.sd) && Objects.equals(this.sdRanges, extSnssai.sdRanges)
               && Objects.equals(this.wildcardSd, extSnssai.wildcardSd);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(sst, sd, sdRanges, wildcardSd);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExtSnssai {\n");
        sb.append("    sst: ").append(toIndentedString(sst)).append("\n");
        sb.append("    sd: ").append(toIndentedString(sd)).append("\n");
        sb.append("    sdRanges: ").append(toIndentedString(sdRanges)).append("\n");
        sb.append("    wildcardSd: ").append(toIndentedString(wildcardSd)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
