/*
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: -
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29505.subscription.data;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * When Snssai needs to be converted to string (e.g. when used in maps as key),
 * the string shall be composed of one to three digits \&quot;sst\&quot;
 * optionally followed by \&quot;-\&quot; and 6 hexadecimal digits
 * \&quot;sd\&quot;.
 */
@ApiModel(description = "When Snssai needs to be converted to string (e.g. when used in maps as key), the string shall be composed of one to three digits \"sst\" optionally followed by \"-\" and 6 hexadecimal digits \"sd\". ")
@JsonPropertyOrder({ VarSnssai.JSON_PROPERTY_SST, VarSnssai.JSON_PROPERTY_SD })
public class VarSnssai
{
    public static final String JSON_PROPERTY_SST = "sst";
    private Integer sst;

    public static final String JSON_PROPERTY_SD = "sd";
    private String sd;

    public VarSnssai()
    {
    }

    public VarSnssai sst(Integer sst)
    {

        this.sst = sst;
        return this;
    }

    /**
     * Unsigned integer, within the range 0 to 255, representing the Slice/Service
     * Type. It indicates the expected Network Slice behaviour in terms of features
     * and services. Values 0 to 127 correspond to the standardized SST range.
     * Values 128 to 255 correspond to the Operator-specific range. See clause
     * 28.4.2 of 3GPP TS 23.003. Standardized values are defined in clause 5.15.2.2
     * of 3GPP TS 23.501. minimum: 0 maximum: 255
     * 
     * @return sst
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Unsigned integer, within the range 0 to 255, representing the Slice/Service Type.  It indicates the expected Network Slice behaviour in terms of features and services. Values 0 to 127 correspond to the standardized SST range. Values 128 to 255 correspond  to the Operator-specific range. See clause 28.4.2 of 3GPP TS 23.003. Standardized values are defined in clause 5.15.2.2 of 3GPP TS 23.501.  ")
    @JsonProperty(JSON_PROPERTY_SST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getSst()
    {
        return sst;
    }

    @JsonProperty(JSON_PROPERTY_SST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSst(Integer sst)
    {
        this.sst = sst;
    }

    public VarSnssai sd(String sd)
    {

        this.sd = sd;
        return this;
    }

    /**
     * 3-octet string, representing the Slice Differentiator, in hexadecimal
     * representation. Each character in the string shall take a value of
     * \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or
     * \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most
     * significant character representing the 4 most significant bits of the SD
     * shall appear first in the string, and the character representing the 4 least
     * significant bit of the SD shall appear last in the string. This is an
     * optional parameter that complements the Slice/Service type(s) to allow to
     * differentiate amongst multiple Network Slices of the same Slice/Service type.
     * This IE shall be absent if no SD value is associated with the SST.
     * 
     * @return sd
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "3-octet string, representing the Slice Differentiator, in hexadecimal representation. Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the SD shall appear first in the string, and the character representing the 4 least significant bit of the SD shall appear last in the string. This is an optional parameter that complements the Slice/Service type(s) to allow to  differentiate amongst multiple Network Slices of the same Slice/Service type. This IE shall be absent if no SD value is associated with the SST. ")
    @JsonProperty(JSON_PROPERTY_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSd()
    {
        return sd;
    }

    @JsonProperty(JSON_PROPERTY_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSd(String sd)
    {
        this.sd = sd;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        VarSnssai varSnssai = (VarSnssai) o;
        return Objects.equals(this.sst, varSnssai.sst) && Objects.equals(this.sd, varSnssai.sd);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(sst, sd);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class VarSnssai {\n");
        sb.append("    sst: ").append(toIndentedString(sst)).append("\n");
        sb.append("    sd: ").append(toIndentedString(sd)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
