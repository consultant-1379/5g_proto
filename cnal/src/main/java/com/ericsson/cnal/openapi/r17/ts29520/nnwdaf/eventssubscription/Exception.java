/*
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents the Exception information.
 */
@ApiModel(description = "Represents the Exception information.")
@JsonPropertyOrder({ Exception.JSON_PROPERTY_EXCEP_ID, Exception.JSON_PROPERTY_EXCEP_LEVEL, Exception.JSON_PROPERTY_EXCEP_TREND })
public class Exception
{
    public static final String JSON_PROPERTY_EXCEP_ID = "excepId";
    private String excepId;

    public static final String JSON_PROPERTY_EXCEP_LEVEL = "excepLevel";
    private Integer excepLevel;

    public static final String JSON_PROPERTY_EXCEP_TREND = "excepTrend";
    private String excepTrend;

    public Exception()
    {
    }

    public Exception excepId(String excepId)
    {

        this.excepId = excepId;
        return this;
    }

    /**
     * Possible values are: - UNEXPECTED_UE_LOCATION: Unexpected UE location -
     * UNEXPECTED_LONG_LIVE_FLOW: Unexpected long-live rate flows -
     * UNEXPECTED_LARGE_RATE_FLOW: Unexpected large rate flows - UNEXPECTED_WAKEUP:
     * Unexpected wakeup - SUSPICION_OF_DDOS_ATTACK: Suspicion of DDoS attack -
     * WRONG_DESTINATION_ADDRESS: Wrong destination address -
     * TOO_FREQUENT_SERVICE_ACCESS: Too frequent Service Access -
     * UNEXPECTED_RADIO_LINK_FAILURES: Unexpected radio link failures -
     * PING_PONG_ACROSS_CELLS: Ping-ponging across neighbouring cells
     * 
     * @return excepId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Possible values are: - UNEXPECTED_UE_LOCATION: Unexpected UE location - UNEXPECTED_LONG_LIVE_FLOW: Unexpected long-live rate flows - UNEXPECTED_LARGE_RATE_FLOW: Unexpected large rate flows - UNEXPECTED_WAKEUP: Unexpected wakeup - SUSPICION_OF_DDOS_ATTACK: Suspicion of DDoS attack - WRONG_DESTINATION_ADDRESS: Wrong destination address - TOO_FREQUENT_SERVICE_ACCESS: Too frequent Service Access - UNEXPECTED_RADIO_LINK_FAILURES: Unexpected radio link failures - PING_PONG_ACROSS_CELLS: Ping-ponging across neighbouring cells ")
    @JsonProperty(JSON_PROPERTY_EXCEP_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getExcepId()
    {
        return excepId;
    }

    @JsonProperty(JSON_PROPERTY_EXCEP_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setExcepId(String excepId)
    {
        this.excepId = excepId;
    }

    public Exception excepLevel(Integer excepLevel)
    {

        this.excepLevel = excepLevel;
        return this;
    }

    /**
     * Get excepLevel
     * 
     * @return excepLevel
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_EXCEP_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getExcepLevel()
    {
        return excepLevel;
    }

    @JsonProperty(JSON_PROPERTY_EXCEP_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExcepLevel(Integer excepLevel)
    {
        this.excepLevel = excepLevel;
    }

    public Exception excepTrend(String excepTrend)
    {

        this.excepTrend = excepTrend;
        return this;
    }

    /**
     * Possible values are: - UP: Up trend of the exception level. - DOWN: Down
     * trend of the exception level. - UNKNOW: Unknown trend of the exception level.
     * - STABLE: Stable trend of the exception level.
     * 
     * @return excepTrend
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Possible values are: - UP: Up trend of the exception level. - DOWN: Down trend of the exception level. - UNKNOW: Unknown trend of the exception level. - STABLE: Stable trend of the exception level. ")
    @JsonProperty(JSON_PROPERTY_EXCEP_TREND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getExcepTrend()
    {
        return excepTrend;
    }

    @JsonProperty(JSON_PROPERTY_EXCEP_TREND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExcepTrend(String excepTrend)
    {
        this.excepTrend = excepTrend;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Exception exception = (Exception) o;
        return Objects.equals(this.excepId, exception.excepId) && Objects.equals(this.excepLevel, exception.excepLevel)
               && Objects.equals(this.excepTrend, exception.excepTrend);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(excepId, excepLevel, excepTrend);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Exception {\n");
        sb.append("    excepId: ").append(toIndentedString(excepId)).append("\n");
        sb.append("    excepLevel: ").append(toIndentedString(excepLevel)).append("\n");
        sb.append("    excepTrend: ").append(toIndentedString(excepTrend)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
