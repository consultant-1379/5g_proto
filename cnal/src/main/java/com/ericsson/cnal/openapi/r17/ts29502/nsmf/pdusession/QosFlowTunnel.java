/*
 * Nsmf_PDUSession
 * SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29502.nsmf.pdusession;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Tunnel Information per QoS Flow
 */
@ApiModel(description = "Tunnel Information per QoS Flow")
@JsonPropertyOrder({ QosFlowTunnel.JSON_PROPERTY_QFI_LIST, QosFlowTunnel.JSON_PROPERTY_TUNNEL_INFO })
public class QosFlowTunnel
{
    public static final String JSON_PROPERTY_QFI_LIST = "qfiList";
    private List<Integer> qfiList = new ArrayList<>();

    public static final String JSON_PROPERTY_TUNNEL_INFO = "tunnelInfo";
    private TunnelInfo tunnelInfo;

    public QosFlowTunnel()
    {
    }

    public QosFlowTunnel qfiList(List<Integer> qfiList)
    {

        this.qfiList = qfiList;
        return this;
    }

    public QosFlowTunnel addQfiListItem(Integer qfiListItem)
    {
        this.qfiList.add(qfiListItem);
        return this;
    }

    /**
     * Get qfiList
     * 
     * @return qfiList
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_QFI_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<Integer> getQfiList()
    {
        return qfiList;
    }

    @JsonProperty(JSON_PROPERTY_QFI_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setQfiList(List<Integer> qfiList)
    {
        this.qfiList = qfiList;
    }

    public QosFlowTunnel tunnelInfo(TunnelInfo tunnelInfo)
    {

        this.tunnelInfo = tunnelInfo;
        return this;
    }

    /**
     * Get tunnelInfo
     * 
     * @return tunnelInfo
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_TUNNEL_INFO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public TunnelInfo getTunnelInfo()
    {
        return tunnelInfo;
    }

    @JsonProperty(JSON_PROPERTY_TUNNEL_INFO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTunnelInfo(TunnelInfo tunnelInfo)
    {
        this.tunnelInfo = tunnelInfo;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        QosFlowTunnel qosFlowTunnel = (QosFlowTunnel) o;
        return Objects.equals(this.qfiList, qosFlowTunnel.qfiList) && Objects.equals(this.tunnelInfo, qosFlowTunnel.tunnelInfo);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(qfiList, tunnelInfo);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class QosFlowTunnel {\n");
        sb.append("    qfiList: ").append(toIndentedString(qfiList)).append("\n");
        sb.append("    tunnelInfo: ").append(toIndentedString(tunnelInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
