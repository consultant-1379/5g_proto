/*
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29510.nnrf.nfmanagement;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Subscription to a set of NF or SCP or SEPP instances belonging to certain SCP
 * domains
 */
@ApiModel(description = "Subscription to a set of NF or SCP or SEPP instances belonging to certain SCP domains ")
@JsonPropertyOrder({ ScpDomainCond.JSON_PROPERTY_SCP_DOMAINS, ScpDomainCond.JSON_PROPERTY_NF_TYPE_LIST })
public class ScpDomainCond
{
    public static final String JSON_PROPERTY_SCP_DOMAINS = "scpDomains";
    private List<String> scpDomains = new ArrayList<>();

    public static final String JSON_PROPERTY_NF_TYPE_LIST = "nfTypeList";
    private List<String> nfTypeList = null;

    public ScpDomainCond()
    {
    }

    public ScpDomainCond scpDomains(List<String> scpDomains)
    {

        this.scpDomains = scpDomains;
        return this;
    }

    public ScpDomainCond addScpDomainsItem(String scpDomainsItem)
    {
        this.scpDomains.add(scpDomainsItem);
        return this;
    }

    /**
     * Get scpDomains
     * 
     * @return scpDomains
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_SCP_DOMAINS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<String> getScpDomains()
    {
        return scpDomains;
    }

    @JsonProperty(JSON_PROPERTY_SCP_DOMAINS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setScpDomains(List<String> scpDomains)
    {
        this.scpDomains = scpDomains;
    }

    public ScpDomainCond nfTypeList(List<String> nfTypeList)
    {

        this.nfTypeList = nfTypeList;
        return this;
    }

    public ScpDomainCond addNfTypeListItem(String nfTypeListItem)
    {
        if (this.nfTypeList == null)
        {
            this.nfTypeList = new ArrayList<>();
        }
        this.nfTypeList.add(nfTypeListItem);
        return this;
    }

    /**
     * Get nfTypeList
     * 
     * @return nfTypeList
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_NF_TYPE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getNfTypeList()
    {
        return nfTypeList;
    }

    @JsonProperty(JSON_PROPERTY_NF_TYPE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNfTypeList(List<String> nfTypeList)
    {
        this.nfTypeList = nfTypeList;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ScpDomainCond scpDomainCond = (ScpDomainCond) o;
        return Objects.equals(this.scpDomains, scpDomainCond.scpDomains) && Objects.equals(this.nfTypeList, scpDomainCond.nfTypeList);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(scpDomains, nfTypeList);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ScpDomainCond {\n");
        sb.append("    scpDomains: ").append(toIndentedString(scpDomains)).append("\n");
        sb.append("    nfTypeList: ").append(toIndentedString(nfTypeList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
