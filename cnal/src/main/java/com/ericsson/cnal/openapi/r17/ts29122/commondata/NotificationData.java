/*
 * TS 29.122 Common Data Types
 * Data types applicable to several APIs.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29122.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents the information to be conveyed in a bearer level event(s)
 * notification.
 */
@ApiModel(description = "Represents the information to be conveyed in a bearer level event(s) notification.")
@JsonPropertyOrder({ NotificationData.JSON_PROPERTY_TRANSACTION, NotificationData.JSON_PROPERTY_EVENT_REPORTS })
public class NotificationData
{
    public static final String JSON_PROPERTY_TRANSACTION = "transaction";
    private String transaction;

    public static final String JSON_PROPERTY_EVENT_REPORTS = "eventReports";
    private List<EventReport> eventReports = new ArrayList<>();

    public NotificationData()
    {
    }

    public NotificationData transaction(String transaction)
    {

        this.transaction = transaction;
        return this;
    }

    /**
     * string formatted according to IETF RFC 3986 identifying a referenced
     * resource.
     * 
     * @return transaction
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "string formatted according to IETF RFC 3986 identifying a referenced resource.")
    @JsonProperty(JSON_PROPERTY_TRANSACTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getTransaction()
    {
        return transaction;
    }

    @JsonProperty(JSON_PROPERTY_TRANSACTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTransaction(String transaction)
    {
        this.transaction = transaction;
    }

    public NotificationData eventReports(List<EventReport> eventReports)
    {

        this.eventReports = eventReports;
        return this;
    }

    public NotificationData addEventReportsItem(EventReport eventReportsItem)
    {
        this.eventReports.add(eventReportsItem);
        return this;
    }

    /**
     * Contains the reported event and applicable information
     * 
     * @return eventReports
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Contains the reported event and applicable information")
    @JsonProperty(JSON_PROPERTY_EVENT_REPORTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<EventReport> getEventReports()
    {
        return eventReports;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_REPORTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventReports(List<EventReport> eventReports)
    {
        this.eventReports = eventReports;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        NotificationData notificationData = (NotificationData) o;
        return Objects.equals(this.transaction, notificationData.transaction) && Objects.equals(this.eventReports, notificationData.eventReports);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(transaction, eventReports);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotificationData {\n");
        sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
        sb.append("    eventReports: ").append(toIndentedString(eventReports)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
