/*
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: -
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29519.policy.data;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29122.commondata.UsageThreshold;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains remain allowed usage data for a subscriber.
 */
@ApiModel(description = "Contains remain allowed usage data for a subscriber.")
@JsonPropertyOrder({ UsageMonData.JSON_PROPERTY_LIMIT_ID,
                     UsageMonData.JSON_PROPERTY_SCOPES,
                     UsageMonData.JSON_PROPERTY_UM_LEVEL,
                     UsageMonData.JSON_PROPERTY_ALLOWED_USAGE,
                     UsageMonData.JSON_PROPERTY_RESET_TIME,
                     UsageMonData.JSON_PROPERTY_SUPP_FEAT,
                     UsageMonData.JSON_PROPERTY_RESET_IDS })
public class UsageMonData
{
    public static final String JSON_PROPERTY_LIMIT_ID = "limitId";
    private String limitId;

    public static final String JSON_PROPERTY_SCOPES = "scopes";
    private Map<String, UsageMonDataScope> scopes = null;

    public static final String JSON_PROPERTY_UM_LEVEL = "umLevel";
    private String umLevel;

    public static final String JSON_PROPERTY_ALLOWED_USAGE = "allowedUsage";
    private UsageThreshold allowedUsage;

    public static final String JSON_PROPERTY_RESET_TIME = "resetTime";
    private OffsetDateTime resetTime;

    public static final String JSON_PROPERTY_SUPP_FEAT = "suppFeat";
    private String suppFeat;

    public static final String JSON_PROPERTY_RESET_IDS = "resetIds";
    private List<String> resetIds = null;

    public UsageMonData()
    {
    }

    public UsageMonData limitId(String limitId)
    {

        this.limitId = limitId;
        return this;
    }

    /**
     * Get limitId
     * 
     * @return limitId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_LIMIT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getLimitId()
    {
        return limitId;
    }

    @JsonProperty(JSON_PROPERTY_LIMIT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLimitId(String limitId)
    {
        this.limitId = limitId;
    }

    public UsageMonData scopes(Map<String, UsageMonDataScope> scopes)
    {

        this.scopes = scopes;
        return this;
    }

    public UsageMonData putScopesItem(String key,
                                      UsageMonDataScope scopesItem)
    {
        if (this.scopes == null)
        {
            this.scopes = new HashMap<>();
        }
        this.scopes.put(key, scopesItem);
        return this;
    }

    /**
     * Identifies the SNSSAI and DNN combinations for remain allowed usage data for
     * a subscriber. The S-NSSAI is the key of the map.
     * 
     * @return scopes
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Identifies the SNSSAI and DNN combinations for remain allowed usage data for a subscriber. The S-NSSAI is the key of the map. ")
    @JsonProperty(JSON_PROPERTY_SCOPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Map<String, UsageMonDataScope> getScopes()
    {
        return scopes;
    }

    @JsonProperty(JSON_PROPERTY_SCOPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScopes(Map<String, UsageMonDataScope> scopes)
    {
        this.scopes = scopes;
    }

    public UsageMonData umLevel(String umLevel)
    {

        this.umLevel = umLevel;
        return this;
    }

    /**
     * Represents the usage monitoring level.
     * 
     * @return umLevel
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Represents the usage monitoring level.")
    @JsonProperty(JSON_PROPERTY_UM_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getUmLevel()
    {
        return umLevel;
    }

    @JsonProperty(JSON_PROPERTY_UM_LEVEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUmLevel(String umLevel)
    {
        this.umLevel = umLevel;
    }

    public UsageMonData allowedUsage(UsageThreshold allowedUsage)
    {

        this.allowedUsage = allowedUsage;
        return this;
    }

    /**
     * Get allowedUsage
     * 
     * @return allowedUsage
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_ALLOWED_USAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public UsageThreshold getAllowedUsage()
    {
        return allowedUsage;
    }

    @JsonProperty(JSON_PROPERTY_ALLOWED_USAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAllowedUsage(UsageThreshold allowedUsage)
    {
        this.allowedUsage = allowedUsage;
    }

    public UsageMonData resetTime(OffsetDateTime resetTime)
    {

        this.resetTime = resetTime;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return resetTime
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_RESET_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getResetTime()
    {
        return resetTime;
    }

    @JsonProperty(JSON_PROPERTY_RESET_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResetTime(OffsetDateTime resetTime)
    {
        this.resetTime = resetTime;
    }

    public UsageMonData suppFeat(String suppFeat)
    {

        this.suppFeat = suppFeat;
        return this;
    }

    /**
     * A string used to indicate the features supported by an API that is used as
     * defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a bitmask
     * indicating supported features in hexadecimal representation Each character in
     * the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,
     * \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and
     * shall represent the support of 4 features as described in table 5.2.2-3. The
     * most significant character representing the highest-numbered features shall
     * appear first in the string, and the character representing features 1 to 4
     * shall appear last in the string. The list of features and their numbering
     * (starting with 1) are defined separately for each API. If the string contains
     * a lower number of characters than there are defined features for an API, all
     * features that would be represented by characters that are not present in the
     * string are not supported.
     * 
     * @return suppFeat
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. ")
    @JsonProperty(JSON_PROPERTY_SUPP_FEAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSuppFeat()
    {
        return suppFeat;
    }

    @JsonProperty(JSON_PROPERTY_SUPP_FEAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSuppFeat(String suppFeat)
    {
        this.suppFeat = suppFeat;
    }

    public UsageMonData resetIds(List<String> resetIds)
    {

        this.resetIds = resetIds;
        return this;
    }

    public UsageMonData addResetIdsItem(String resetIdsItem)
    {
        if (this.resetIds == null)
        {
            this.resetIds = new ArrayList<>();
        }
        this.resetIds.add(resetIdsItem);
        return this;
    }

    /**
     * Get resetIds
     * 
     * @return resetIds
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_RESET_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getResetIds()
    {
        return resetIds;
    }

    @JsonProperty(JSON_PROPERTY_RESET_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResetIds(List<String> resetIds)
    {
        this.resetIds = resetIds;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        UsageMonData usageMonData = (UsageMonData) o;
        return Objects.equals(this.limitId, usageMonData.limitId) && Objects.equals(this.scopes, usageMonData.scopes)
               && Objects.equals(this.umLevel, usageMonData.umLevel) && Objects.equals(this.allowedUsage, usageMonData.allowedUsage)
               && Objects.equals(this.resetTime, usageMonData.resetTime) && Objects.equals(this.suppFeat, usageMonData.suppFeat)
               && Objects.equals(this.resetIds, usageMonData.resetIds);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(limitId, scopes, umLevel, allowedUsage, resetTime, suppFeat, resetIds);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class UsageMonData {\n");
        sb.append("    limitId: ").append(toIndentedString(limitId)).append("\n");
        sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
        sb.append("    umLevel: ").append(toIndentedString(umLevel)).append("\n");
        sb.append("    allowedUsage: ").append(toIndentedString(allowedUsage)).append("\n");
        sb.append("    resetTime: ").append(toIndentedString(resetTime)).append("\n");
        sb.append("    suppFeat: ").append(toIndentedString(suppFeat)).append("\n");
        sb.append("    resetIds: ").append(toIndentedString(resetIds)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
