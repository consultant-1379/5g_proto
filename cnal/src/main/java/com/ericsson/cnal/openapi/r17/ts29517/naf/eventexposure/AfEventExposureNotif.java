/*
 * Naf_EventExposure
 * AF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29517.naf.eventexposure;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents notifications on application event(s) that occurred for an
 * Individual Application Event Subscription resource.
 */
@ApiModel(description = "Represents notifications on application event(s) that occurred for an Individual Application Event Subscription resource. ")
@JsonPropertyOrder({ AfEventExposureNotif.JSON_PROPERTY_NOTIF_ID, AfEventExposureNotif.JSON_PROPERTY_EVENT_NOTIFS })
public class AfEventExposureNotif
{
    public static final String JSON_PROPERTY_NOTIF_ID = "notifId";
    private String notifId;

    public static final String JSON_PROPERTY_EVENT_NOTIFS = "eventNotifs";
    private List<AfEventNotification> eventNotifs = new ArrayList<>();

    public AfEventExposureNotif()
    {
    }

    public AfEventExposureNotif notifId(String notifId)
    {

        this.notifId = notifId;
        return this;
    }

    /**
     * Get notifId
     * 
     * @return notifId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_NOTIF_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getNotifId()
    {
        return notifId;
    }

    @JsonProperty(JSON_PROPERTY_NOTIF_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNotifId(String notifId)
    {
        this.notifId = notifId;
    }

    public AfEventExposureNotif eventNotifs(List<AfEventNotification> eventNotifs)
    {

        this.eventNotifs = eventNotifs;
        return this;
    }

    public AfEventExposureNotif addEventNotifsItem(AfEventNotification eventNotifsItem)
    {
        this.eventNotifs.add(eventNotifsItem);
        return this;
    }

    /**
     * Get eventNotifs
     * 
     * @return eventNotifs
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_EVENT_NOTIFS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<AfEventNotification> getEventNotifs()
    {
        return eventNotifs;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_NOTIFS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventNotifs(List<AfEventNotification> eventNotifs)
    {
        this.eventNotifs = eventNotifs;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        AfEventExposureNotif afEventExposureNotif = (AfEventExposureNotif) o;
        return Objects.equals(this.notifId, afEventExposureNotif.notifId) && Objects.equals(this.eventNotifs, afEventExposureNotif.eventNotifs);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(notifId, eventNotifs);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class AfEventExposureNotif {\n");
        sb.append("    notifId: ").append(toIndentedString(notifId)).append("\n");
        sb.append("    eventNotifs: ").append(toIndentedString(eventNotifs)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
