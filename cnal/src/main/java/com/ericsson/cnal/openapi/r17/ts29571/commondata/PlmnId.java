/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * When PlmnId needs to be converted to string (e.g. when used in maps as key),
 * the string shall be composed of three digits \&quot;mcc\&quot; followed by
 * \&quot;-\&quot; and two or three digits \&quot;mnc\&quot;.
 */
@ApiModel(description = "When PlmnId needs to be converted to string (e.g. when used in maps as key), the string  shall be composed of three digits \"mcc\" followed by \"-\" and two or three digits \"mnc\". ")
@JsonPropertyOrder({ PlmnId.JSON_PROPERTY_MCC, PlmnId.JSON_PROPERTY_MNC })
public class PlmnId
{
    public static final String JSON_PROPERTY_MCC = "mcc";
    private String mcc;

    public static final String JSON_PROPERTY_MNC = "mnc";
    private String mnc;

    public PlmnId()
    {
    }

    public PlmnId mcc(String mcc)
    {

        this.mcc = mcc;
        return this;
    }

    /**
     * Mobile Country Code part of the PLMN, comprising 3 digits, as defined in
     * clause 9.3.3.5 of 3GPP TS 38.413.
     * 
     * @return mcc
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Mobile Country Code part of the PLMN, comprising 3 digits, as defined in clause 9.3.3.5 of 3GPP TS 38.413.  ")
    @JsonProperty(JSON_PROPERTY_MCC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getMcc()
    {
        return mcc;
    }

    @JsonProperty(JSON_PROPERTY_MCC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMcc(String mcc)
    {
        this.mcc = mcc;
    }

    public PlmnId mnc(String mnc)
    {

        this.mnc = mnc;
        return this;
    }

    /**
     * Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in
     * clause 9.3.3.5 of 3GPP TS 38.413.
     * 
     * @return mnc
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in clause 9.3.3.5 of 3GPP TS 38.413.")
    @JsonProperty(JSON_PROPERTY_MNC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getMnc()
    {
        return mnc;
    }

    @JsonProperty(JSON_PROPERTY_MNC)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMnc(String mnc)
    {
        this.mnc = mnc;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        PlmnId plmnId = (PlmnId) o;
        // MCC and MNC are de-facto integers, compare as those to eliminate optional
        // leading '0's. E.g. mcc="012" is the same as mcc="12".
        return Objects.equals(Integer.parseInt(this.mcc), Integer.parseInt(plmnId.mcc))
               && Objects.equals(Integer.parseInt(this.mnc), Integer.parseInt(plmnId.mnc));
    }

    @Override
    public int hashCode()
    {
        // MCC and MNC are de-facto integers, compare as those to eliminate optional
        // leading '0's. E.g. mcc="012" is the same as mcc="12".
        return Objects.hash(Integer.parseInt(mcc), Integer.parseInt(mnc));
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class PlmnId {\n");
        sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
        sb.append("    mnc: ").append(toIndentedString(mnc)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
