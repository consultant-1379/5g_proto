/*
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: -
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29505.subscription.data;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * NfIdentifier
 */
@JsonPropertyOrder({ NfIdentifier.JSON_PROPERTY_NF_TYPE, NfIdentifier.JSON_PROPERTY_NF_INSTANCE_ID })
public class NfIdentifier
{
    public static final String JSON_PROPERTY_NF_TYPE = "nfType";
    private String nfType;

    public static final String JSON_PROPERTY_NF_INSTANCE_ID = "nfInstanceId";
    private UUID nfInstanceId;

    public NfIdentifier()
    {
    }

    public NfIdentifier nfType(String nfType)
    {

        this.nfType = nfType;
        return this;
    }

    /**
     * NF types known to NRF
     * 
     * @return nfType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "NF types known to NRF")
    @JsonProperty(JSON_PROPERTY_NF_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getNfType()
    {
        return nfType;
    }

    @JsonProperty(JSON_PROPERTY_NF_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNfType(String nfType)
    {
        this.nfType = nfType;
    }

    public NfIdentifier nfInstanceId(UUID nfInstanceId)
    {

        this.nfInstanceId = nfInstanceId;
        return this;
    }

    /**
     * String uniquely identifying a NF instance. The format of the NF Instance ID
     * shall be a Universally Unique Identifier (UUID) version 4, as described in
     * IETF RFC 4122.
     * 
     * @return nfInstanceId
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  ")
    @JsonProperty(JSON_PROPERTY_NF_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public UUID getNfInstanceId()
    {
        return nfInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_NF_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNfInstanceId(UUID nfInstanceId)
    {
        this.nfInstanceId = nfInstanceId;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        NfIdentifier nfIdentifier = (NfIdentifier) o;
        return Objects.equals(this.nfType, nfIdentifier.nfType) && Objects.equals(this.nfInstanceId, nfIdentifier.nfInstanceId);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(nfType, nfInstanceId);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class NfIdentifier {\n");
        sb.append("    nfType: ").append(toIndentedString(nfType)).append("\n");
        sb.append("    nfInstanceId: ").append(toIndentedString(nfInstanceId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
