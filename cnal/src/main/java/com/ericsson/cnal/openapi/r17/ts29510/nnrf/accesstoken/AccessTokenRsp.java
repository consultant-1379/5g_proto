/*
 * NRF OAuth2
 * NRF OAuth2 Authorization.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29510.nnrf.accesstoken;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains information related to the access token response
 */
@ApiModel(description = "Contains information related to the access token response")
@JsonPropertyOrder({ AccessTokenRsp.JSON_PROPERTY_ACCESS_TOKEN,
                     AccessTokenRsp.JSON_PROPERTY_TOKEN_TYPE,
                     AccessTokenRsp.JSON_PROPERTY_EXPIRES_IN,
                     AccessTokenRsp.JSON_PROPERTY_SCOPE })
public class AccessTokenRsp
{
    public static final String JSON_PROPERTY_ACCESS_TOKEN = "access_token";
    private String accessToken;

    /**
     * Gets or Sets tokenType
     */
    public enum TokenTypeEnum
    {
        BEARER("Bearer");

        private String value;

        TokenTypeEnum(String value)
        {
            this.value = value;
        }

        @JsonValue
        public String getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TokenTypeEnum fromValue(String value)
        {
            for (TokenTypeEnum b : TokenTypeEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TOKEN_TYPE = "token_type";
    private TokenTypeEnum tokenType;

    public static final String JSON_PROPERTY_EXPIRES_IN = "expires_in";
    private Integer expiresIn;

    public static final String JSON_PROPERTY_SCOPE = "scope";
    private String scope;

    public AccessTokenRsp()
    {
    }

    public AccessTokenRsp accessToken(String accessToken)
    {

        this.accessToken = accessToken;
        return this;
    }

    /**
     * JWS Compact Serialized representation of JWS signed JSON object
     * (AccessTokenClaims)
     * 
     * @return accessToken
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "JWS Compact Serialized representation of JWS signed JSON object (AccessTokenClaims) ")
    @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getAccessToken()
    {
        return accessToken;
    }

    @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccessToken(String accessToken)
    {
        this.accessToken = accessToken;
    }

    public AccessTokenRsp tokenType(TokenTypeEnum tokenType)
    {

        this.tokenType = tokenType;
        return this;
    }

    /**
     * Get tokenType
     * 
     * @return tokenType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_TOKEN_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public TokenTypeEnum getTokenType()
    {
        return tokenType;
    }

    @JsonProperty(JSON_PROPERTY_TOKEN_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTokenType(TokenTypeEnum tokenType)
    {
        this.tokenType = tokenType;
    }

    public AccessTokenRsp expiresIn(Integer expiresIn)
    {

        this.expiresIn = expiresIn;
        return this;
    }

    /**
     * Get expiresIn
     * 
     * @return expiresIn
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getExpiresIn()
    {
        return expiresIn;
    }

    @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExpiresIn(Integer expiresIn)
    {
        this.expiresIn = expiresIn;
    }

    public AccessTokenRsp scope(String scope)
    {

        this.scope = scope;
        return this;
    }

    /**
     * Get scope
     * 
     * @return scope
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getScope()
    {
        return scope;
    }

    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScope(String scope)
    {
        this.scope = scope;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        AccessTokenRsp accessTokenRsp = (AccessTokenRsp) o;
        return Objects.equals(this.accessToken, accessTokenRsp.accessToken) && Objects.equals(this.tokenType, accessTokenRsp.tokenType)
               && Objects.equals(this.expiresIn, accessTokenRsp.expiresIn) && Objects.equals(this.scope, accessTokenRsp.scope);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(accessToken, tokenType, expiresIn, scope);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccessTokenRsp {\n");
        sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
        sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
        sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
