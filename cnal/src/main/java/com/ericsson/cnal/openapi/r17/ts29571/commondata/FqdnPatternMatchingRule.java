/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * a matching rule for a FQDN pattern
 */
@ApiModel(description = "a matching rule for a FQDN pattern")
@JsonPropertyOrder({ FqdnPatternMatchingRule.JSON_PROPERTY_REGEX, FqdnPatternMatchingRule.JSON_PROPERTY_STRING_MATCHING_RULE })
public class FqdnPatternMatchingRule
{
    public static final String JSON_PROPERTY_REGEX = "regex";
    private String regex;

    public static final String JSON_PROPERTY_STRING_MATCHING_RULE = "stringMatchingRule";
    private StringMatchingRule stringMatchingRule;

    public FqdnPatternMatchingRule()
    {
    }

    public FqdnPatternMatchingRule regex(String regex)
    {

        this.regex = regex;
        return this;
    }

    /**
     * Get regex
     * 
     * @return regex
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_REGEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getRegex()
    {
        return regex;
    }

    @JsonProperty(JSON_PROPERTY_REGEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRegex(String regex)
    {
        this.regex = regex;
    }

    public FqdnPatternMatchingRule stringMatchingRule(StringMatchingRule stringMatchingRule)
    {

        this.stringMatchingRule = stringMatchingRule;
        return this;
    }

    /**
     * Get stringMatchingRule
     * 
     * @return stringMatchingRule
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_STRING_MATCHING_RULE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StringMatchingRule getStringMatchingRule()
    {
        return stringMatchingRule;
    }

    @JsonProperty(JSON_PROPERTY_STRING_MATCHING_RULE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStringMatchingRule(StringMatchingRule stringMatchingRule)
    {
        this.stringMatchingRule = stringMatchingRule;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        FqdnPatternMatchingRule fqdnPatternMatchingRule = (FqdnPatternMatchingRule) o;
        return Objects.equals(this.regex, fqdnPatternMatchingRule.regex) && Objects.equals(this.stringMatchingRule, fqdnPatternMatchingRule.stringMatchingRule);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(regex, stringMatchingRule);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class FqdnPatternMatchingRule {\n");
        sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
        sb.append("    stringMatchingRule: ").append(toIndentedString(stringMatchingRule)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
