/*
 * LMF Location
 * LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29572.nlmf.location;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Ellipsoid with uncertainty
 */
@ApiModel(description = "Ellipsoid with uncertainty")
@JsonPropertyOrder({ UncertaintyEllipsoid.JSON_PROPERTY_SEMI_MAJOR,
                     UncertaintyEllipsoid.JSON_PROPERTY_SEMI_MINOR,
                     UncertaintyEllipsoid.JSON_PROPERTY_VERTICAL,
                     UncertaintyEllipsoid.JSON_PROPERTY_ORIENTATION_MAJOR })
public class UncertaintyEllipsoid
{
    public static final String JSON_PROPERTY_SEMI_MAJOR = "semiMajor";
    private Float semiMajor;

    public static final String JSON_PROPERTY_SEMI_MINOR = "semiMinor";
    private Float semiMinor;

    public static final String JSON_PROPERTY_VERTICAL = "vertical";
    private Float vertical;

    public static final String JSON_PROPERTY_ORIENTATION_MAJOR = "orientationMajor";
    private Integer orientationMajor;

    public UncertaintyEllipsoid()
    {
    }

    public UncertaintyEllipsoid semiMajor(Float semiMajor)
    {

        this.semiMajor = semiMajor;
        return this;
    }

    /**
     * Indicates value of uncertainty. minimum: 0
     * 
     * @return semiMajor
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of uncertainty.")
    @JsonProperty(JSON_PROPERTY_SEMI_MAJOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getSemiMajor()
    {
        return semiMajor;
    }

    @JsonProperty(JSON_PROPERTY_SEMI_MAJOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSemiMajor(Float semiMajor)
    {
        this.semiMajor = semiMajor;
    }

    public UncertaintyEllipsoid semiMinor(Float semiMinor)
    {

        this.semiMinor = semiMinor;
        return this;
    }

    /**
     * Indicates value of uncertainty. minimum: 0
     * 
     * @return semiMinor
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of uncertainty.")
    @JsonProperty(JSON_PROPERTY_SEMI_MINOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getSemiMinor()
    {
        return semiMinor;
    }

    @JsonProperty(JSON_PROPERTY_SEMI_MINOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSemiMinor(Float semiMinor)
    {
        this.semiMinor = semiMinor;
    }

    public UncertaintyEllipsoid vertical(Float vertical)
    {

        this.vertical = vertical;
        return this;
    }

    /**
     * Indicates value of uncertainty. minimum: 0
     * 
     * @return vertical
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of uncertainty.")
    @JsonProperty(JSON_PROPERTY_VERTICAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getVertical()
    {
        return vertical;
    }

    @JsonProperty(JSON_PROPERTY_VERTICAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVertical(Float vertical)
    {
        this.vertical = vertical;
    }

    public UncertaintyEllipsoid orientationMajor(Integer orientationMajor)
    {

        this.orientationMajor = orientationMajor;
        return this;
    }

    /**
     * Indicates value of orientation angle. minimum: 0 maximum: 180
     * 
     * @return orientationMajor
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of orientation angle.")
    @JsonProperty(JSON_PROPERTY_ORIENTATION_MAJOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getOrientationMajor()
    {
        return orientationMajor;
    }

    @JsonProperty(JSON_PROPERTY_ORIENTATION_MAJOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrientationMajor(Integer orientationMajor)
    {
        this.orientationMajor = orientationMajor;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        UncertaintyEllipsoid uncertaintyEllipsoid = (UncertaintyEllipsoid) o;
        return Objects.equals(this.semiMajor, uncertaintyEllipsoid.semiMajor) && Objects.equals(this.semiMinor, uncertaintyEllipsoid.semiMinor)
               && Objects.equals(this.vertical, uncertaintyEllipsoid.vertical) && Objects.equals(this.orientationMajor, uncertaintyEllipsoid.orientationMajor);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(semiMajor, semiMinor, vertical, orientationMajor);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class UncertaintyEllipsoid {\n");
        sb.append("    semiMajor: ").append(toIndentedString(semiMajor)).append("\n");
        sb.append("    semiMinor: ").append(toIndentedString(semiMinor)).append("\n");
        sb.append("    vertical: ").append(toIndentedString(vertical)).append("\n");
        sb.append("    orientationMajor: ").append(toIndentedString(orientationMajor)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
