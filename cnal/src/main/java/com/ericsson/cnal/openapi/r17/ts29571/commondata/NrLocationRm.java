/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * This data type is defined in the same way as the &#39;NrLocation&#39; data
 * type, but with the OpenAPI &#39;nullable: true&#39; property.\&quot;
 */
@ApiModel(description = "This data type is defined in the same way as the 'NrLocation' data type, but with the OpenAPI 'nullable: true' property.\"  ")
@JsonPropertyOrder({ NrLocationRm.JSON_PROPERTY_TAI,
                     NrLocationRm.JSON_PROPERTY_NCGI,
                     NrLocationRm.JSON_PROPERTY_IGNORE_NCGI,
                     NrLocationRm.JSON_PROPERTY_AGE_OF_LOCATION_INFORMATION,
                     NrLocationRm.JSON_PROPERTY_UE_LOCATION_TIMESTAMP,
                     NrLocationRm.JSON_PROPERTY_GEOGRAPHICAL_INFORMATION,
                     NrLocationRm.JSON_PROPERTY_GEODETIC_INFORMATION,
                     NrLocationRm.JSON_PROPERTY_GLOBAL_GNB_ID })
public class NrLocationRm
{
    public static final String JSON_PROPERTY_TAI = "tai";
    private Tai tai;

    public static final String JSON_PROPERTY_NCGI = "ncgi";
    private Ncgi ncgi;

    public static final String JSON_PROPERTY_IGNORE_NCGI = "ignoreNcgi";
    private Boolean ignoreNcgi = false;

    public static final String JSON_PROPERTY_AGE_OF_LOCATION_INFORMATION = "ageOfLocationInformation";
    private Integer ageOfLocationInformation;

    public static final String JSON_PROPERTY_UE_LOCATION_TIMESTAMP = "ueLocationTimestamp";
    private OffsetDateTime ueLocationTimestamp;

    public static final String JSON_PROPERTY_GEOGRAPHICAL_INFORMATION = "geographicalInformation";
    private String geographicalInformation;

    public static final String JSON_PROPERTY_GEODETIC_INFORMATION = "geodeticInformation";
    private String geodeticInformation;

    public static final String JSON_PROPERTY_GLOBAL_GNB_ID = "globalGnbId";
    private GlobalRanNodeId globalGnbId;

    public NrLocationRm()
    {
    }

    public NrLocationRm tai(Tai tai)
    {

        this.tai = tai;
        return this;
    }

    /**
     * Get tai
     * 
     * @return tai
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_TAI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Tai getTai()
    {
        return tai;
    }

    @JsonProperty(JSON_PROPERTY_TAI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTai(Tai tai)
    {
        this.tai = tai;
    }

    public NrLocationRm ncgi(Ncgi ncgi)
    {

        this.ncgi = ncgi;
        return this;
    }

    /**
     * Get ncgi
     * 
     * @return ncgi
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_NCGI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Ncgi getNcgi()
    {
        return ncgi;
    }

    @JsonProperty(JSON_PROPERTY_NCGI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNcgi(Ncgi ncgi)
    {
        this.ncgi = ncgi;
    }

    public NrLocationRm ignoreNcgi(Boolean ignoreNcgi)
    {

        this.ignoreNcgi = ignoreNcgi;
        return this;
    }

    /**
     * Get ignoreNcgi
     * 
     * @return ignoreNcgi
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_IGNORE_NCGI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getIgnoreNcgi()
    {
        return ignoreNcgi;
    }

    @JsonProperty(JSON_PROPERTY_IGNORE_NCGI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIgnoreNcgi(Boolean ignoreNcgi)
    {
        this.ignoreNcgi = ignoreNcgi;
    }

    public NrLocationRm ageOfLocationInformation(Integer ageOfLocationInformation)
    {

        this.ageOfLocationInformation = ageOfLocationInformation;
        return this;
    }

    /**
     * The value represents the elapsed time in minutes since the last network
     * contact of the mobile station. Value \&quot;0\&quot; indicates that the
     * location information was obtained after a successful paging procedure for
     * Active Location Retrieval when the UE is in idle mode or after a successful
     * NG-RAN location reporting procedure with the eNB when the UE is in connected
     * mode. Any other value than \&quot;0\&quot; indicates that the location
     * information is the last known one. See 3GPP TS 29.002 clause 17.7.8. minimum:
     * 0 maximum: 32767
     * 
     * @return ageOfLocationInformation
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The value represents the elapsed time in minutes since the last network contact of the mobile station. Value \"0\" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful  NG-RAN location reporting procedure with the eNB when the UE is in connected mode. Any other value than \"0\" indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8. ")
    @JsonProperty(JSON_PROPERTY_AGE_OF_LOCATION_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getAgeOfLocationInformation()
    {
        return ageOfLocationInformation;
    }

    @JsonProperty(JSON_PROPERTY_AGE_OF_LOCATION_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAgeOfLocationInformation(Integer ageOfLocationInformation)
    {
        this.ageOfLocationInformation = ageOfLocationInformation;
    }

    public NrLocationRm ueLocationTimestamp(OffsetDateTime ueLocationTimestamp)
    {

        this.ueLocationTimestamp = ueLocationTimestamp;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return ueLocationTimestamp
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_UE_LOCATION_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getUeLocationTimestamp()
    {
        return ueLocationTimestamp;
    }

    @JsonProperty(JSON_PROPERTY_UE_LOCATION_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUeLocationTimestamp(OffsetDateTime ueLocationTimestamp)
    {
        this.ueLocationTimestamp = ueLocationTimestamp;
    }

    public NrLocationRm geographicalInformation(String geographicalInformation)
    {

        this.geographicalInformation = geographicalInformation;
        return this;
    }

    /**
     * Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the
     * description of an ellipsoid point with uncertainty circle is allowed to be
     * used.
     * 
     * @return geographicalInformation
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. ")
    @JsonProperty(JSON_PROPERTY_GEOGRAPHICAL_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getGeographicalInformation()
    {
        return geographicalInformation;
    }

    @JsonProperty(JSON_PROPERTY_GEOGRAPHICAL_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeographicalInformation(String geographicalInformation)
    {
        this.geographicalInformation = geographicalInformation;
    }

    public NrLocationRm geodeticInformation(String geodeticInformation)
    {

        this.geodeticInformation = geodeticInformation;
        return this;
    }

    /**
     * Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999)
     * [24] clause 3.88.2. Only the description of an ellipsoid point with
     * uncertainty circle is allowed to be used.
     * 
     * @return geodeticInformation
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. ")
    @JsonProperty(JSON_PROPERTY_GEODETIC_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getGeodeticInformation()
    {
        return geodeticInformation;
    }

    @JsonProperty(JSON_PROPERTY_GEODETIC_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeodeticInformation(String geodeticInformation)
    {
        this.geodeticInformation = geodeticInformation;
    }

    public NrLocationRm globalGnbId(GlobalRanNodeId globalGnbId)
    {

        this.globalGnbId = globalGnbId;
        return this;
    }

    /**
     * Get globalGnbId
     * 
     * @return globalGnbId
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_GLOBAL_GNB_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public GlobalRanNodeId getGlobalGnbId()
    {
        return globalGnbId;
    }

    @JsonProperty(JSON_PROPERTY_GLOBAL_GNB_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGlobalGnbId(GlobalRanNodeId globalGnbId)
    {
        this.globalGnbId = globalGnbId;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        NrLocationRm nrLocationRm = (NrLocationRm) o;
        return Objects.equals(this.tai, nrLocationRm.tai) && Objects.equals(this.ncgi, nrLocationRm.ncgi)
               && Objects.equals(this.ignoreNcgi, nrLocationRm.ignoreNcgi)
               && Objects.equals(this.ageOfLocationInformation, nrLocationRm.ageOfLocationInformation)
               && Objects.equals(this.ueLocationTimestamp, nrLocationRm.ueLocationTimestamp)
               && Objects.equals(this.geographicalInformation, nrLocationRm.geographicalInformation)
               && Objects.equals(this.geodeticInformation, nrLocationRm.geodeticInformation) && Objects.equals(this.globalGnbId, nrLocationRm.globalGnbId);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(tai, ncgi, ignoreNcgi, ageOfLocationInformation, ueLocationTimestamp, geographicalInformation, geodeticInformation, globalGnbId);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class NrLocationRm {\n");
        sb.append("    tai: ").append(toIndentedString(tai)).append("\n");
        sb.append("    ncgi: ").append(toIndentedString(ncgi)).append("\n");
        sb.append("    ignoreNcgi: ").append(toIndentedString(ignoreNcgi)).append("\n");
        sb.append("    ageOfLocationInformation: ").append(toIndentedString(ageOfLocationInformation)).append("\n");
        sb.append("    ueLocationTimestamp: ").append(toIndentedString(ueLocationTimestamp)).append("\n");
        sb.append("    geographicalInformation: ").append(toIndentedString(geographicalInformation)).append("\n");
        sb.append("    geodeticInformation: ").append(toIndentedString(geodeticInformation)).append("\n");
        sb.append("    globalGnbId: ").append(toIndentedString(globalGnbId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
