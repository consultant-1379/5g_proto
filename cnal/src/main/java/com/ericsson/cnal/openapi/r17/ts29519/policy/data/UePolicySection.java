/*
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: -
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29519.policy.data;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains the UE policy section.
 */
@ApiModel(description = "Contains the UE policy section.")
@JsonPropertyOrder({ UePolicySection.JSON_PROPERTY_UE_POLICY_SECTION_INFO, UePolicySection.JSON_PROPERTY_UPSI })
public class UePolicySection
{
    public static final String JSON_PROPERTY_UE_POLICY_SECTION_INFO = "uePolicySectionInfo";
    private byte[] uePolicySectionInfo;

    public static final String JSON_PROPERTY_UPSI = "upsi";
    private String upsi;

    public UePolicySection()
    {
    }

    public UePolicySection uePolicySectionInfo(byte[] uePolicySectionInfo)
    {

        this.uePolicySectionInfo = uePolicySectionInfo;
        return this;
    }

    /**
     * string with format &#39;bytes&#39; as defined in OpenAPI
     * 
     * @return uePolicySectionInfo
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "string with format 'bytes' as defined in OpenAPI")
    @JsonProperty(JSON_PROPERTY_UE_POLICY_SECTION_INFO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public byte[] getUePolicySectionInfo()
    {
        return uePolicySectionInfo;
    }

    @JsonProperty(JSON_PROPERTY_UE_POLICY_SECTION_INFO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUePolicySectionInfo(byte[] uePolicySectionInfo)
    {
        this.uePolicySectionInfo = uePolicySectionInfo;
    }

    public UePolicySection upsi(String upsi)
    {

        this.upsi = upsi;
        return this;
    }

    /**
     * Get upsi
     * 
     * @return upsi
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_UPSI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getUpsi()
    {
        return upsi;
    }

    @JsonProperty(JSON_PROPERTY_UPSI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUpsi(String upsi)
    {
        this.upsi = upsi;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        UePolicySection uePolicySection = (UePolicySection) o;
        return Arrays.equals(this.uePolicySectionInfo, uePolicySection.uePolicySectionInfo) && Objects.equals(this.upsi, uePolicySection.upsi);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(Arrays.hashCode(uePolicySectionInfo), upsi);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class UePolicySection {\n");
        sb.append("    uePolicySectionInfo: ").append(toIndentedString(uePolicySectionInfo)).append("\n");
        sb.append("    upsi: ").append(toIndentedString(upsi)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
