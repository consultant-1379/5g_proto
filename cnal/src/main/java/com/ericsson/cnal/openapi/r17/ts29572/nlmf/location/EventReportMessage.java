/*
 * LMF Location
 * LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29572.nlmf.location;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29571.commondata.RefToBinaryData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Indicates an event report message.
 */
@ApiModel(description = "Indicates an event report message.")
@JsonPropertyOrder({ EventReportMessage.JSON_PROPERTY_EVENT_CLASS, EventReportMessage.JSON_PROPERTY_EVENT_CONTENT })
public class EventReportMessage
{
    public static final String JSON_PROPERTY_EVENT_CLASS = "eventClass";
    private String eventClass;

    public static final String JSON_PROPERTY_EVENT_CONTENT = "eventContent";
    private RefToBinaryData eventContent;

    public EventReportMessage()
    {
    }

    public EventReportMessage eventClass(String eventClass)
    {

        this.eventClass = eventClass;
        return this;
    }

    /**
     * Specifies event classes.
     * 
     * @return eventClass
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Specifies event classes.")
    @JsonProperty(JSON_PROPERTY_EVENT_CLASS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEventClass()
    {
        return eventClass;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_CLASS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventClass(String eventClass)
    {
        this.eventClass = eventClass;
    }

    public EventReportMessage eventContent(RefToBinaryData eventContent)
    {

        this.eventContent = eventContent;
        return this;
    }

    /**
     * Get eventContent
     * 
     * @return eventContent
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_EVENT_CONTENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public RefToBinaryData getEventContent()
    {
        return eventContent;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_CONTENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventContent(RefToBinaryData eventContent)
    {
        this.eventContent = eventContent;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        EventReportMessage eventReportMessage = (EventReportMessage) o;
        return Objects.equals(this.eventClass, eventReportMessage.eventClass) && Objects.equals(this.eventContent, eventReportMessage.eventContent);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(eventClass, eventContent);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class EventReportMessage {\n");
        sb.append("    eventClass: ").append(toIndentedString(eventClass)).append("\n");
        sb.append("    eventContent: ").append(toIndentedString(eventContent)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
