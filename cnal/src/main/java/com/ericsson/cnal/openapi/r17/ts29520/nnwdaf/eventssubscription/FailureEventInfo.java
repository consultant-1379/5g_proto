/*
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains information on the event for which the subscription is not
 * successful.
 */
@ApiModel(description = "Contains information on the event for which the subscription is not successful.")
@JsonPropertyOrder({ FailureEventInfo.JSON_PROPERTY_EVENT, FailureEventInfo.JSON_PROPERTY_FAILURE_CODE })
public class FailureEventInfo
{
    public static final String JSON_PROPERTY_EVENT = "event";
    private String event;

    public static final String JSON_PROPERTY_FAILURE_CODE = "failureCode";
    private String failureCode;

    public FailureEventInfo()
    {
    }

    public FailureEventInfo event(String event)
    {

        this.event = event;
        return this;
    }

    /**
     * Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed
     * is load level information of Network Slice - NETWORK_PERFORMANCE: Indicates
     * that the event subscribed is network performance information. - NF_LOAD:
     * Indicates that the event subscribed is load level and status of one or
     * several Network Functions. - SERVICE_EXPERIENCE: Indicates that the event
     * subscribed is service experience. - UE_MOBILITY: Indicates that the event
     * subscribed is UE mobility information. - UE_COMMUNICATION: Indicates that the
     * event subscribed is UE communication information. - QOS_SUSTAINABILITY:
     * Indicates that the event subscribed is QoS sustainability. -
     * ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal
     * behaviour. - USER_DATA_CONGESTION: Indicates that the event subscribed is
     * user data congestion information. - NSI_LOAD_LEVEL: Indicates that the event
     * subscribed is load level information of Network Slice and the optionally
     * associated Network Slice Instance - DN_PERFORMANCE: Indicates that the event
     * subscribed is DN performance information. - DISPERSION: Indicates that the
     * event subscribed is dispersion information. - RED_TRANS_EXP: Indicates that
     * the event subscribed is redundant transmission experience. -
     * WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance. -
     * SM_CONGESTION: Indicates the Session Management Congestion Control Experience
     * information for specific DNN and/or S-NSSAI.
     * 
     * @return event
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice   - NETWORK_PERFORMANCE: Indicates that the event subscribed is network performance information.   - NF_LOAD: Indicates that the event subscribed is load level and status of one or several Network Functions.   - SERVICE_EXPERIENCE: Indicates that the event subscribed is service experience.   - UE_MOBILITY: Indicates that the event subscribed is UE mobility information.   - UE_COMMUNICATION: Indicates that the event subscribed is UE communication information.   - QOS_SUSTAINABILITY: Indicates that the event subscribed is QoS sustainability.   - ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour.   - USER_DATA_CONGESTION: Indicates that the event subscribed is user data congestion information.   - NSI_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice and the optionally associated Network Slice Instance   - DN_PERFORMANCE: Indicates that the event subscribed is DN performance information.   - DISPERSION: Indicates that the event subscribed is dispersion information.   - RED_TRANS_EXP: Indicates that the event subscribed is redundant transmission experience.   - WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance.   - SM_CONGESTION: Indicates the Session Management Congestion Control Experience information for specific DNN and/or S-NSSAI. ")
    @JsonProperty(JSON_PROPERTY_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEvent()
    {
        return event;
    }

    @JsonProperty(JSON_PROPERTY_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEvent(String event)
    {
        this.event = event;
    }

    public FailureEventInfo failureCode(String failureCode)
    {

        this.failureCode = failureCode;
        return this;
    }

    /**
     * Possible values are: - UNAVAILABLE_DATA: Indicates the requested statistics
     * information for the event is rejected since necessary data to perform the
     * service is unavailable. - BOTH_STAT_PRED_NOT_ALLOWED: Indicates the requested
     * analysis information for the event is rejected since the start time is in the
     * past and the end time is in the future, which means the NF service consumer
     * requested both statistics and prediction for the analytics. -
     * UNSATISFIED_REQUESTED_ANALYTICS_TIME: Indicates that the requested event is
     * rejected since the analytics information is not ready when the time indicated
     * by the \&quot;timeAnaNeeded\&quot; attribute (as provided during the creation
     * or modification of subscription) is reached. - OTHER: Indicates the requested
     * analysis information for the event is rejected due to other reasons.
     * 
     * @return failureCode
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Possible values are: - UNAVAILABLE_DATA: Indicates the requested statistics information for the event is rejected since necessary data to perform the service is unavailable. - BOTH_STAT_PRED_NOT_ALLOWED: Indicates the requested analysis information for the event is rejected since the start time is in the past and the end time is in the future, which means the NF service consumer requested both statistics and prediction for the analytics. - UNSATISFIED_REQUESTED_ANALYTICS_TIME: Indicates that the requested event is rejected since the analytics information is not ready when the time indicated by the \"timeAnaNeeded\" attribute (as provided during the creation or modification of subscription) is reached. - OTHER: Indicates the requested analysis information for the event is rejected due to other reasons.  ")
    @JsonProperty(JSON_PROPERTY_FAILURE_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getFailureCode()
    {
        return failureCode;
    }

    @JsonProperty(JSON_PROPERTY_FAILURE_CODE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFailureCode(String failureCode)
    {
        this.failureCode = failureCode;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        FailureEventInfo failureEventInfo = (FailureEventInfo) o;
        return Objects.equals(this.event, failureEventInfo.event) && Objects.equals(this.failureCode, failureEventInfo.failureCode);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(event, failureCode);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class FailureEventInfo {\n");
        sb.append("    event: ").append(toIndentedString(event)).append("\n");
        sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
