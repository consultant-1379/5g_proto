/*
 * LMF Location
 * LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29572.nlmf.location;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Geographic area specified by different shape.
 */
@ApiModel(description = "Geographic area specified by different shape.")
@JsonPropertyOrder({ GeographicArea.JSON_PROPERTY_SHAPE,
                     GeographicArea.JSON_PROPERTY_POINT,
                     GeographicArea.JSON_PROPERTY_UNCERTAINTY,
                     GeographicArea.JSON_PROPERTY_UNCERTAINTY_ELLIPSE,
                     GeographicArea.JSON_PROPERTY_CONFIDENCE,
                     GeographicArea.JSON_PROPERTY_POINT_LIST,
                     GeographicArea.JSON_PROPERTY_ALTITUDE,
                     GeographicArea.JSON_PROPERTY_UNCERTAINTY_ALTITUDE,
                     GeographicArea.JSON_PROPERTY_INNER_RADIUS,
                     GeographicArea.JSON_PROPERTY_UNCERTAINTY_RADIUS,
                     GeographicArea.JSON_PROPERTY_OFFSET_ANGLE,
                     GeographicArea.JSON_PROPERTY_INCLUDED_ANGLE })
@JsonIgnoreProperties(value = "shape", // ignore manually set shape, it will be automatically generated by Jackson
                                       // during serialization
                      allowSetters = true // allows the shape to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "shape", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = EllipsoidArc.class, name = "ELLIPSOID_ARC"),
                @JsonSubTypes.Type(value = EllipsoidArc.class, name = "EllipsoidArc"),
                @JsonSubTypes.Type(value = Local2dPointUncertaintyEllipse.class, name = "LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Local3dPointUncertaintyEllipsoid.class, name = "LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID"),
                @JsonSubTypes.Type(value = Point.class, name = "POINT"),
                @JsonSubTypes.Type(value = PointAltitude.class, name = "POINT_ALTITUDE"),
                @JsonSubTypes.Type(value = PointAltitudeUncertainty.class, name = "POINT_ALTITUDE_UNCERTAINTY"),
                @JsonSubTypes.Type(value = PointUncertaintyCircle.class, name = "POINT_UNCERTAINTY_CIRCLE"),
                @JsonSubTypes.Type(value = PointUncertaintyEllipse.class, name = "POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Polygon.class, name = "POLYGON"),
                @JsonSubTypes.Type(value = Point.class, name = "Point"),
                @JsonSubTypes.Type(value = PointAltitude.class, name = "PointAltitude"),
                @JsonSubTypes.Type(value = PointAltitudeUncertainty.class, name = "PointAltitudeUncertainty"),
                @JsonSubTypes.Type(value = PointUncertaintyCircle.class, name = "PointUncertaintyCircle"),
                @JsonSubTypes.Type(value = PointUncertaintyEllipse.class, name = "PointUncertaintyEllipse"),
                @JsonSubTypes.Type(value = Polygon.class, name = "Polygon"), })

public class GeographicArea
{
    public static final String JSON_PROPERTY_SHAPE = "shape";
    protected String shape;

    public static final String JSON_PROPERTY_POINT = "point";
    private GeographicalCoordinates point;

    public static final String JSON_PROPERTY_UNCERTAINTY = "uncertainty";
    private Float uncertainty;

    public static final String JSON_PROPERTY_UNCERTAINTY_ELLIPSE = "uncertaintyEllipse";
    private UncertaintyEllipse uncertaintyEllipse;

    public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
    private Integer confidence;

    public static final String JSON_PROPERTY_POINT_LIST = "pointList";
    private List<GeographicalCoordinates> pointList = new ArrayList<>();

    public static final String JSON_PROPERTY_ALTITUDE = "altitude";
    private Double altitude;

    public static final String JSON_PROPERTY_UNCERTAINTY_ALTITUDE = "uncertaintyAltitude";
    private Float uncertaintyAltitude;

    public static final String JSON_PROPERTY_INNER_RADIUS = "innerRadius";
    private Integer innerRadius;

    public static final String JSON_PROPERTY_UNCERTAINTY_RADIUS = "uncertaintyRadius";
    private Float uncertaintyRadius;

    public static final String JSON_PROPERTY_OFFSET_ANGLE = "offsetAngle";
    private Integer offsetAngle;

    public static final String JSON_PROPERTY_INCLUDED_ANGLE = "includedAngle";
    private Integer includedAngle;

    public GeographicArea()
    {
    }

    public GeographicArea shape(String shape)
    {

        this.shape = shape;
        return this;
    }

    /**
     * Indicates supported GAD shapes.
     * 
     * @return shape
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates supported GAD shapes.")
    @JsonProperty(JSON_PROPERTY_SHAPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getShape()
    {
        return shape;
    }

    @JsonProperty(JSON_PROPERTY_SHAPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setShape(String shape)
    {
        this.shape = shape;
    }

    public GeographicArea point(GeographicalCoordinates point)
    {

        this.point = point;
        return this;
    }

    /**
     * Get point
     * 
     * @return point
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public GeographicalCoordinates getPoint()
    {
        return point;
    }

    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPoint(GeographicalCoordinates point)
    {
        this.point = point;
    }

    public GeographicArea uncertainty(Float uncertainty)
    {

        this.uncertainty = uncertainty;
        return this;
    }

    /**
     * Indicates value of uncertainty. minimum: 0
     * 
     * @return uncertainty
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of uncertainty.")
    @JsonProperty(JSON_PROPERTY_UNCERTAINTY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getUncertainty()
    {
        return uncertainty;
    }

    @JsonProperty(JSON_PROPERTY_UNCERTAINTY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUncertainty(Float uncertainty)
    {
        this.uncertainty = uncertainty;
    }

    public GeographicArea uncertaintyEllipse(UncertaintyEllipse uncertaintyEllipse)
    {

        this.uncertaintyEllipse = uncertaintyEllipse;
        return this;
    }

    /**
     * Get uncertaintyEllipse
     * 
     * @return uncertaintyEllipse
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ELLIPSE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UncertaintyEllipse getUncertaintyEllipse()
    {
        return uncertaintyEllipse;
    }

    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ELLIPSE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUncertaintyEllipse(UncertaintyEllipse uncertaintyEllipse)
    {
        this.uncertaintyEllipse = uncertaintyEllipse;
    }

    public GeographicArea confidence(Integer confidence)
    {

        this.confidence = confidence;
        return this;
    }

    /**
     * Indicates value of confidence. minimum: 0 maximum: 100
     * 
     * @return confidence
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of confidence.")
    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getConfidence()
    {
        return confidence;
    }

    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConfidence(Integer confidence)
    {
        this.confidence = confidence;
    }

    public GeographicArea pointList(List<GeographicalCoordinates> pointList)
    {

        this.pointList = pointList;
        return this;
    }

    public GeographicArea addPointListItem(GeographicalCoordinates pointListItem)
    {
        this.pointList.add(pointListItem);
        return this;
    }

    /**
     * List of points.
     * 
     * @return pointList
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "List of points.")
    @JsonProperty(JSON_PROPERTY_POINT_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<GeographicalCoordinates> getPointList()
    {
        return pointList;
    }

    @JsonProperty(JSON_PROPERTY_POINT_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPointList(List<GeographicalCoordinates> pointList)
    {
        this.pointList = pointList;
    }

    public GeographicArea altitude(Double altitude)
    {

        this.altitude = altitude;
        return this;
    }

    /**
     * Indicates value of altitude. minimum: -32767 maximum: 32767
     * 
     * @return altitude
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of altitude.")
    @JsonProperty(JSON_PROPERTY_ALTITUDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Double getAltitude()
    {
        return altitude;
    }

    @JsonProperty(JSON_PROPERTY_ALTITUDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAltitude(Double altitude)
    {
        this.altitude = altitude;
    }

    public GeographicArea uncertaintyAltitude(Float uncertaintyAltitude)
    {

        this.uncertaintyAltitude = uncertaintyAltitude;
        return this;
    }

    /**
     * Indicates value of uncertainty. minimum: 0
     * 
     * @return uncertaintyAltitude
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of uncertainty.")
    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ALTITUDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getUncertaintyAltitude()
    {
        return uncertaintyAltitude;
    }

    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ALTITUDE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUncertaintyAltitude(Float uncertaintyAltitude)
    {
        this.uncertaintyAltitude = uncertaintyAltitude;
    }

    public GeographicArea innerRadius(Integer innerRadius)
    {

        this.innerRadius = innerRadius;
        return this;
    }

    /**
     * Indicates value of the inner radius. minimum: 0 maximum: 327675
     * 
     * @return innerRadius
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of the inner radius.")
    @JsonProperty(JSON_PROPERTY_INNER_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getInnerRadius()
    {
        return innerRadius;
    }

    @JsonProperty(JSON_PROPERTY_INNER_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInnerRadius(Integer innerRadius)
    {
        this.innerRadius = innerRadius;
    }

    public GeographicArea uncertaintyRadius(Float uncertaintyRadius)
    {

        this.uncertaintyRadius = uncertaintyRadius;
        return this;
    }

    /**
     * Indicates value of uncertainty. minimum: 0
     * 
     * @return uncertaintyRadius
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of uncertainty.")
    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getUncertaintyRadius()
    {
        return uncertaintyRadius;
    }

    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUncertaintyRadius(Float uncertaintyRadius)
    {
        this.uncertaintyRadius = uncertaintyRadius;
    }

    public GeographicArea offsetAngle(Integer offsetAngle)
    {

        this.offsetAngle = offsetAngle;
        return this;
    }

    /**
     * Indicates value of angle. minimum: 0 maximum: 360
     * 
     * @return offsetAngle
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of angle.")
    @JsonProperty(JSON_PROPERTY_OFFSET_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getOffsetAngle()
    {
        return offsetAngle;
    }

    @JsonProperty(JSON_PROPERTY_OFFSET_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOffsetAngle(Integer offsetAngle)
    {
        this.offsetAngle = offsetAngle;
    }

    public GeographicArea includedAngle(Integer includedAngle)
    {

        this.includedAngle = includedAngle;
        return this;
    }

    /**
     * Indicates value of angle. minimum: 0 maximum: 360
     * 
     * @return includedAngle
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of angle.")
    @JsonProperty(JSON_PROPERTY_INCLUDED_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getIncludedAngle()
    {
        return includedAngle;
    }

    @JsonProperty(JSON_PROPERTY_INCLUDED_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIncludedAngle(Integer includedAngle)
    {
        this.includedAngle = includedAngle;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        GeographicArea geographicArea = (GeographicArea) o;
        return Objects.equals(this.shape, geographicArea.shape) && Objects.equals(this.point, geographicArea.point)
               && Objects.equals(this.uncertainty, geographicArea.uncertainty) && Objects.equals(this.uncertaintyEllipse, geographicArea.uncertaintyEllipse)
               && Objects.equals(this.confidence, geographicArea.confidence) && Objects.equals(this.pointList, geographicArea.pointList)
               && Objects.equals(this.altitude, geographicArea.altitude) && Objects.equals(this.uncertaintyAltitude, geographicArea.uncertaintyAltitude)
               && Objects.equals(this.innerRadius, geographicArea.innerRadius) && Objects.equals(this.uncertaintyRadius, geographicArea.uncertaintyRadius)
               && Objects.equals(this.offsetAngle, geographicArea.offsetAngle) && Objects.equals(this.includedAngle, geographicArea.includedAngle);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(shape,
                            point,
                            uncertainty,
                            uncertaintyEllipse,
                            confidence,
                            pointList,
                            altitude,
                            uncertaintyAltitude,
                            innerRadius,
                            uncertaintyRadius,
                            offsetAngle,
                            includedAngle);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class GeographicArea {\n");
        sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
        sb.append("    point: ").append(toIndentedString(point)).append("\n");
        sb.append("    uncertainty: ").append(toIndentedString(uncertainty)).append("\n");
        sb.append("    uncertaintyEllipse: ").append(toIndentedString(uncertaintyEllipse)).append("\n");
        sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
        sb.append("    pointList: ").append(toIndentedString(pointList)).append("\n");
        sb.append("    altitude: ").append(toIndentedString(altitude)).append("\n");
        sb.append("    uncertaintyAltitude: ").append(toIndentedString(uncertaintyAltitude)).append("\n");
        sb.append("    innerRadius: ").append(toIndentedString(innerRadius)).append("\n");
        sb.append("    uncertaintyRadius: ").append(toIndentedString(uncertaintyRadius)).append("\n");
        sb.append("    offsetAngle: ").append(toIndentedString(offsetAngle)).append("\n");
        sb.append("    includedAngle: ").append(toIndentedString(includedAngle)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
