/*
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29510.nnrf.nfmanagement;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29571.commondata.Tai;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Subscription to a set of NF Instances (DCCFs), identified by NF types, NF Set
 * Id(s) or DCCF Serving Area information, i.e. list of TAIs served by the DCCF
 */
@ApiModel(description = "Subscription to a set of NF Instances (DCCFs), identified by NF types, NF Set Id(s) or DCCF Serving Area information, i.e. list of TAIs served by the DCCF ")
@JsonPropertyOrder({ DccfCond.JSON_PROPERTY_CONDITION_TYPE,
                     DccfCond.JSON_PROPERTY_TAI_LIST,
                     DccfCond.JSON_PROPERTY_TAI_RANGE_LIST,
                     DccfCond.JSON_PROPERTY_SERVING_NF_TYPE_LIST,
                     DccfCond.JSON_PROPERTY_SERVING_NF_SET_ID_LIST })
public class DccfCond
{
    /**
     * Gets or Sets conditionType
     */
    public enum ConditionTypeEnum
    {
        DCCF_COND("DCCF_COND");

        private String value;

        ConditionTypeEnum(String value)
        {
            this.value = value;
        }

        @JsonValue
        public String getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ConditionTypeEnum fromValue(String value)
        {
            for (ConditionTypeEnum b : ConditionTypeEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_CONDITION_TYPE = "conditionType";
    private ConditionTypeEnum conditionType;

    public static final String JSON_PROPERTY_TAI_LIST = "taiList";
    private List<Tai> taiList = null;

    public static final String JSON_PROPERTY_TAI_RANGE_LIST = "taiRangeList";
    private List<TaiRange> taiRangeList = null;

    public static final String JSON_PROPERTY_SERVING_NF_TYPE_LIST = "servingNfTypeList";
    private List<String> servingNfTypeList = null;

    public static final String JSON_PROPERTY_SERVING_NF_SET_ID_LIST = "servingNfSetIdList";
    private List<String> servingNfSetIdList = null;

    public DccfCond()
    {
    }

    public DccfCond conditionType(ConditionTypeEnum conditionType)
    {

        this.conditionType = conditionType;
        return this;
    }

    /**
     * Get conditionType
     * 
     * @return conditionType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ConditionTypeEnum getConditionType()
    {
        return conditionType;
    }

    @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConditionType(ConditionTypeEnum conditionType)
    {
        this.conditionType = conditionType;
    }

    public DccfCond taiList(List<Tai> taiList)
    {

        this.taiList = taiList;
        return this;
    }

    public DccfCond addTaiListItem(Tai taiListItem)
    {
        if (this.taiList == null)
        {
            this.taiList = new ArrayList<>();
        }
        this.taiList.add(taiListItem);
        return this;
    }

    /**
     * Get taiList
     * 
     * @return taiList
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_TAI_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Tai> getTaiList()
    {
        return taiList;
    }

    @JsonProperty(JSON_PROPERTY_TAI_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaiList(List<Tai> taiList)
    {
        this.taiList = taiList;
    }

    public DccfCond taiRangeList(List<TaiRange> taiRangeList)
    {

        this.taiRangeList = taiRangeList;
        return this;
    }

    public DccfCond addTaiRangeListItem(TaiRange taiRangeListItem)
    {
        if (this.taiRangeList == null)
        {
            this.taiRangeList = new ArrayList<>();
        }
        this.taiRangeList.add(taiRangeListItem);
        return this;
    }

    /**
     * Get taiRangeList
     * 
     * @return taiRangeList
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_TAI_RANGE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<TaiRange> getTaiRangeList()
    {
        return taiRangeList;
    }

    @JsonProperty(JSON_PROPERTY_TAI_RANGE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaiRangeList(List<TaiRange> taiRangeList)
    {
        this.taiRangeList = taiRangeList;
    }

    public DccfCond servingNfTypeList(List<String> servingNfTypeList)
    {

        this.servingNfTypeList = servingNfTypeList;
        return this;
    }

    public DccfCond addServingNfTypeListItem(String servingNfTypeListItem)
    {
        if (this.servingNfTypeList == null)
        {
            this.servingNfTypeList = new ArrayList<>();
        }
        this.servingNfTypeList.add(servingNfTypeListItem);
        return this;
    }

    /**
     * Get servingNfTypeList
     * 
     * @return servingNfTypeList
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SERVING_NF_TYPE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getServingNfTypeList()
    {
        return servingNfTypeList;
    }

    @JsonProperty(JSON_PROPERTY_SERVING_NF_TYPE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setServingNfTypeList(List<String> servingNfTypeList)
    {
        this.servingNfTypeList = servingNfTypeList;
    }

    public DccfCond servingNfSetIdList(List<String> servingNfSetIdList)
    {

        this.servingNfSetIdList = servingNfSetIdList;
        return this;
    }

    public DccfCond addServingNfSetIdListItem(String servingNfSetIdListItem)
    {
        if (this.servingNfSetIdList == null)
        {
            this.servingNfSetIdList = new ArrayList<>();
        }
        this.servingNfSetIdList.add(servingNfSetIdListItem);
        return this;
    }

    /**
     * Get servingNfSetIdList
     * 
     * @return servingNfSetIdList
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SERVING_NF_SET_ID_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getServingNfSetIdList()
    {
        return servingNfSetIdList;
    }

    @JsonProperty(JSON_PROPERTY_SERVING_NF_SET_ID_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setServingNfSetIdList(List<String> servingNfSetIdList)
    {
        this.servingNfSetIdList = servingNfSetIdList;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        DccfCond dccfCond = (DccfCond) o;
        return Objects.equals(this.conditionType, dccfCond.conditionType) && Objects.equals(this.taiList, dccfCond.taiList)
               && Objects.equals(this.taiRangeList, dccfCond.taiRangeList) && Objects.equals(this.servingNfTypeList, dccfCond.servingNfTypeList)
               && Objects.equals(this.servingNfSetIdList, dccfCond.servingNfSetIdList);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(conditionType, taiList, taiRangeList, servingNfTypeList, servingNfSetIdList);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class DccfCond {\n");
        sb.append("    conditionType: ").append(toIndentedString(conditionType)).append("\n");
        sb.append("    taiList: ").append(toIndentedString(taiList)).append("\n");
        sb.append("    taiRangeList: ").append(toIndentedString(taiRangeList)).append("\n");
        sb.append("    servingNfTypeList: ").append(toIndentedString(servingNfTypeList)).append("\n");
        sb.append("    servingNfSetIdList: ").append(toIndentedString(servingNfSetIdList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
