/*
 * NSSF NS Selection
 * NSSF Network Slice Selection Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29531.nnssf.nsselection;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains the API URIs of NRF services to be used to discover NFs/services,
 * subscribe to NF status changes and/or request access tokens within the
 * selected Network Slice instance and optional the Identifier of the selected
 * Network Slice instance
 */
@ApiModel(description = "Contains the API URIs of NRF services to be used to discover NFs/services, subscribe to NF status changes and/or request access tokens within the selected Network Slice instance and optional the Identifier of the selected Network Slice instance ")
@JsonPropertyOrder({ NsiInformation.JSON_PROPERTY_NRF_ID,
                     NsiInformation.JSON_PROPERTY_NSI_ID,
                     NsiInformation.JSON_PROPERTY_NRF_NF_MGT_URI,
                     NsiInformation.JSON_PROPERTY_NRF_ACCESS_TOKEN_URI,
                     NsiInformation.JSON_PROPERTY_NRF_OAUTH2_REQUIRED })
public class NsiInformation
{
    public static final String JSON_PROPERTY_NRF_ID = "nrfId";
    private String nrfId;

    public static final String JSON_PROPERTY_NSI_ID = "nsiId";
    private String nsiId;

    public static final String JSON_PROPERTY_NRF_NF_MGT_URI = "nrfNfMgtUri";
    private String nrfNfMgtUri;

    public static final String JSON_PROPERTY_NRF_ACCESS_TOKEN_URI = "nrfAccessTokenUri";
    private String nrfAccessTokenUri;

    public static final String JSON_PROPERTY_NRF_OAUTH2_REQUIRED = "nrfOauth2Required";
    private Map<String, Boolean> nrfOauth2Required = null;

    public NsiInformation()
    {
    }

    public NsiInformation nrfId(String nrfId)
    {

        this.nrfId = nrfId;
        return this;
    }

    /**
     * String providing an URI formatted according to RFC 3986.
     * 
     * @return nrfId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "String providing an URI formatted according to RFC 3986.")
    @JsonProperty(JSON_PROPERTY_NRF_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getNrfId()
    {
        return nrfId;
    }

    @JsonProperty(JSON_PROPERTY_NRF_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNrfId(String nrfId)
    {
        this.nrfId = nrfId;
    }

    public NsiInformation nsiId(String nsiId)
    {

        this.nsiId = nsiId;
        return this;
    }

    /**
     * Contains the Identifier of the selected Network Slice instance
     * 
     * @return nsiId
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Contains the Identifier of the selected Network Slice instance")
    @JsonProperty(JSON_PROPERTY_NSI_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNsiId()
    {
        return nsiId;
    }

    @JsonProperty(JSON_PROPERTY_NSI_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNsiId(String nsiId)
    {
        this.nsiId = nsiId;
    }

    public NsiInformation nrfNfMgtUri(String nrfNfMgtUri)
    {

        this.nrfNfMgtUri = nrfNfMgtUri;
        return this;
    }

    /**
     * String providing an URI formatted according to RFC 3986.
     * 
     * @return nrfNfMgtUri
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String providing an URI formatted according to RFC 3986.")
    @JsonProperty(JSON_PROPERTY_NRF_NF_MGT_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNrfNfMgtUri()
    {
        return nrfNfMgtUri;
    }

    @JsonProperty(JSON_PROPERTY_NRF_NF_MGT_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNrfNfMgtUri(String nrfNfMgtUri)
    {
        this.nrfNfMgtUri = nrfNfMgtUri;
    }

    public NsiInformation nrfAccessTokenUri(String nrfAccessTokenUri)
    {

        this.nrfAccessTokenUri = nrfAccessTokenUri;
        return this;
    }

    /**
     * String providing an URI formatted according to RFC 3986.
     * 
     * @return nrfAccessTokenUri
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String providing an URI formatted according to RFC 3986.")
    @JsonProperty(JSON_PROPERTY_NRF_ACCESS_TOKEN_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNrfAccessTokenUri()
    {
        return nrfAccessTokenUri;
    }

    @JsonProperty(JSON_PROPERTY_NRF_ACCESS_TOKEN_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNrfAccessTokenUri(String nrfAccessTokenUri)
    {
        this.nrfAccessTokenUri = nrfAccessTokenUri;
    }

    public NsiInformation nrfOauth2Required(Map<String, Boolean> nrfOauth2Required)
    {

        this.nrfOauth2Required = nrfOauth2Required;
        return this;
    }

    public NsiInformation putNrfOauth2RequiredItem(String key,
                                                   Boolean nrfOauth2RequiredItem)
    {
        if (this.nrfOauth2Required == null)
        {
            this.nrfOauth2Required = new HashMap<>();
        }
        this.nrfOauth2Required.put(key, nrfOauth2RequiredItem);
        return this;
    }

    /**
     * Map indicating whether the NRF requires Oauth2-based authorization for
     * accessing its services. The key of the map shall be the name of an NRF
     * service, e.g. \&quot;nnrf-nfm\&quot; or \&quot;nnrf-disc\&quot;
     * 
     * @return nrfOauth2Required
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Map indicating whether the NRF requires Oauth2-based authorization for accessing its services. The key of the map shall be the name of an NRF service, e.g. \"nnrf-nfm\" or \"nnrf-disc\" ")
    @JsonProperty(JSON_PROPERTY_NRF_OAUTH2_REQUIRED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Map<String, Boolean> getNrfOauth2Required()
    {
        return nrfOauth2Required;
    }

    @JsonProperty(JSON_PROPERTY_NRF_OAUTH2_REQUIRED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNrfOauth2Required(Map<String, Boolean> nrfOauth2Required)
    {
        this.nrfOauth2Required = nrfOauth2Required;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        NsiInformation nsiInformation = (NsiInformation) o;
        return Objects.equals(this.nrfId, nsiInformation.nrfId) && Objects.equals(this.nsiId, nsiInformation.nsiId)
               && Objects.equals(this.nrfNfMgtUri, nsiInformation.nrfNfMgtUri) && Objects.equals(this.nrfAccessTokenUri, nsiInformation.nrfAccessTokenUri)
               && Objects.equals(this.nrfOauth2Required, nsiInformation.nrfOauth2Required);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(nrfId, nsiId, nrfNfMgtUri, nrfAccessTokenUri, nrfOauth2Required);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class NsiInformation {\n");
        sb.append("    nrfId: ").append(toIndentedString(nrfId)).append("\n");
        sb.append("    nsiId: ").append(toIndentedString(nsiId)).append("\n");
        sb.append("    nrfNfMgtUri: ").append(toIndentedString(nrfNfMgtUri)).append("\n");
        sb.append("    nrfAccessTokenUri: ").append(toIndentedString(nrfAccessTokenUri)).append("\n");
        sb.append("    nrfOauth2Required: ").append(toIndentedString(nrfOauth2Required)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
