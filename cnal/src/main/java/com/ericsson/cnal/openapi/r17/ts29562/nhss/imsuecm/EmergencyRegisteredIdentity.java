/*
 * Nhss_imsUECM
 * Nhss UE Context Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29562.nhss.imsuecm;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A pair of private and public user identities which have not been
 * de-registered due to emergency registration
 */
@ApiModel(description = "A pair of private and public user identities which have not been de-registered due to emergency registration ")
@JsonPropertyOrder({ EmergencyRegisteredIdentity.JSON_PROPERTY_IMPI, EmergencyRegisteredIdentity.JSON_PROPERTY_IMPU })
public class EmergencyRegisteredIdentity
{
    public static final String JSON_PROPERTY_IMPI = "impi";
    private String impi;

    public static final String JSON_PROPERTY_IMPU = "impu";
    private String impu;

    public EmergencyRegisteredIdentity()
    {
    }

    public EmergencyRegisteredIdentity impi(String impi)
    {

        this.impi = impi;
        return this;
    }

    /**
     * IMS Private Identity of the UE
     * 
     * @return impi
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "IMS Private Identity of the UE")
    @JsonProperty(JSON_PROPERTY_IMPI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getImpi()
    {
        return impi;
    }

    @JsonProperty(JSON_PROPERTY_IMPI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setImpi(String impi)
    {
        this.impi = impi;
    }

    public EmergencyRegisteredIdentity impu(String impu)
    {

        this.impu = impu;
        return this;
    }

    /**
     * IMS Public Identity of the UE (sip URI or tel URI)
     * 
     * @return impu
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "IMS Public Identity of the UE (sip URI or tel URI)")
    @JsonProperty(JSON_PROPERTY_IMPU)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getImpu()
    {
        return impu;
    }

    @JsonProperty(JSON_PROPERTY_IMPU)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setImpu(String impu)
    {
        this.impu = impu;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        EmergencyRegisteredIdentity emergencyRegisteredIdentity = (EmergencyRegisteredIdentity) o;
        return Objects.equals(this.impi, emergencyRegisteredIdentity.impi) && Objects.equals(this.impu, emergencyRegisteredIdentity.impu);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(impi, impu);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmergencyRegisteredIdentity {\n");
        sb.append("    impi: ").append(toIndentedString(impi)).append("\n");
        sb.append("    impu: ").append(toIndentedString(impu)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
