/*
 * Npcf_BDTPolicyControl Service API
 * PCF BDT Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29554.npcf.bdtpolicycontrol;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29122.commondata.TimeWindow;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Describes a transfer policy.
 */
@ApiModel(description = "Describes a transfer policy.")
@JsonPropertyOrder({ TransferPolicy.JSON_PROPERTY_MAX_BIT_RATE_DL,
                     TransferPolicy.JSON_PROPERTY_MAX_BIT_RATE_UL,
                     TransferPolicy.JSON_PROPERTY_RATING_GROUP,
                     TransferPolicy.JSON_PROPERTY_REC_TIME_INT,
                     TransferPolicy.JSON_PROPERTY_TRANS_POLICY_ID })
public class TransferPolicy
{
    public static final String JSON_PROPERTY_MAX_BIT_RATE_DL = "maxBitRateDl";
    private String maxBitRateDl;

    public static final String JSON_PROPERTY_MAX_BIT_RATE_UL = "maxBitRateUl";
    private String maxBitRateUl;

    public static final String JSON_PROPERTY_RATING_GROUP = "ratingGroup";
    private Integer ratingGroup;

    public static final String JSON_PROPERTY_REC_TIME_INT = "recTimeInt";
    private TimeWindow recTimeInt;

    public static final String JSON_PROPERTY_TRANS_POLICY_ID = "transPolicyId";
    private Integer transPolicyId;

    public TransferPolicy()
    {
    }

    public TransferPolicy maxBitRateDl(String maxBitRateDl)
    {

        this.maxBitRateDl = maxBitRateDl;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return maxBitRateDl
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_MAX_BIT_RATE_DL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getMaxBitRateDl()
    {
        return maxBitRateDl;
    }

    @JsonProperty(JSON_PROPERTY_MAX_BIT_RATE_DL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMaxBitRateDl(String maxBitRateDl)
    {
        this.maxBitRateDl = maxBitRateDl;
    }

    public TransferPolicy maxBitRateUl(String maxBitRateUl)
    {

        this.maxBitRateUl = maxBitRateUl;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return maxBitRateUl
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_MAX_BIT_RATE_UL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getMaxBitRateUl()
    {
        return maxBitRateUl;
    }

    @JsonProperty(JSON_PROPERTY_MAX_BIT_RATE_UL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMaxBitRateUl(String maxBitRateUl)
    {
        this.maxBitRateUl = maxBitRateUl;
    }

    public TransferPolicy ratingGroup(Integer ratingGroup)
    {

        this.ratingGroup = ratingGroup;
        return this;
    }

    /**
     * Indicates a rating group for the recommended time window.
     * 
     * @return ratingGroup
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates a rating group for the recommended time window.")
    @JsonProperty(JSON_PROPERTY_RATING_GROUP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getRatingGroup()
    {
        return ratingGroup;
    }

    @JsonProperty(JSON_PROPERTY_RATING_GROUP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRatingGroup(Integer ratingGroup)
    {
        this.ratingGroup = ratingGroup;
    }

    public TransferPolicy recTimeInt(TimeWindow recTimeInt)
    {

        this.recTimeInt = recTimeInt;
        return this;
    }

    /**
     * Get recTimeInt
     * 
     * @return recTimeInt
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_REC_TIME_INT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public TimeWindow getRecTimeInt()
    {
        return recTimeInt;
    }

    @JsonProperty(JSON_PROPERTY_REC_TIME_INT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRecTimeInt(TimeWindow recTimeInt)
    {
        this.recTimeInt = recTimeInt;
    }

    public TransferPolicy transPolicyId(Integer transPolicyId)
    {

        this.transPolicyId = transPolicyId;
        return this;
    }

    /**
     * Contains an identity of a transfer policy.
     * 
     * @return transPolicyId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Contains an identity of a transfer policy.")
    @JsonProperty(JSON_PROPERTY_TRANS_POLICY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getTransPolicyId()
    {
        return transPolicyId;
    }

    @JsonProperty(JSON_PROPERTY_TRANS_POLICY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTransPolicyId(Integer transPolicyId)
    {
        this.transPolicyId = transPolicyId;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        TransferPolicy transferPolicy = (TransferPolicy) o;
        return Objects.equals(this.maxBitRateDl, transferPolicy.maxBitRateDl) && Objects.equals(this.maxBitRateUl, transferPolicy.maxBitRateUl)
               && Objects.equals(this.ratingGroup, transferPolicy.ratingGroup) && Objects.equals(this.recTimeInt, transferPolicy.recTimeInt)
               && Objects.equals(this.transPolicyId, transferPolicy.transPolicyId);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(maxBitRateDl, maxBitRateUl, ratingGroup, recTimeInt, transPolicyId);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransferPolicy {\n");
        sb.append("    maxBitRateDl: ").append(toIndentedString(maxBitRateDl)).append("\n");
        sb.append("    maxBitRateUl: ").append(toIndentedString(maxBitRateUl)).append("\n");
        sb.append("    ratingGroup: ").append(toIndentedString(ratingGroup)).append("\n");
        sb.append("    recTimeInt: ").append(toIndentedString(recTimeInt)).append("\n");
        sb.append("    transPolicyId: ").append(toIndentedString(transPolicyId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
