/*
 * TS 29.122 Common Data Types
 * Data types applicable to several APIs.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29122.commondata;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents the description of invalid parameters, for a request rejected due
 * to invalid parameters.
 */
@ApiModel(description = "Represents the description of invalid parameters, for a request rejected due to invalid parameters.")
@JsonPropertyOrder({ InvalidParam.JSON_PROPERTY_PARAM, InvalidParam.JSON_PROPERTY_REASON })
public class InvalidParam
{
    public static final String JSON_PROPERTY_PARAM = "param";
    private String param;

    public static final String JSON_PROPERTY_REASON = "reason";
    private String reason;

    public InvalidParam()
    {
    }

    public InvalidParam param(String param)
    {

        this.param = param;
        return this;
    }

    /**
     * Attribute&#39;s name encoded as a JSON Pointer, or header&#39;s name.
     * 
     * @return param
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Attribute's name encoded as a JSON Pointer, or header's name.")
    @JsonProperty(JSON_PROPERTY_PARAM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getParam()
    {
        return param;
    }

    @JsonProperty(JSON_PROPERTY_PARAM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setParam(String param)
    {
        this.param = param;
    }

    public InvalidParam reason(String reason)
    {

        this.reason = reason;
        return this;
    }

    /**
     * A human-readable reason, e.g. \&quot;must be a positive integer\&quot;.
     * 
     * @return reason
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "A human-readable reason, e.g. \"must be a positive integer\".")
    @JsonProperty(JSON_PROPERTY_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getReason()
    {
        return reason;
    }

    @JsonProperty(JSON_PROPERTY_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReason(String reason)
    {
        this.reason = reason;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        InvalidParam invalidParam = (InvalidParam) o;
        return Objects.equals(this.param, invalidParam.param) && Objects.equals(this.reason, invalidParam.reason);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(param, reason);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class InvalidParam {\n");
        sb.append("    param: ").append(toIndentedString(param)).append("\n");
        sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
