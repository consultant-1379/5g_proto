/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Indicates changes on a resource.
 */
@ApiModel(description = "Indicates changes on a resource.")
@JsonPropertyOrder({ NotifyItem.JSON_PROPERTY_RESOURCE_ID, NotifyItem.JSON_PROPERTY_CHANGES })
public class NotifyItem
{
    public static final String JSON_PROPERTY_RESOURCE_ID = "resourceId";
    private String resourceId;

    public static final String JSON_PROPERTY_CHANGES = "changes";
    private List<ChangeItem> changes = new ArrayList<>();

    public NotifyItem()
    {
    }

    public NotifyItem resourceId(String resourceId)
    {

        this.resourceId = resourceId;
        return this;
    }

    /**
     * String providing an URI formatted according to RFC 3986.
     * 
     * @return resourceId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "String providing an URI formatted according to RFC 3986.")
    @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getResourceId()
    {
        return resourceId;
    }

    @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setResourceId(String resourceId)
    {
        this.resourceId = resourceId;
    }

    public NotifyItem changes(List<ChangeItem> changes)
    {

        this.changes = changes;
        return this;
    }

    public NotifyItem addChangesItem(ChangeItem changesItem)
    {
        this.changes.add(changesItem);
        return this;
    }

    /**
     * Get changes
     * 
     * @return changes
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_CHANGES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<ChangeItem> getChanges()
    {
        return changes;
    }

    @JsonProperty(JSON_PROPERTY_CHANGES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setChanges(List<ChangeItem> changes)
    {
        this.changes = changes;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        NotifyItem notifyItem = (NotifyItem) o;
        return Objects.equals(this.resourceId, notifyItem.resourceId) && Objects.equals(this.changes, notifyItem.changes);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(resourceId, changes);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotifyItem {\n");
        sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
        sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
