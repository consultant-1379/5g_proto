/*
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.analyticsinfo.SmcceInfo;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents a notification on events that occurred.
 */
@ApiModel(description = "Represents a notification on events that occurred.")
@JsonPropertyOrder({ EventNotification.JSON_PROPERTY_EVENT,
                     EventNotification.JSON_PROPERTY_START,
                     EventNotification.JSON_PROPERTY_EXPIRY,
                     EventNotification.JSON_PROPERTY_TIME_STAMP_GEN,
                     EventNotification.JSON_PROPERTY_FAIL_NOTIFY_CODE,
                     EventNotification.JSON_PROPERTY_RV_WAIT_TIME,
                     EventNotification.JSON_PROPERTY_ANA_META_INFO,
                     EventNotification.JSON_PROPERTY_NF_LOAD_LEVEL_INFOS,
                     EventNotification.JSON_PROPERTY_NSI_LOAD_LEVEL_INFOS,
                     EventNotification.JSON_PROPERTY_SLICE_LOAD_LEVEL_INFO,
                     EventNotification.JSON_PROPERTY_SVC_EXPS,
                     EventNotification.JSON_PROPERTY_QOS_SUSTAIN_INFOS,
                     EventNotification.JSON_PROPERTY_UE_COMMS,
                     EventNotification.JSON_PROPERTY_UE_MOBS,
                     EventNotification.JSON_PROPERTY_USER_DATA_CONG_INFOS,
                     EventNotification.JSON_PROPERTY_ABNOR_BEHAVRS,
                     EventNotification.JSON_PROPERTY_NW_PERFS,
                     EventNotification.JSON_PROPERTY_DN_PERF_INFOS,
                     EventNotification.JSON_PROPERTY_DISPER_INFOS,
                     EventNotification.JSON_PROPERTY_RED_TRANS_INFOS,
                     EventNotification.JSON_PROPERTY_WLAN_INFOS,
                     EventNotification.JSON_PROPERTY_SMCC_EXPS })
public class EventNotification
{
    public static final String JSON_PROPERTY_EVENT = "event";
    private String event;

    public static final String JSON_PROPERTY_START = "start";
    private OffsetDateTime start;

    public static final String JSON_PROPERTY_EXPIRY = "expiry";
    private OffsetDateTime expiry;

    public static final String JSON_PROPERTY_TIME_STAMP_GEN = "timeStampGen";
    private OffsetDateTime timeStampGen;

    public static final String JSON_PROPERTY_FAIL_NOTIFY_CODE = "failNotifyCode";
    private String failNotifyCode;

    public static final String JSON_PROPERTY_RV_WAIT_TIME = "rvWaitTime";
    private Integer rvWaitTime;

    public static final String JSON_PROPERTY_ANA_META_INFO = "anaMetaInfo";
    private AnalyticsMetadataInfo anaMetaInfo;

    public static final String JSON_PROPERTY_NF_LOAD_LEVEL_INFOS = "nfLoadLevelInfos";
    private List<NfLoadLevelInformation> nfLoadLevelInfos = null;

    public static final String JSON_PROPERTY_NSI_LOAD_LEVEL_INFOS = "nsiLoadLevelInfos";
    private List<NsiLoadLevelInfo> nsiLoadLevelInfos = null;

    public static final String JSON_PROPERTY_SLICE_LOAD_LEVEL_INFO = "sliceLoadLevelInfo";
    private SliceLoadLevelInformation sliceLoadLevelInfo;

    public static final String JSON_PROPERTY_SVC_EXPS = "svcExps";
    private List<ServiceExperienceInfo> svcExps = null;

    public static final String JSON_PROPERTY_QOS_SUSTAIN_INFOS = "qosSustainInfos";
    private List<QosSustainabilityInfo> qosSustainInfos = null;

    public static final String JSON_PROPERTY_UE_COMMS = "ueComms";
    private List<UeCommunication> ueComms = null;

    public static final String JSON_PROPERTY_UE_MOBS = "ueMobs";
    private List<UeMobility> ueMobs = null;

    public static final String JSON_PROPERTY_USER_DATA_CONG_INFOS = "userDataCongInfos";
    private List<UserDataCongestionInfo> userDataCongInfos = null;

    public static final String JSON_PROPERTY_ABNOR_BEHAVRS = "abnorBehavrs";
    private List<AbnormalBehaviour> abnorBehavrs = null;

    public static final String JSON_PROPERTY_NW_PERFS = "nwPerfs";
    private List<NetworkPerfInfo> nwPerfs = null;

    public static final String JSON_PROPERTY_DN_PERF_INFOS = "dnPerfInfos";
    private List<DnPerfInfo> dnPerfInfos = null;

    public static final String JSON_PROPERTY_DISPER_INFOS = "disperInfos";
    private List<DispersionInfo> disperInfos = null;

    public static final String JSON_PROPERTY_RED_TRANS_INFOS = "redTransInfos";
    private List<RedundantTransmissionExpInfo> redTransInfos = null;

    public static final String JSON_PROPERTY_WLAN_INFOS = "wlanInfos";
    private List<WlanPerformanceInfo> wlanInfos = null;

    public static final String JSON_PROPERTY_SMCC_EXPS = "smccExps";
    private List<SmcceInfo> smccExps = null;

    public EventNotification()
    {
    }

    public EventNotification event(String event)
    {

        this.event = event;
        return this;
    }

    /**
     * Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed
     * is load level information of Network Slice - NETWORK_PERFORMANCE: Indicates
     * that the event subscribed is network performance information. - NF_LOAD:
     * Indicates that the event subscribed is load level and status of one or
     * several Network Functions. - SERVICE_EXPERIENCE: Indicates that the event
     * subscribed is service experience. - UE_MOBILITY: Indicates that the event
     * subscribed is UE mobility information. - UE_COMMUNICATION: Indicates that the
     * event subscribed is UE communication information. - QOS_SUSTAINABILITY:
     * Indicates that the event subscribed is QoS sustainability. -
     * ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal
     * behaviour. - USER_DATA_CONGESTION: Indicates that the event subscribed is
     * user data congestion information. - NSI_LOAD_LEVEL: Indicates that the event
     * subscribed is load level information of Network Slice and the optionally
     * associated Network Slice Instance - DN_PERFORMANCE: Indicates that the event
     * subscribed is DN performance information. - DISPERSION: Indicates that the
     * event subscribed is dispersion information. - RED_TRANS_EXP: Indicates that
     * the event subscribed is redundant transmission experience. -
     * WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance. -
     * SM_CONGESTION: Indicates the Session Management Congestion Control Experience
     * information for specific DNN and/or S-NSSAI.
     * 
     * @return event
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Possible values are: - SLICE_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice   - NETWORK_PERFORMANCE: Indicates that the event subscribed is network performance information.   - NF_LOAD: Indicates that the event subscribed is load level and status of one or several Network Functions.   - SERVICE_EXPERIENCE: Indicates that the event subscribed is service experience.   - UE_MOBILITY: Indicates that the event subscribed is UE mobility information.   - UE_COMMUNICATION: Indicates that the event subscribed is UE communication information.   - QOS_SUSTAINABILITY: Indicates that the event subscribed is QoS sustainability.   - ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour.   - USER_DATA_CONGESTION: Indicates that the event subscribed is user data congestion information.   - NSI_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice and the optionally associated Network Slice Instance   - DN_PERFORMANCE: Indicates that the event subscribed is DN performance information.   - DISPERSION: Indicates that the event subscribed is dispersion information.   - RED_TRANS_EXP: Indicates that the event subscribed is redundant transmission experience.   - WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance.   - SM_CONGESTION: Indicates the Session Management Congestion Control Experience information for specific DNN and/or S-NSSAI. ")
    @JsonProperty(JSON_PROPERTY_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEvent()
    {
        return event;
    }

    @JsonProperty(JSON_PROPERTY_EVENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEvent(String event)
    {
        this.event = event;
    }

    public EventNotification start(OffsetDateTime start)
    {

        this.start = start;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return start
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getStart()
    {
        return start;
    }

    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStart(OffsetDateTime start)
    {
        this.start = start;
    }

    public EventNotification expiry(OffsetDateTime expiry)
    {

        this.expiry = expiry;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return expiry
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_EXPIRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getExpiry()
    {
        return expiry;
    }

    @JsonProperty(JSON_PROPERTY_EXPIRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExpiry(OffsetDateTime expiry)
    {
        this.expiry = expiry;
    }

    public EventNotification timeStampGen(OffsetDateTime timeStampGen)
    {

        this.timeStampGen = timeStampGen;
        return this;
    }

    /**
     * string with format &#39;date-time&#39; as defined in OpenAPI.
     * 
     * @return timeStampGen
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "string with format 'date-time' as defined in OpenAPI.")
    @JsonProperty(JSON_PROPERTY_TIME_STAMP_GEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING)

    public OffsetDateTime getTimeStampGen()
    {
        return timeStampGen;
    }

    @JsonProperty(JSON_PROPERTY_TIME_STAMP_GEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTimeStampGen(OffsetDateTime timeStampGen)
    {
        this.timeStampGen = timeStampGen;
    }

    public EventNotification failNotifyCode(String failNotifyCode)
    {

        this.failNotifyCode = failNotifyCode;
        return this;
    }

    /**
     * Possible values are: - UNAVAILABLE_DATA: Indicates the requested statistics
     * information for the event is rejected since necessary data to perform the
     * service is unavailable. - BOTH_STAT_PRED_NOT_ALLOWED: Indicates the requested
     * analysis information for the event is rejected since the start time is in the
     * past and the end time is in the future, which means the NF service consumer
     * requested both statistics and prediction for the analytics. -
     * UNSATISFIED_REQUESTED_ANALYTICS_TIME: Indicates that the requested event is
     * rejected since the analytics information is not ready when the time indicated
     * by the \&quot;timeAnaNeeded\&quot; attribute (as provided during the creation
     * or modification of subscription) is reached. - OTHER: Indicates the requested
     * analysis information for the event is rejected due to other reasons.
     * 
     * @return failNotifyCode
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Possible values are: - UNAVAILABLE_DATA: Indicates the requested statistics information for the event is rejected since necessary data to perform the service is unavailable. - BOTH_STAT_PRED_NOT_ALLOWED: Indicates the requested analysis information for the event is rejected since the start time is in the past and the end time is in the future, which means the NF service consumer requested both statistics and prediction for the analytics. - UNSATISFIED_REQUESTED_ANALYTICS_TIME: Indicates that the requested event is rejected since the analytics information is not ready when the time indicated by the \"timeAnaNeeded\" attribute (as provided during the creation or modification of subscription) is reached. - OTHER: Indicates the requested analysis information for the event is rejected due to other reasons.  ")
    @JsonProperty(JSON_PROPERTY_FAIL_NOTIFY_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getFailNotifyCode()
    {
        return failNotifyCode;
    }

    @JsonProperty(JSON_PROPERTY_FAIL_NOTIFY_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFailNotifyCode(String failNotifyCode)
    {
        this.failNotifyCode = failNotifyCode;
    }

    public EventNotification rvWaitTime(Integer rvWaitTime)
    {

        this.rvWaitTime = rvWaitTime;
        return this;
    }

    /**
     * indicating a time in seconds.
     * 
     * @return rvWaitTime
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "indicating a time in seconds.")
    @JsonProperty(JSON_PROPERTY_RV_WAIT_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getRvWaitTime()
    {
        return rvWaitTime;
    }

    @JsonProperty(JSON_PROPERTY_RV_WAIT_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRvWaitTime(Integer rvWaitTime)
    {
        this.rvWaitTime = rvWaitTime;
    }

    public EventNotification anaMetaInfo(AnalyticsMetadataInfo anaMetaInfo)
    {

        this.anaMetaInfo = anaMetaInfo;
        return this;
    }

    /**
     * Get anaMetaInfo
     * 
     * @return anaMetaInfo
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_ANA_META_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public AnalyticsMetadataInfo getAnaMetaInfo()
    {
        return anaMetaInfo;
    }

    @JsonProperty(JSON_PROPERTY_ANA_META_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAnaMetaInfo(AnalyticsMetadataInfo anaMetaInfo)
    {
        this.anaMetaInfo = anaMetaInfo;
    }

    public EventNotification nfLoadLevelInfos(List<NfLoadLevelInformation> nfLoadLevelInfos)
    {

        this.nfLoadLevelInfos = nfLoadLevelInfos;
        return this;
    }

    public EventNotification addNfLoadLevelInfosItem(NfLoadLevelInformation nfLoadLevelInfosItem)
    {
        if (this.nfLoadLevelInfos == null)
        {
            this.nfLoadLevelInfos = new ArrayList<>();
        }
        this.nfLoadLevelInfos.add(nfLoadLevelInfosItem);
        return this;
    }

    /**
     * Get nfLoadLevelInfos
     * 
     * @return nfLoadLevelInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_NF_LOAD_LEVEL_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<NfLoadLevelInformation> getNfLoadLevelInfos()
    {
        return nfLoadLevelInfos;
    }

    @JsonProperty(JSON_PROPERTY_NF_LOAD_LEVEL_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNfLoadLevelInfos(List<NfLoadLevelInformation> nfLoadLevelInfos)
    {
        this.nfLoadLevelInfos = nfLoadLevelInfos;
    }

    public EventNotification nsiLoadLevelInfos(List<NsiLoadLevelInfo> nsiLoadLevelInfos)
    {

        this.nsiLoadLevelInfos = nsiLoadLevelInfos;
        return this;
    }

    public EventNotification addNsiLoadLevelInfosItem(NsiLoadLevelInfo nsiLoadLevelInfosItem)
    {
        if (this.nsiLoadLevelInfos == null)
        {
            this.nsiLoadLevelInfos = new ArrayList<>();
        }
        this.nsiLoadLevelInfos.add(nsiLoadLevelInfosItem);
        return this;
    }

    /**
     * Get nsiLoadLevelInfos
     * 
     * @return nsiLoadLevelInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_NSI_LOAD_LEVEL_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<NsiLoadLevelInfo> getNsiLoadLevelInfos()
    {
        return nsiLoadLevelInfos;
    }

    @JsonProperty(JSON_PROPERTY_NSI_LOAD_LEVEL_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNsiLoadLevelInfos(List<NsiLoadLevelInfo> nsiLoadLevelInfos)
    {
        this.nsiLoadLevelInfos = nsiLoadLevelInfos;
    }

    public EventNotification sliceLoadLevelInfo(SliceLoadLevelInformation sliceLoadLevelInfo)
    {

        this.sliceLoadLevelInfo = sliceLoadLevelInfo;
        return this;
    }

    /**
     * Get sliceLoadLevelInfo
     * 
     * @return sliceLoadLevelInfo
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SLICE_LOAD_LEVEL_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public SliceLoadLevelInformation getSliceLoadLevelInfo()
    {
        return sliceLoadLevelInfo;
    }

    @JsonProperty(JSON_PROPERTY_SLICE_LOAD_LEVEL_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSliceLoadLevelInfo(SliceLoadLevelInformation sliceLoadLevelInfo)
    {
        this.sliceLoadLevelInfo = sliceLoadLevelInfo;
    }

    public EventNotification svcExps(List<ServiceExperienceInfo> svcExps)
    {

        this.svcExps = svcExps;
        return this;
    }

    public EventNotification addSvcExpsItem(ServiceExperienceInfo svcExpsItem)
    {
        if (this.svcExps == null)
        {
            this.svcExps = new ArrayList<>();
        }
        this.svcExps.add(svcExpsItem);
        return this;
    }

    /**
     * Get svcExps
     * 
     * @return svcExps
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SVC_EXPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<ServiceExperienceInfo> getSvcExps()
    {
        return svcExps;
    }

    @JsonProperty(JSON_PROPERTY_SVC_EXPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSvcExps(List<ServiceExperienceInfo> svcExps)
    {
        this.svcExps = svcExps;
    }

    public EventNotification qosSustainInfos(List<QosSustainabilityInfo> qosSustainInfos)
    {

        this.qosSustainInfos = qosSustainInfos;
        return this;
    }

    public EventNotification addQosSustainInfosItem(QosSustainabilityInfo qosSustainInfosItem)
    {
        if (this.qosSustainInfos == null)
        {
            this.qosSustainInfos = new ArrayList<>();
        }
        this.qosSustainInfos.add(qosSustainInfosItem);
        return this;
    }

    /**
     * Get qosSustainInfos
     * 
     * @return qosSustainInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_QOS_SUSTAIN_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<QosSustainabilityInfo> getQosSustainInfos()
    {
        return qosSustainInfos;
    }

    @JsonProperty(JSON_PROPERTY_QOS_SUSTAIN_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQosSustainInfos(List<QosSustainabilityInfo> qosSustainInfos)
    {
        this.qosSustainInfos = qosSustainInfos;
    }

    public EventNotification ueComms(List<UeCommunication> ueComms)
    {

        this.ueComms = ueComms;
        return this;
    }

    public EventNotification addUeCommsItem(UeCommunication ueCommsItem)
    {
        if (this.ueComms == null)
        {
            this.ueComms = new ArrayList<>();
        }
        this.ueComms.add(ueCommsItem);
        return this;
    }

    /**
     * Get ueComms
     * 
     * @return ueComms
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_UE_COMMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<UeCommunication> getUeComms()
    {
        return ueComms;
    }

    @JsonProperty(JSON_PROPERTY_UE_COMMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUeComms(List<UeCommunication> ueComms)
    {
        this.ueComms = ueComms;
    }

    public EventNotification ueMobs(List<UeMobility> ueMobs)
    {

        this.ueMobs = ueMobs;
        return this;
    }

    public EventNotification addUeMobsItem(UeMobility ueMobsItem)
    {
        if (this.ueMobs == null)
        {
            this.ueMobs = new ArrayList<>();
        }
        this.ueMobs.add(ueMobsItem);
        return this;
    }

    /**
     * Get ueMobs
     * 
     * @return ueMobs
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_UE_MOBS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<UeMobility> getUeMobs()
    {
        return ueMobs;
    }

    @JsonProperty(JSON_PROPERTY_UE_MOBS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUeMobs(List<UeMobility> ueMobs)
    {
        this.ueMobs = ueMobs;
    }

    public EventNotification userDataCongInfos(List<UserDataCongestionInfo> userDataCongInfos)
    {

        this.userDataCongInfos = userDataCongInfos;
        return this;
    }

    public EventNotification addUserDataCongInfosItem(UserDataCongestionInfo userDataCongInfosItem)
    {
        if (this.userDataCongInfos == null)
        {
            this.userDataCongInfos = new ArrayList<>();
        }
        this.userDataCongInfos.add(userDataCongInfosItem);
        return this;
    }

    /**
     * Get userDataCongInfos
     * 
     * @return userDataCongInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_USER_DATA_CONG_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<UserDataCongestionInfo> getUserDataCongInfos()
    {
        return userDataCongInfos;
    }

    @JsonProperty(JSON_PROPERTY_USER_DATA_CONG_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUserDataCongInfos(List<UserDataCongestionInfo> userDataCongInfos)
    {
        this.userDataCongInfos = userDataCongInfos;
    }

    public EventNotification abnorBehavrs(List<AbnormalBehaviour> abnorBehavrs)
    {

        this.abnorBehavrs = abnorBehavrs;
        return this;
    }

    public EventNotification addAbnorBehavrsItem(AbnormalBehaviour abnorBehavrsItem)
    {
        if (this.abnorBehavrs == null)
        {
            this.abnorBehavrs = new ArrayList<>();
        }
        this.abnorBehavrs.add(abnorBehavrsItem);
        return this;
    }

    /**
     * Get abnorBehavrs
     * 
     * @return abnorBehavrs
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_ABNOR_BEHAVRS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<AbnormalBehaviour> getAbnorBehavrs()
    {
        return abnorBehavrs;
    }

    @JsonProperty(JSON_PROPERTY_ABNOR_BEHAVRS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAbnorBehavrs(List<AbnormalBehaviour> abnorBehavrs)
    {
        this.abnorBehavrs = abnorBehavrs;
    }

    public EventNotification nwPerfs(List<NetworkPerfInfo> nwPerfs)
    {

        this.nwPerfs = nwPerfs;
        return this;
    }

    public EventNotification addNwPerfsItem(NetworkPerfInfo nwPerfsItem)
    {
        if (this.nwPerfs == null)
        {
            this.nwPerfs = new ArrayList<>();
        }
        this.nwPerfs.add(nwPerfsItem);
        return this;
    }

    /**
     * Get nwPerfs
     * 
     * @return nwPerfs
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_NW_PERFS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<NetworkPerfInfo> getNwPerfs()
    {
        return nwPerfs;
    }

    @JsonProperty(JSON_PROPERTY_NW_PERFS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNwPerfs(List<NetworkPerfInfo> nwPerfs)
    {
        this.nwPerfs = nwPerfs;
    }

    public EventNotification dnPerfInfos(List<DnPerfInfo> dnPerfInfos)
    {

        this.dnPerfInfos = dnPerfInfos;
        return this;
    }

    public EventNotification addDnPerfInfosItem(DnPerfInfo dnPerfInfosItem)
    {
        if (this.dnPerfInfos == null)
        {
            this.dnPerfInfos = new ArrayList<>();
        }
        this.dnPerfInfos.add(dnPerfInfosItem);
        return this;
    }

    /**
     * Get dnPerfInfos
     * 
     * @return dnPerfInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DN_PERF_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<DnPerfInfo> getDnPerfInfos()
    {
        return dnPerfInfos;
    }

    @JsonProperty(JSON_PROPERTY_DN_PERF_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDnPerfInfos(List<DnPerfInfo> dnPerfInfos)
    {
        this.dnPerfInfos = dnPerfInfos;
    }

    public EventNotification disperInfos(List<DispersionInfo> disperInfos)
    {

        this.disperInfos = disperInfos;
        return this;
    }

    public EventNotification addDisperInfosItem(DispersionInfo disperInfosItem)
    {
        if (this.disperInfos == null)
        {
            this.disperInfos = new ArrayList<>();
        }
        this.disperInfos.add(disperInfosItem);
        return this;
    }

    /**
     * Get disperInfos
     * 
     * @return disperInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DISPER_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<DispersionInfo> getDisperInfos()
    {
        return disperInfos;
    }

    @JsonProperty(JSON_PROPERTY_DISPER_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDisperInfos(List<DispersionInfo> disperInfos)
    {
        this.disperInfos = disperInfos;
    }

    public EventNotification redTransInfos(List<RedundantTransmissionExpInfo> redTransInfos)
    {

        this.redTransInfos = redTransInfos;
        return this;
    }

    public EventNotification addRedTransInfosItem(RedundantTransmissionExpInfo redTransInfosItem)
    {
        if (this.redTransInfos == null)
        {
            this.redTransInfos = new ArrayList<>();
        }
        this.redTransInfos.add(redTransInfosItem);
        return this;
    }

    /**
     * Get redTransInfos
     * 
     * @return redTransInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_RED_TRANS_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<RedundantTransmissionExpInfo> getRedTransInfos()
    {
        return redTransInfos;
    }

    @JsonProperty(JSON_PROPERTY_RED_TRANS_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRedTransInfos(List<RedundantTransmissionExpInfo> redTransInfos)
    {
        this.redTransInfos = redTransInfos;
    }

    public EventNotification wlanInfos(List<WlanPerformanceInfo> wlanInfos)
    {

        this.wlanInfos = wlanInfos;
        return this;
    }

    public EventNotification addWlanInfosItem(WlanPerformanceInfo wlanInfosItem)
    {
        if (this.wlanInfos == null)
        {
            this.wlanInfos = new ArrayList<>();
        }
        this.wlanInfos.add(wlanInfosItem);
        return this;
    }

    /**
     * Get wlanInfos
     * 
     * @return wlanInfos
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_WLAN_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<WlanPerformanceInfo> getWlanInfos()
    {
        return wlanInfos;
    }

    @JsonProperty(JSON_PROPERTY_WLAN_INFOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWlanInfos(List<WlanPerformanceInfo> wlanInfos)
    {
        this.wlanInfos = wlanInfos;
    }

    public EventNotification smccExps(List<SmcceInfo> smccExps)
    {

        this.smccExps = smccExps;
        return this;
    }

    public EventNotification addSmccExpsItem(SmcceInfo smccExpsItem)
    {
        if (this.smccExps == null)
        {
            this.smccExps = new ArrayList<>();
        }
        this.smccExps.add(smccExpsItem);
        return this;
    }

    /**
     * Get smccExps
     * 
     * @return smccExps
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SMCC_EXPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<SmcceInfo> getSmccExps()
    {
        return smccExps;
    }

    @JsonProperty(JSON_PROPERTY_SMCC_EXPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSmccExps(List<SmcceInfo> smccExps)
    {
        this.smccExps = smccExps;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        EventNotification eventNotification = (EventNotification) o;
        return Objects.equals(this.event, eventNotification.event) && Objects.equals(this.start, eventNotification.start)
               && Objects.equals(this.expiry, eventNotification.expiry) && Objects.equals(this.timeStampGen, eventNotification.timeStampGen)
               && Objects.equals(this.failNotifyCode, eventNotification.failNotifyCode) && Objects.equals(this.rvWaitTime, eventNotification.rvWaitTime)
               && Objects.equals(this.anaMetaInfo, eventNotification.anaMetaInfo) && Objects.equals(this.nfLoadLevelInfos, eventNotification.nfLoadLevelInfos)
               && Objects.equals(this.nsiLoadLevelInfos, eventNotification.nsiLoadLevelInfos)
               && Objects.equals(this.sliceLoadLevelInfo, eventNotification.sliceLoadLevelInfo) && Objects.equals(this.svcExps, eventNotification.svcExps)
               && Objects.equals(this.qosSustainInfos, eventNotification.qosSustainInfos) && Objects.equals(this.ueComms, eventNotification.ueComms)
               && Objects.equals(this.ueMobs, eventNotification.ueMobs) && Objects.equals(this.userDataCongInfos, eventNotification.userDataCongInfos)
               && Objects.equals(this.abnorBehavrs, eventNotification.abnorBehavrs) && Objects.equals(this.nwPerfs, eventNotification.nwPerfs)
               && Objects.equals(this.dnPerfInfos, eventNotification.dnPerfInfos) && Objects.equals(this.disperInfos, eventNotification.disperInfos)
               && Objects.equals(this.redTransInfos, eventNotification.redTransInfos) && Objects.equals(this.wlanInfos, eventNotification.wlanInfos)
               && Objects.equals(this.smccExps, eventNotification.smccExps);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(event,
                            start,
                            expiry,
                            timeStampGen,
                            failNotifyCode,
                            rvWaitTime,
                            anaMetaInfo,
                            nfLoadLevelInfos,
                            nsiLoadLevelInfos,
                            sliceLoadLevelInfo,
                            svcExps,
                            qosSustainInfos,
                            ueComms,
                            ueMobs,
                            userDataCongInfos,
                            abnorBehavrs,
                            nwPerfs,
                            dnPerfInfos,
                            disperInfos,
                            redTransInfos,
                            wlanInfos,
                            smccExps);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class EventNotification {\n");
        sb.append("    event: ").append(toIndentedString(event)).append("\n");
        sb.append("    start: ").append(toIndentedString(start)).append("\n");
        sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
        sb.append("    timeStampGen: ").append(toIndentedString(timeStampGen)).append("\n");
        sb.append("    failNotifyCode: ").append(toIndentedString(failNotifyCode)).append("\n");
        sb.append("    rvWaitTime: ").append(toIndentedString(rvWaitTime)).append("\n");
        sb.append("    anaMetaInfo: ").append(toIndentedString(anaMetaInfo)).append("\n");
        sb.append("    nfLoadLevelInfos: ").append(toIndentedString(nfLoadLevelInfos)).append("\n");
        sb.append("    nsiLoadLevelInfos: ").append(toIndentedString(nsiLoadLevelInfos)).append("\n");
        sb.append("    sliceLoadLevelInfo: ").append(toIndentedString(sliceLoadLevelInfo)).append("\n");
        sb.append("    svcExps: ").append(toIndentedString(svcExps)).append("\n");
        sb.append("    qosSustainInfos: ").append(toIndentedString(qosSustainInfos)).append("\n");
        sb.append("    ueComms: ").append(toIndentedString(ueComms)).append("\n");
        sb.append("    ueMobs: ").append(toIndentedString(ueMobs)).append("\n");
        sb.append("    userDataCongInfos: ").append(toIndentedString(userDataCongInfos)).append("\n");
        sb.append("    abnorBehavrs: ").append(toIndentedString(abnorBehavrs)).append("\n");
        sb.append("    nwPerfs: ").append(toIndentedString(nwPerfs)).append("\n");
        sb.append("    dnPerfInfos: ").append(toIndentedString(dnPerfInfos)).append("\n");
        sb.append("    disperInfos: ").append(toIndentedString(disperInfos)).append("\n");
        sb.append("    redTransInfos: ").append(toIndentedString(redTransInfos)).append("\n");
        sb.append("    wlanInfos: ").append(toIndentedString(wlanInfos)).append("\n");
        sb.append("    smccExps: ").append(toIndentedString(smccExps)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
