/*
 * N32 Handshake API
 * N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29573.n32.handshake;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * API URI to IE mapping on which the protection policy needs to be applied
 */
@ApiModel(description = "API URI to IE mapping on which the protection policy needs to be applied")
@JsonPropertyOrder({ ApiIeMapping.JSON_PROPERTY_API_SIGNATURE, ApiIeMapping.JSON_PROPERTY_API_METHOD, ApiIeMapping.JSON_PROPERTY_IE_LIST })
public class ApiIeMapping
{
    public static final String JSON_PROPERTY_API_SIGNATURE = "apiSignature";
    private ApiSignature apiSignature;

    public static final String JSON_PROPERTY_API_METHOD = "apiMethod";
    private String apiMethod;

    public static final String JSON_PROPERTY_IE_LIST = "IeList";
    private List<IeInfo> ieList = new ArrayList<>();

    public ApiIeMapping()
    {
    }

    public ApiIeMapping apiSignature(ApiSignature apiSignature)
    {

        this.apiSignature = apiSignature;
        return this;
    }

    /**
     * Get apiSignature
     * 
     * @return apiSignature
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_API_SIGNATURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ApiSignature getApiSignature()
    {
        return apiSignature;
    }

    @JsonProperty(JSON_PROPERTY_API_SIGNATURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setApiSignature(ApiSignature apiSignature)
    {
        this.apiSignature = apiSignature;
    }

    public ApiIeMapping apiMethod(String apiMethod)
    {

        this.apiMethod = apiMethod;
        return this;
    }

    /**
     * Enumeration of HTTP methods
     * 
     * @return apiMethod
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Enumeration of HTTP methods")
    @JsonProperty(JSON_PROPERTY_API_METHOD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getApiMethod()
    {
        return apiMethod;
    }

    @JsonProperty(JSON_PROPERTY_API_METHOD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setApiMethod(String apiMethod)
    {
        this.apiMethod = apiMethod;
    }

    public ApiIeMapping ieList(List<IeInfo> ieList)
    {

        this.ieList = ieList;
        return this;
    }

    public ApiIeMapping addIeListItem(IeInfo ieListItem)
    {
        this.ieList.add(ieListItem);
        return this;
    }

    /**
     * Get ieList
     * 
     * @return ieList
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_IE_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<IeInfo> getIeList()
    {
        return ieList;
    }

    @JsonProperty(JSON_PROPERTY_IE_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIeList(List<IeInfo> ieList)
    {
        this.ieList = ieList;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ApiIeMapping apiIeMapping = (ApiIeMapping) o;
        return Objects.equals(this.apiSignature, apiIeMapping.apiSignature) && Objects.equals(this.apiMethod, apiIeMapping.apiMethod)
               && Objects.equals(this.ieList, apiIeMapping.ieList);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(apiSignature, apiMethod, ieList);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApiIeMapping {\n");
        sb.append("    apiSignature: ").append(toIndentedString(apiSignature)).append("\n");
        sb.append("    apiMethod: ").append(toIndentedString(apiMethod)).append("\n");
        sb.append("    ieList: ").append(toIndentedString(ieList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
