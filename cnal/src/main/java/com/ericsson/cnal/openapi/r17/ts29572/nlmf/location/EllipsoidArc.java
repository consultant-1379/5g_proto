/*
 * LMF Location
 * LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29572.nlmf.location;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Ellipsoid Arc.
 */
@ApiModel(description = "Ellipsoid Arc.")
@JsonPropertyOrder({ EllipsoidArc.JSON_PROPERTY_POINT,
                     EllipsoidArc.JSON_PROPERTY_INNER_RADIUS,
                     EllipsoidArc.JSON_PROPERTY_UNCERTAINTY_RADIUS,
                     EllipsoidArc.JSON_PROPERTY_OFFSET_ANGLE,
                     EllipsoidArc.JSON_PROPERTY_INCLUDED_ANGLE,
                     EllipsoidArc.JSON_PROPERTY_CONFIDENCE })
@JsonIgnoreProperties(value = "shape", // ignore manually set shape, it will be automatically generated by Jackson
                                       // during serialization
                      allowSetters = true // allows the shape to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "shape", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = EllipsoidArc.class, name = "ELLIPSOID_ARC"),
                @JsonSubTypes.Type(value = Local2dPointUncertaintyEllipse.class, name = "LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Local3dPointUncertaintyEllipsoid.class, name = "LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID"),
                @JsonSubTypes.Type(value = Point.class, name = "POINT"),
                @JsonSubTypes.Type(value = PointAltitude.class, name = "POINT_ALTITUDE"),
                @JsonSubTypes.Type(value = PointAltitudeUncertainty.class, name = "POINT_ALTITUDE_UNCERTAINTY"),
                @JsonSubTypes.Type(value = PointUncertaintyCircle.class, name = "POINT_UNCERTAINTY_CIRCLE"),
                @JsonSubTypes.Type(value = PointUncertaintyEllipse.class, name = "POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Polygon.class, name = "POLYGON"), })

public class EllipsoidArc extends GADShape
{
    public static final String JSON_PROPERTY_POINT = "point";
    private GeographicalCoordinates point;

    public static final String JSON_PROPERTY_INNER_RADIUS = "innerRadius";
    private Integer innerRadius;

    public static final String JSON_PROPERTY_UNCERTAINTY_RADIUS = "uncertaintyRadius";
    private Float uncertaintyRadius;

    public static final String JSON_PROPERTY_OFFSET_ANGLE = "offsetAngle";
    private Integer offsetAngle;

    public static final String JSON_PROPERTY_INCLUDED_ANGLE = "includedAngle";
    private Integer includedAngle;

    public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
    private Integer confidence;

    public EllipsoidArc()
    {

    }

    public EllipsoidArc point(GeographicalCoordinates point)
    {

        this.point = point;
        return this;
    }

    /**
     * Get point
     * 
     * @return point
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public GeographicalCoordinates getPoint()
    {
        return point;
    }

    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPoint(GeographicalCoordinates point)
    {
        this.point = point;
    }

    public EllipsoidArc innerRadius(Integer innerRadius)
    {

        this.innerRadius = innerRadius;
        return this;
    }

    /**
     * Indicates value of the inner radius. minimum: 0 maximum: 327675
     * 
     * @return innerRadius
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of the inner radius.")
    @JsonProperty(JSON_PROPERTY_INNER_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getInnerRadius()
    {
        return innerRadius;
    }

    @JsonProperty(JSON_PROPERTY_INNER_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInnerRadius(Integer innerRadius)
    {
        this.innerRadius = innerRadius;
    }

    public EllipsoidArc uncertaintyRadius(Float uncertaintyRadius)
    {

        this.uncertaintyRadius = uncertaintyRadius;
        return this;
    }

    /**
     * Indicates value of uncertainty. minimum: 0
     * 
     * @return uncertaintyRadius
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of uncertainty.")
    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getUncertaintyRadius()
    {
        return uncertaintyRadius;
    }

    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_RADIUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUncertaintyRadius(Float uncertaintyRadius)
    {
        this.uncertaintyRadius = uncertaintyRadius;
    }

    public EllipsoidArc offsetAngle(Integer offsetAngle)
    {

        this.offsetAngle = offsetAngle;
        return this;
    }

    /**
     * Indicates value of angle. minimum: 0 maximum: 360
     * 
     * @return offsetAngle
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of angle.")
    @JsonProperty(JSON_PROPERTY_OFFSET_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getOffsetAngle()
    {
        return offsetAngle;
    }

    @JsonProperty(JSON_PROPERTY_OFFSET_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOffsetAngle(Integer offsetAngle)
    {
        this.offsetAngle = offsetAngle;
    }

    public EllipsoidArc includedAngle(Integer includedAngle)
    {

        this.includedAngle = includedAngle;
        return this;
    }

    /**
     * Indicates value of angle. minimum: 0 maximum: 360
     * 
     * @return includedAngle
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of angle.")
    @JsonProperty(JSON_PROPERTY_INCLUDED_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getIncludedAngle()
    {
        return includedAngle;
    }

    @JsonProperty(JSON_PROPERTY_INCLUDED_ANGLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIncludedAngle(Integer includedAngle)
    {
        this.includedAngle = includedAngle;
    }

    public EllipsoidArc confidence(Integer confidence)
    {

        this.confidence = confidence;
        return this;
    }

    /**
     * Indicates value of confidence. minimum: 0 maximum: 100
     * 
     * @return confidence
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of confidence.")
    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getConfidence()
    {
        return confidence;
    }

    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConfidence(Integer confidence)
    {
        this.confidence = confidence;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        EllipsoidArc ellipsoidArc = (EllipsoidArc) o;
        return Objects.equals(this.point, ellipsoidArc.point) && Objects.equals(this.innerRadius, ellipsoidArc.innerRadius)
               && Objects.equals(this.uncertaintyRadius, ellipsoidArc.uncertaintyRadius) && Objects.equals(this.offsetAngle, ellipsoidArc.offsetAngle)
               && Objects.equals(this.includedAngle, ellipsoidArc.includedAngle) && Objects.equals(this.confidence, ellipsoidArc.confidence) && super.equals(o);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(point, innerRadius, uncertaintyRadius, offsetAngle, includedAngle, confidence, super.hashCode());
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class EllipsoidArc {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    point: ").append(toIndentedString(point)).append("\n");
        sb.append("    innerRadius: ").append(toIndentedString(innerRadius)).append("\n");
        sb.append("    uncertaintyRadius: ").append(toIndentedString(uncertaintyRadius)).append("\n");
        sb.append("    offsetAngle: ").append(toIndentedString(offsetAngle)).append("\n");
        sb.append("    includedAngle: ").append(toIndentedString(includedAngle)).append("\n");
        sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
