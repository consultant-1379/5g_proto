/*
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29562.nhss.imssdm;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains the conditions that should be checked in order to find out if an
 * Application Server should be contacted or not
 */
@ApiModel(description = "Contains the conditions that should be checked in order to find out if an Application Server should be contacted or not ")
@JsonPropertyOrder({ TriggerPoint.JSON_PROPERTY_CONDITION_TYPE, TriggerPoint.JSON_PROPERTY_SPT_LIST })
public class TriggerPoint
{
    public static final String JSON_PROPERTY_CONDITION_TYPE = "conditionType";
    private String conditionType;

    public static final String JSON_PROPERTY_SPT_LIST = "sptList";
    private List<Spt> sptList = new ArrayList<>();

    public TriggerPoint()
    {
    }

    public TriggerPoint conditionType(String conditionType)
    {

        this.conditionType = conditionType;
        return this;
    }

    /**
     * Represents the type of condition to be applied to the logical expression of
     * SPT groups and SPTs (Conjunctive Normal Form, or Disjunctive Normal Form)
     * 
     * @return conditionType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Represents the type of condition to be applied to the logical expression of SPT groups and SPTs (Conjunctive Normal Form, or Disjunctive Normal Form) ")
    @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getConditionType()
    {
        return conditionType;
    }

    @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConditionType(String conditionType)
    {
        this.conditionType = conditionType;
    }

    public TriggerPoint sptList(List<Spt> sptList)
    {

        this.sptList = sptList;
        return this;
    }

    public TriggerPoint addSptListItem(Spt sptListItem)
    {
        this.sptList.add(sptListItem);
        return this;
    }

    /**
     * Get sptList
     * 
     * @return sptList
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_SPT_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<Spt> getSptList()
    {
        return sptList;
    }

    @JsonProperty(JSON_PROPERTY_SPT_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSptList(List<Spt> sptList)
    {
        this.sptList = sptList;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        TriggerPoint triggerPoint = (TriggerPoint) o;
        return Objects.equals(this.conditionType, triggerPoint.conditionType) && Objects.equals(this.sptList, triggerPoint.sptList);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(conditionType, sptList);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class TriggerPoint {\n");
        sb.append("    conditionType: ").append(toIndentedString(conditionType)).append("\n");
        sb.append("    sptList: ").append(toIndentedString(sptList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
