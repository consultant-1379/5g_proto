/*
 * N32 Handshake API
 * N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29573.n32.handshake;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Indicates the intended N32 establishment purpose
 */
@ApiModel(description = "Indicates the intended N32 establishment purpose")
@JsonPropertyOrder({ IntendedN32Purpose.JSON_PROPERTY_USAGE_PURPOSE, IntendedN32Purpose.JSON_PROPERTY_ADDITIONAL_INFO, IntendedN32Purpose.JSON_PROPERTY_CAUSE })
public class IntendedN32Purpose
{
    public static final String JSON_PROPERTY_USAGE_PURPOSE = "usagePurpose";
    private String usagePurpose;

    public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
    private String additionalInfo;

    public static final String JSON_PROPERTY_CAUSE = "cause";
    private String cause;

    public IntendedN32Purpose()
    {
    }

    public IntendedN32Purpose usagePurpose(String usagePurpose)
    {

        this.usagePurpose = usagePurpose;
        return this;
    }

    /**
     * Usage purpose of establishing N32 connectivity
     * 
     * @return usagePurpose
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Usage purpose of establishing N32 connectivity")
    @JsonProperty(JSON_PROPERTY_USAGE_PURPOSE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getUsagePurpose()
    {
        return usagePurpose;
    }

    @JsonProperty(JSON_PROPERTY_USAGE_PURPOSE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUsagePurpose(String usagePurpose)
    {
        this.usagePurpose = usagePurpose;
    }

    public IntendedN32Purpose additionalInfo(String additionalInfo)
    {

        this.additionalInfo = additionalInfo;
        return this;
    }

    /**
     * Get additionalInfo
     * 
     * @return additionalInfo
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getAdditionalInfo()
    {
        return additionalInfo;
    }

    @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAdditionalInfo(String additionalInfo)
    {
        this.additionalInfo = additionalInfo;
    }

    public IntendedN32Purpose cause(String cause)
    {

        this.cause = cause;
        return this;
    }

    /**
     * Get cause
     * 
     * @return cause
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_CAUSE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCause()
    {
        return cause;
    }

    @JsonProperty(JSON_PROPERTY_CAUSE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCause(String cause)
    {
        this.cause = cause;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        IntendedN32Purpose intendedN32Purpose = (IntendedN32Purpose) o;
        return Objects.equals(this.usagePurpose, intendedN32Purpose.usagePurpose) && Objects.equals(this.additionalInfo, intendedN32Purpose.additionalInfo)
               && Objects.equals(this.cause, intendedN32Purpose.cause);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(usagePurpose, additionalInfo, cause);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class IntendedN32Purpose {\n");
        sb.append("    usagePurpose: ").append(toIndentedString(usagePurpose)).append("\n");
        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
