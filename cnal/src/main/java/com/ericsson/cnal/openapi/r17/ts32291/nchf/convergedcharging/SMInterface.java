/*
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 3.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts32291.nchf.convergedcharging;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SMInterface
 */
@JsonPropertyOrder({ SMInterface.JSON_PROPERTY_INTERFACE_ID,
                     SMInterface.JSON_PROPERTY_INTERFACE_TEXT,
                     SMInterface.JSON_PROPERTY_INTERFACE_PORT,
                     SMInterface.JSON_PROPERTY_INTERFACE_TYPE })
public class SMInterface
{
    public static final String JSON_PROPERTY_INTERFACE_ID = "interfaceId";
    private String interfaceId;

    public static final String JSON_PROPERTY_INTERFACE_TEXT = "interfaceText";
    private String interfaceText;

    public static final String JSON_PROPERTY_INTERFACE_PORT = "interfacePort";
    private String interfacePort;

    public static final String JSON_PROPERTY_INTERFACE_TYPE = "interfaceType";
    private String interfaceType;

    public SMInterface()
    {
    }

    public SMInterface interfaceId(String interfaceId)
    {

        this.interfaceId = interfaceId;
        return this;
    }

    /**
     * Get interfaceId
     * 
     * @return interfaceId
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_INTERFACE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInterfaceId()
    {
        return interfaceId;
    }

    @JsonProperty(JSON_PROPERTY_INTERFACE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInterfaceId(String interfaceId)
    {
        this.interfaceId = interfaceId;
    }

    public SMInterface interfaceText(String interfaceText)
    {

        this.interfaceText = interfaceText;
        return this;
    }

    /**
     * Get interfaceText
     * 
     * @return interfaceText
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_INTERFACE_TEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInterfaceText()
    {
        return interfaceText;
    }

    @JsonProperty(JSON_PROPERTY_INTERFACE_TEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInterfaceText(String interfaceText)
    {
        this.interfaceText = interfaceText;
    }

    public SMInterface interfacePort(String interfacePort)
    {

        this.interfacePort = interfacePort;
        return this;
    }

    /**
     * Get interfacePort
     * 
     * @return interfacePort
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_INTERFACE_PORT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInterfacePort()
    {
        return interfacePort;
    }

    @JsonProperty(JSON_PROPERTY_INTERFACE_PORT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInterfacePort(String interfacePort)
    {
        this.interfacePort = interfacePort;
    }

    public SMInterface interfaceType(String interfaceType)
    {

        this.interfaceType = interfaceType;
        return this;
    }

    /**
     * Get interfaceType
     * 
     * @return interfaceType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_INTERFACE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInterfaceType()
    {
        return interfaceType;
    }

    @JsonProperty(JSON_PROPERTY_INTERFACE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInterfaceType(String interfaceType)
    {
        this.interfaceType = interfaceType;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        SMInterface smInterface = (SMInterface) o;
        return Objects.equals(this.interfaceId, smInterface.interfaceId) && Objects.equals(this.interfaceText, smInterface.interfaceText)
               && Objects.equals(this.interfacePort, smInterface.interfacePort) && Objects.equals(this.interfaceType, smInterface.interfaceType);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(interfaceId, interfaceText, interfacePort, interfaceType);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class SMInterface {\n");
        sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
        sb.append("    interfaceText: ").append(toIndentedString(interfaceText)).append("\n");
        sb.append("    interfacePort: ").append(toIndentedString(interfacePort)).append("\n");
        sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
