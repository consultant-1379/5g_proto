/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Extensions to the Snssai data type, sdRanges and wildcardSd shall not be
 * present simultaneously
 */
@ApiModel(description = "Extensions to the Snssai data type, sdRanges and wildcardSd shall not be present simultaneously ")
@JsonPropertyOrder({ SnssaiExtension.JSON_PROPERTY_SD_RANGES, SnssaiExtension.JSON_PROPERTY_WILDCARD_SD })
public class SnssaiExtension
{
    public static final String JSON_PROPERTY_SD_RANGES = "sdRanges";
    private List<SdRange> sdRanges = null;

    /**
     * When present, it shall be set to true, to indicate that all SD values are
     * supported for the Slice/Service Type value indicated in the sst attribute of
     * the Snssai data type.
     */
    public enum WildcardSdEnum
    {
        TRUE(true);

        private Boolean value;

        WildcardSdEnum(Boolean value)
        {
            this.value = value;
        }

        @JsonValue
        public Boolean getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static WildcardSdEnum fromValue(Boolean value)
        {
            for (WildcardSdEnum b : WildcardSdEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_WILDCARD_SD = "wildcardSd";
    private WildcardSdEnum wildcardSd;

    public SnssaiExtension()
    {
    }

    public SnssaiExtension sdRanges(List<SdRange> sdRanges)
    {

        this.sdRanges = sdRanges;
        return this;
    }

    public SnssaiExtension addSdRangesItem(SdRange sdRangesItem)
    {
        if (this.sdRanges == null)
        {
            this.sdRanges = new ArrayList<>();
        }
        this.sdRanges.add(sdRangesItem);
        return this;
    }

    /**
     * When present, it shall contain the range(s) of Slice Differentiator values
     * supported for the Slice/Service Type value indicated in the sst attribute of
     * the Snssai data type
     * 
     * @return sdRanges
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type ")
    @JsonProperty(JSON_PROPERTY_SD_RANGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<SdRange> getSdRanges()
    {
        return sdRanges;
    }

    @JsonProperty(JSON_PROPERTY_SD_RANGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSdRanges(List<SdRange> sdRanges)
    {
        this.sdRanges = sdRanges;
    }

    public SnssaiExtension wildcardSd(WildcardSdEnum wildcardSd)
    {

        this.wildcardSd = wildcardSd;
        return this;
    }

    /**
     * When present, it shall be set to true, to indicate that all SD values are
     * supported for the Slice/Service Type value indicated in the sst attribute of
     * the Snssai data type.
     * 
     * @return wildcardSd
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type. ")
    @JsonProperty(JSON_PROPERTY_WILDCARD_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public WildcardSdEnum getWildcardSd()
    {
        return wildcardSd;
    }

    @JsonProperty(JSON_PROPERTY_WILDCARD_SD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWildcardSd(WildcardSdEnum wildcardSd)
    {
        this.wildcardSd = wildcardSd;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        SnssaiExtension snssaiExtension = (SnssaiExtension) o;
        return Objects.equals(this.sdRanges, snssaiExtension.sdRanges) && Objects.equals(this.wildcardSd, snssaiExtension.wildcardSd);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(sdRanges, wildcardSd);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class SnssaiExtension {\n");
        sb.append("    sdRanges: ").append(toIndentedString(sdRanges)).append("\n");
        sb.append("    wildcardSd: ").append(toIndentedString(wildcardSd)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
