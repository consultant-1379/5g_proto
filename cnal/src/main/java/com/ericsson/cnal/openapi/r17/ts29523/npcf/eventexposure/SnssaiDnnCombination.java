/*
 * Npcf_EventExposure
 * PCF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29523.npcf.eventexposure;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29571.commondata.Snssai;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents a combination of S-NSSAI and DNN(s).
 */
@ApiModel(description = "Represents a combination of S-NSSAI and DNN(s).")
@JsonPropertyOrder({ SnssaiDnnCombination.JSON_PROPERTY_SNSSAI, SnssaiDnnCombination.JSON_PROPERTY_DNNS })
public class SnssaiDnnCombination
{
    public static final String JSON_PROPERTY_SNSSAI = "snssai";
    private Snssai snssai;

    public static final String JSON_PROPERTY_DNNS = "dnns";
    private List<String> dnns = null;

    public SnssaiDnnCombination()
    {
    }

    public SnssaiDnnCombination snssai(Snssai snssai)
    {

        this.snssai = snssai;
        return this;
    }

    /**
     * Get snssai
     * 
     * @return snssai
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SNSSAI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Snssai getSnssai()
    {
        return snssai;
    }

    @JsonProperty(JSON_PROPERTY_SNSSAI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSnssai(Snssai snssai)
    {
        this.snssai = snssai;
    }

    public SnssaiDnnCombination dnns(List<String> dnns)
    {

        this.dnns = dnns;
        return this;
    }

    public SnssaiDnnCombination addDnnsItem(String dnnsItem)
    {
        if (this.dnns == null)
        {
            this.dnns = new ArrayList<>();
        }
        this.dnns.add(dnnsItem);
        return this;
    }

    /**
     * Get dnns
     * 
     * @return dnns
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DNNS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getDnns()
    {
        return dnns;
    }

    @JsonProperty(JSON_PROPERTY_DNNS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDnns(List<String> dnns)
    {
        this.dnns = dnns;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        SnssaiDnnCombination snssaiDnnCombination = (SnssaiDnnCombination) o;
        return Objects.equals(this.snssai, snssaiDnnCombination.snssai) && Objects.equals(this.dnns, snssaiDnnCombination.dnns);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(snssai, dnns);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class SnssaiDnnCombination {\n");
        sb.append("    snssai: ").append(toIndentedString(snssai)).append("\n");
        sb.append("    dnns: ").append(toIndentedString(dnns)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
