/*
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: -
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29519.policy.data;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains the modified network slice specific policy control information.
 */
@ApiModel(description = "Contains the modified network slice specific policy control information.")
@JsonPropertyOrder({ SlicePolicyDataPatch.JSON_PROPERTY_REMAIN_MBR_UL, SlicePolicyDataPatch.JSON_PROPERTY_REMAIN_MBR_DL })
public class SlicePolicyDataPatch
{
    public static final String JSON_PROPERTY_REMAIN_MBR_UL = "remainMbrUl";
    private String remainMbrUl;

    public static final String JSON_PROPERTY_REMAIN_MBR_DL = "remainMbrDl";
    private String remainMbrDl;

    public SlicePolicyDataPatch()
    {
    }

    public SlicePolicyDataPatch remainMbrUl(String remainMbrUl)
    {

        this.remainMbrUl = remainMbrUl;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return remainMbrUl
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_REMAIN_MBR_UL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getRemainMbrUl()
    {
        return remainMbrUl;
    }

    @JsonProperty(JSON_PROPERTY_REMAIN_MBR_UL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRemainMbrUl(String remainMbrUl)
    {
        this.remainMbrUl = remainMbrUl;
    }

    public SlicePolicyDataPatch remainMbrDl(String remainMbrDl)
    {

        this.remainMbrDl = remainMbrDl;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return remainMbrDl
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_REMAIN_MBR_DL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getRemainMbrDl()
    {
        return remainMbrDl;
    }

    @JsonProperty(JSON_PROPERTY_REMAIN_MBR_DL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRemainMbrDl(String remainMbrDl)
    {
        this.remainMbrDl = remainMbrDl;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        SlicePolicyDataPatch slicePolicyDataPatch = (SlicePolicyDataPatch) o;
        return Objects.equals(this.remainMbrUl, slicePolicyDataPatch.remainMbrUl) && Objects.equals(this.remainMbrDl, slicePolicyDataPatch.remainMbrDl);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(remainMbrUl, remainMbrDl);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class SlicePolicyDataPatch {\n");
        sb.append("    remainMbrUl: ").append(toIndentedString(remainMbrUl)).append("\n");
        sb.append("    remainMbrDl: ").append(toIndentedString(remainMbrDl)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
