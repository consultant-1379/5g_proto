/*
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29510.nnrf.nfmanagement;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Subscription to a set of NFs based on their Group Ids
 */
@ApiModel(description = "Subscription to a set of NFs based on their Group Ids")
@JsonPropertyOrder({ NfGroupListCond.JSON_PROPERTY_CONDITION_TYPE, NfGroupListCond.JSON_PROPERTY_NF_TYPE, NfGroupListCond.JSON_PROPERTY_NF_GROUP_ID_LIST })
public class NfGroupListCond
{
    /**
     * Gets or Sets conditionType
     */
    public enum ConditionTypeEnum
    {
        NF_GROUP_LIST_COND("NF_GROUP_LIST_COND");

        private String value;

        ConditionTypeEnum(String value)
        {
            this.value = value;
        }

        @JsonValue
        public String getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ConditionTypeEnum fromValue(String value)
        {
            for (ConditionTypeEnum b : ConditionTypeEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_CONDITION_TYPE = "conditionType";
    private ConditionTypeEnum conditionType;

    /**
     * Gets or Sets nfType
     */
    public enum NfTypeEnum
    {
        UDM("UDM"),

        AUSF("AUSF"),

        UDR("UDR"),

        PCF("PCF"),

        CHF("CHF"),

        HSS("HSS");

        private String value;

        NfTypeEnum(String value)
        {
            this.value = value;
        }

        @JsonValue
        public String getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static NfTypeEnum fromValue(String value)
        {
            for (NfTypeEnum b : NfTypeEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_NF_TYPE = "nfType";
    private NfTypeEnum nfType;

    public static final String JSON_PROPERTY_NF_GROUP_ID_LIST = "nfGroupIdList";
    private List<String> nfGroupIdList = new ArrayList<>();

    public NfGroupListCond()
    {
    }

    public NfGroupListCond conditionType(ConditionTypeEnum conditionType)
    {

        this.conditionType = conditionType;
        return this;
    }

    /**
     * Get conditionType
     * 
     * @return conditionType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ConditionTypeEnum getConditionType()
    {
        return conditionType;
    }

    @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConditionType(ConditionTypeEnum conditionType)
    {
        this.conditionType = conditionType;
    }

    public NfGroupListCond nfType(NfTypeEnum nfType)
    {

        this.nfType = nfType;
        return this;
    }

    /**
     * Get nfType
     * 
     * @return nfType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_NF_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public NfTypeEnum getNfType()
    {
        return nfType;
    }

    @JsonProperty(JSON_PROPERTY_NF_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNfType(NfTypeEnum nfType)
    {
        this.nfType = nfType;
    }

    public NfGroupListCond nfGroupIdList(List<String> nfGroupIdList)
    {

        this.nfGroupIdList = nfGroupIdList;
        return this;
    }

    public NfGroupListCond addNfGroupIdListItem(String nfGroupIdListItem)
    {
        this.nfGroupIdList.add(nfGroupIdListItem);
        return this;
    }

    /**
     * Get nfGroupIdList
     * 
     * @return nfGroupIdList
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_NF_GROUP_ID_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<String> getNfGroupIdList()
    {
        return nfGroupIdList;
    }

    @JsonProperty(JSON_PROPERTY_NF_GROUP_ID_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNfGroupIdList(List<String> nfGroupIdList)
    {
        this.nfGroupIdList = nfGroupIdList;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        NfGroupListCond nfGroupListCond = (NfGroupListCond) o;
        return Objects.equals(this.conditionType, nfGroupListCond.conditionType) && Objects.equals(this.nfType, nfGroupListCond.nfType)
               && Objects.equals(this.nfGroupIdList, nfGroupListCond.nfGroupIdList);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(conditionType, nfType, nfGroupIdList);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class NfGroupListCond {\n");
        sb.append("    conditionType: ").append(toIndentedString(conditionType)).append("\n");
        sb.append("    nfType: ").append(toIndentedString(nfType)).append("\n");
        sb.append("    nfGroupIdList: ").append(toIndentedString(nfGroupIdList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
