/*
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents other DN performance analytics requirements.
 */
@ApiModel(description = "Represents other DN performance analytics requirements.")
@JsonPropertyOrder({ DnPerformanceReq.JSON_PROPERTY_DN_PERF_ORDER_CRITER,
                     DnPerformanceReq.JSON_PROPERTY_ORDER,
                     DnPerformanceReq.JSON_PROPERTY_REPORT_THRESHOLDS })
public class DnPerformanceReq
{
    public static final String JSON_PROPERTY_DN_PERF_ORDER_CRITER = "dnPerfOrderCriter";
    private String dnPerfOrderCriter;

    public static final String JSON_PROPERTY_ORDER = "order";
    private String order;

    public static final String JSON_PROPERTY_REPORT_THRESHOLDS = "reportThresholds";
    private List<ThresholdLevel> reportThresholds = null;

    public DnPerformanceReq()
    {
    }

    public DnPerformanceReq dnPerfOrderCriter(String dnPerfOrderCriter)
    {

        this.dnPerfOrderCriter = dnPerfOrderCriter;
        return this;
    }

    /**
     * Possible values are: - AVERAGE_TRAFFIC_RATE: Indicates the average traffic
     * rate. - MAXIMUM_TRAFFIC_RATE: Indicates the maximum traffic rate. -
     * AVERAGE_PACKET_DELAY: Indicates the average packet delay. -
     * MAXIMUM_PACKET_DELAY: Indicates the maximum packet delay. -
     * AVERAGE_PACKET_LOSS_RATE: Indicates the average packet loss rate.
     * 
     * @return dnPerfOrderCriter
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Possible values are:   - AVERAGE_TRAFFIC_RATE: Indicates the average traffic rate.   - MAXIMUM_TRAFFIC_RATE: Indicates the maximum traffic rate.   - AVERAGE_PACKET_DELAY: Indicates the average packet delay.   - MAXIMUM_PACKET_DELAY: Indicates the maximum packet delay.   - AVERAGE_PACKET_LOSS_RATE: Indicates the average packet loss rate. ")
    @JsonProperty(JSON_PROPERTY_DN_PERF_ORDER_CRITER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDnPerfOrderCriter()
    {
        return dnPerfOrderCriter;
    }

    @JsonProperty(JSON_PROPERTY_DN_PERF_ORDER_CRITER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDnPerfOrderCriter(String dnPerfOrderCriter)
    {
        this.dnPerfOrderCriter = dnPerfOrderCriter;
    }

    public DnPerformanceReq order(String order)
    {

        this.order = order;
        return this;
    }

    /**
     * Possible values are: - ASCENDING: Threshold is crossed in ascending
     * direction. - DESCENDING: Threshold is crossed in descending direction. -
     * CROSSED: Threshold is crossed either in ascending or descending direction.
     * 
     * @return order
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Possible values are: - ASCENDING: Threshold is crossed in ascending direction. - DESCENDING: Threshold is crossed in descending direction. - CROSSED: Threshold is crossed either in ascending or descending direction. ")
    @JsonProperty(JSON_PROPERTY_ORDER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getOrder()
    {
        return order;
    }

    @JsonProperty(JSON_PROPERTY_ORDER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOrder(String order)
    {
        this.order = order;
    }

    public DnPerformanceReq reportThresholds(List<ThresholdLevel> reportThresholds)
    {

        this.reportThresholds = reportThresholds;
        return this;
    }

    public DnPerformanceReq addReportThresholdsItem(ThresholdLevel reportThresholdsItem)
    {
        if (this.reportThresholds == null)
        {
            this.reportThresholds = new ArrayList<>();
        }
        this.reportThresholds.add(reportThresholdsItem);
        return this;
    }

    /**
     * Get reportThresholds
     * 
     * @return reportThresholds
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_REPORT_THRESHOLDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<ThresholdLevel> getReportThresholds()
    {
        return reportThresholds;
    }

    @JsonProperty(JSON_PROPERTY_REPORT_THRESHOLDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReportThresholds(List<ThresholdLevel> reportThresholds)
    {
        this.reportThresholds = reportThresholds;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        DnPerformanceReq dnPerformanceReq = (DnPerformanceReq) o;
        return Objects.equals(this.dnPerfOrderCriter, dnPerformanceReq.dnPerfOrderCriter) && Objects.equals(this.order, dnPerformanceReq.order)
               && Objects.equals(this.reportThresholds, dnPerformanceReq.reportThresholds);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(dnPerfOrderCriter, order, reportThresholds);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class DnPerformanceReq {\n");
        sb.append("    dnPerfOrderCriter: ").append(toIndentedString(dnPerfOrderCriter)).append("\n");
        sb.append("    order: ").append(toIndentedString(order)).append("\n");
        sb.append("    reportThresholds: ").append(toIndentedString(reportThresholds)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
