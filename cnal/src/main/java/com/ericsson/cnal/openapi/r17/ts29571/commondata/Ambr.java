/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains the maximum aggregated uplink and downlink bit rates.
 */
@ApiModel(description = "Contains the maximum aggregated uplink and downlink bit rates.")
@JsonPropertyOrder({ Ambr.JSON_PROPERTY_UPLINK, Ambr.JSON_PROPERTY_DOWNLINK })
public class Ambr
{
    public static final String JSON_PROPERTY_UPLINK = "uplink";
    private String uplink;

    public static final String JSON_PROPERTY_DOWNLINK = "downlink";
    private String downlink;

    public Ambr()
    {
    }

    public Ambr uplink(String uplink)
    {

        this.uplink = uplink;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return uplink
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_UPLINK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getUplink()
    {
        return uplink;
    }

    @JsonProperty(JSON_PROPERTY_UPLINK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUplink(String uplink)
    {
        this.uplink = uplink;
    }

    public Ambr downlink(String downlink)
    {

        this.downlink = downlink;
        return this;
    }

    /**
     * String representing a bit rate; the prefixes follow the standard symbols from
     * The International System of Units, and represent x1000 multipliers, with the
     * exception that prefix \&quot;K\&quot; is used to represent the standard
     * symbol \&quot;k\&quot;.
     * 
     * @return downlink
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ")
    @JsonProperty(JSON_PROPERTY_DOWNLINK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getDownlink()
    {
        return downlink;
    }

    @JsonProperty(JSON_PROPERTY_DOWNLINK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDownlink(String downlink)
    {
        this.downlink = downlink;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Ambr ambr = (Ambr) o;
        return Objects.equals(this.uplink, ambr.uplink) && Objects.equals(this.downlink, ambr.downlink);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(uplink, downlink);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Ambr {\n");
        sb.append("    uplink: ").append(toIndentedString(uplink)).append("\n");
        sb.append("    downlink: ").append(toIndentedString(downlink)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
