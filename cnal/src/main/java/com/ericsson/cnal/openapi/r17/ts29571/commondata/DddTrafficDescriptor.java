/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains a Traffic Descriptor.
 */
@ApiModel(description = "Contains a Traffic Descriptor.")
@JsonPropertyOrder({ DddTrafficDescriptor.JSON_PROPERTY_IPV4_ADDR,
                     DddTrafficDescriptor.JSON_PROPERTY_IPV6_ADDR,
                     DddTrafficDescriptor.JSON_PROPERTY_PORT_NUMBER,
                     DddTrafficDescriptor.JSON_PROPERTY_MAC_ADDR })
public class DddTrafficDescriptor
{
    public static final String JSON_PROPERTY_IPV4_ADDR = "ipv4Addr";
    private String ipv4Addr;

    public static final String JSON_PROPERTY_IPV6_ADDR = "ipv6Addr";
    private String ipv6Addr;

    public static final String JSON_PROPERTY_PORT_NUMBER = "portNumber";
    private Integer portNumber;

    public static final String JSON_PROPERTY_MAC_ADDR = "macAddr";
    private String macAddr;

    public DddTrafficDescriptor()
    {
    }

    public DddTrafficDescriptor ipv4Addr(String ipv4Addr)
    {

        this.ipv4Addr = ipv4Addr;
        return this;
    }

    /**
     * String identifying a IPv4 address formatted in the &#39;dotted decimal&#39;
     * notation as defined in RFC 1166.
     * 
     * @return ipv4Addr
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(example = "198.51.100.1", value = "String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. ")
    @JsonProperty(JSON_PROPERTY_IPV4_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getIpv4Addr()
    {
        return ipv4Addr;
    }

    @JsonProperty(JSON_PROPERTY_IPV4_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIpv4Addr(String ipv4Addr)
    {
        this.ipv4Addr = ipv4Addr;
    }

    public DddTrafficDescriptor ipv6Addr(String ipv6Addr)
    {

        this.ipv6Addr = ipv6Addr;
        return this;
    }

    /**
     * Get ipv6Addr
     * 
     * @return ipv6Addr
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_IPV6_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getIpv6Addr()
    {
        return ipv6Addr;
    }

    @JsonProperty(JSON_PROPERTY_IPV6_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIpv6Addr(String ipv6Addr)
    {
        this.ipv6Addr = ipv6Addr;
    }

    public DddTrafficDescriptor portNumber(Integer portNumber)
    {

        this.portNumber = portNumber;
        return this;
    }

    /**
     * Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
     * minimum: 0
     * 
     * @return portNumber
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.")
    @JsonProperty(JSON_PROPERTY_PORT_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getPortNumber()
    {
        return portNumber;
    }

    @JsonProperty(JSON_PROPERTY_PORT_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPortNumber(Integer portNumber)
    {
        this.portNumber = portNumber;
    }

    public DddTrafficDescriptor macAddr(String macAddr)
    {

        this.macAddr = macAddr;
        return this;
    }

    /**
     * String identifying a MAC address formatted in the hexadecimal notation
     * according to clause 1.1 and clause 2.1 of RFC 7042.
     * 
     * @return macAddr
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042. ")
    @JsonProperty(JSON_PROPERTY_MAC_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getMacAddr()
    {
        return macAddr;
    }

    @JsonProperty(JSON_PROPERTY_MAC_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMacAddr(String macAddr)
    {
        this.macAddr = macAddr;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        DddTrafficDescriptor dddTrafficDescriptor = (DddTrafficDescriptor) o;
        return Objects.equals(this.ipv4Addr, dddTrafficDescriptor.ipv4Addr) && Objects.equals(this.ipv6Addr, dddTrafficDescriptor.ipv6Addr)
               && Objects.equals(this.portNumber, dddTrafficDescriptor.portNumber) && Objects.equals(this.macAddr, dddTrafficDescriptor.macAddr);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(ipv4Addr, ipv6Addr, portNumber, macAddr);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class DddTrafficDescriptor {\n");
        sb.append("    ipv4Addr: ").append(toIndentedString(ipv4Addr)).append("\n");
        sb.append("    ipv6Addr: ").append(toIndentedString(ipv6Addr)).append("\n");
        sb.append("    portNumber: ").append(toIndentedString(portNumber)).append("\n");
        sb.append("    macAddr: ").append(toIndentedString(macAddr)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
