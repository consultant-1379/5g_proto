/*
 * N32 Handshake API
 * N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29573.n32.handshake;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Information on N32-f modifications block that failed to process
 */
@ApiModel(description = "Information on N32-f modifications block that failed to process")
@JsonPropertyOrder({ FailedModificationInfo.JSON_PROPERTY_IPX_ID, FailedModificationInfo.JSON_PROPERTY_N32F_ERROR_TYPE })
public class FailedModificationInfo
{
    public static final String JSON_PROPERTY_IPX_ID = "ipxId";
    private String ipxId;

    public static final String JSON_PROPERTY_N32F_ERROR_TYPE = "n32fErrorType";
    private String n32fErrorType;

    public FailedModificationInfo()
    {
    }

    public FailedModificationInfo ipxId(String ipxId)
    {

        this.ipxId = ipxId;
        return this;
    }

    /**
     * Fully Qualified Domain Name
     * 
     * @return ipxId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Fully Qualified Domain Name")
    @JsonProperty(JSON_PROPERTY_IPX_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getIpxId()
    {
        return ipxId;
    }

    @JsonProperty(JSON_PROPERTY_IPX_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIpxId(String ipxId)
    {
        this.ipxId = ipxId;
    }

    public FailedModificationInfo n32fErrorType(String n32fErrorType)
    {

        this.n32fErrorType = n32fErrorType;
        return this;
    }

    /**
     * Type of error while processing N32-f message
     * 
     * @return n32fErrorType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Type of error while processing N32-f message")
    @JsonProperty(JSON_PROPERTY_N32F_ERROR_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getN32fErrorType()
    {
        return n32fErrorType;
    }

    @JsonProperty(JSON_PROPERTY_N32F_ERROR_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setN32fErrorType(String n32fErrorType)
    {
        this.n32fErrorType = n32fErrorType;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        FailedModificationInfo failedModificationInfo = (FailedModificationInfo) o;
        return Objects.equals(this.ipxId, failedModificationInfo.ipxId) && Objects.equals(this.n32fErrorType, failedModificationInfo.n32fErrorType);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(ipxId, n32fErrorType);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class FailedModificationInfo {\n");
        sb.append("    ipxId: ").append(toIndentedString(ipxId)).append("\n");
        sb.append("    n32fErrorType: ").append(toIndentedString(n32fErrorType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
