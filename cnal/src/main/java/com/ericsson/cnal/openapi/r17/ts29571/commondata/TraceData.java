/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * contains Trace control and configuration parameters.
 */
@ApiModel(description = "contains Trace control and configuration parameters.")
@JsonPropertyOrder({ TraceData.JSON_PROPERTY_TRACE_REF,
                     TraceData.JSON_PROPERTY_TRACE_DEPTH,
                     TraceData.JSON_PROPERTY_NE_TYPE_LIST,
                     TraceData.JSON_PROPERTY_EVENT_LIST,
                     TraceData.JSON_PROPERTY_COLLECTION_ENTITY_IPV4_ADDR,
                     TraceData.JSON_PROPERTY_COLLECTION_ENTITY_IPV6_ADDR,
                     TraceData.JSON_PROPERTY_INTERFACE_LIST })
public class TraceData
{
    public static final String JSON_PROPERTY_TRACE_REF = "traceRef";
    private String traceRef;

    public static final String JSON_PROPERTY_TRACE_DEPTH = "traceDepth";
    private String traceDepth;

    public static final String JSON_PROPERTY_NE_TYPE_LIST = "neTypeList";
    private String neTypeList;

    public static final String JSON_PROPERTY_EVENT_LIST = "eventList";
    private String eventList;

    public static final String JSON_PROPERTY_COLLECTION_ENTITY_IPV4_ADDR = "collectionEntityIpv4Addr";
    private String collectionEntityIpv4Addr;

    public static final String JSON_PROPERTY_COLLECTION_ENTITY_IPV6_ADDR = "collectionEntityIpv6Addr";
    private String collectionEntityIpv6Addr;

    public static final String JSON_PROPERTY_INTERFACE_LIST = "interfaceList";
    private String interfaceList;

    public TraceData()
    {
    }

    public TraceData traceRef(String traceRef)
    {

        this.traceRef = traceRef;
        return this;
    }

    /**
     * Trace Reference (see 3GPP TS 32.422).It shall be encoded as the concatenation
     * of MCC, MNC and Trace ID as follows: &#39;MCC&#39;&lt;MNC&#39;-&#39;Trace
     * ID&#39;The Trace ID shall be encoded as a 3 octet string in hexadecimal
     * representation. Each character in the Trace ID string shall take a value of
     * \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or
     * \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most
     * significant character representing the 4 most significant bits of the Trace
     * ID shall appear first in the string, and the character representing the 4
     * least significant bit of the Trace ID shall appear last in the string.
     * 
     * @return traceRef
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Trace Reference (see 3GPP TS 32.422).It shall be encoded as the concatenation of MCC, MNC and Trace ID as follows: 'MCC'<MNC'-'Trace ID'The Trace ID shall be encoded as a 3 octet string in hexadecimal representation. Each character in the Trace ID string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the Trace ID shall appear first  in the string, and the character representing the 4 least significant bit of the Trace ID shall appear last in the string. ")
    @JsonProperty(JSON_PROPERTY_TRACE_REF)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getTraceRef()
    {
        return traceRef;
    }

    @JsonProperty(JSON_PROPERTY_TRACE_REF)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTraceRef(String traceRef)
    {
        this.traceRef = traceRef;
    }

    public TraceData traceDepth(String traceDepth)
    {

        this.traceDepth = traceDepth;
        return this;
    }

    /**
     * The enumeration TraceDepth defines how detailed information should be
     * recorded in the trace. See 3GPP TS 32.422 for further description of the
     * values. It shall comply with the provisions defined in table 5.6.3.1-1
     * 
     * @return traceDepth
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "The enumeration TraceDepth defines how detailed information should be recorded in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.1-1 ")
    @JsonProperty(JSON_PROPERTY_TRACE_DEPTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getTraceDepth()
    {
        return traceDepth;
    }

    @JsonProperty(JSON_PROPERTY_TRACE_DEPTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTraceDepth(String traceDepth)
    {
        this.traceDepth = traceDepth;
    }

    public TraceData neTypeList(String neTypeList)
    {

        this.neTypeList = neTypeList;
        return this;
    }

    /**
     * List of NE Types (see 3GPP TS 32.422).It shall be encoded as an octet string
     * in hexadecimal representation. Each character in the string shall take a
     * value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to
     * \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4
     * bits. The most significant character representing the 4 most significant bits
     * shall appear first in the string, and the character representing the 4 least
     * significant bit shall appear last in the string.Octets shall be coded
     * according to 3GPP TS 32.422.
     * 
     * @return neTypeList
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "List of NE Types (see 3GPP TS 32.422).It shall be encoded as an octet string in hexadecimal representation. Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits shall appear first in the string, and the character representing the 4 least significant bit shall appear last in the string.Octets shall be coded according to 3GPP TS 32.422. ")
    @JsonProperty(JSON_PROPERTY_NE_TYPE_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getNeTypeList()
    {
        return neTypeList;
    }

    @JsonProperty(JSON_PROPERTY_NE_TYPE_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNeTypeList(String neTypeList)
    {
        this.neTypeList = neTypeList;
    }

    public TraceData eventList(String eventList)
    {

        this.eventList = eventList;
        return this;
    }

    /**
     * Triggering events (see 3GPP TS 32.422).It shall be encoded as an octet string
     * in hexadecimal representation. Each character in the string shall take a
     * value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to
     * \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4
     * bits. The most significant character representing the 4 most significant bits
     * shall appear first in the string, and the character representing the 4 least
     * significant bit shall appear last in the string. Octets shall be coded
     * according to 3GPP TS 32.422.
     * 
     * @return eventList
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true,
                      value = "Triggering events (see 3GPP TS 32.422).It shall be encoded as an octet string in hexadecimal representation. Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits shall appear first in the string, and the character representing the 4 least significant bit shall appear last in the string. Octets shall be coded according to 3GPP TS 32.422. ")
    @JsonProperty(JSON_PROPERTY_EVENT_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEventList()
    {
        return eventList;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_LIST)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEventList(String eventList)
    {
        this.eventList = eventList;
    }

    public TraceData collectionEntityIpv4Addr(String collectionEntityIpv4Addr)
    {

        this.collectionEntityIpv4Addr = collectionEntityIpv4Addr;
        return this;
    }

    /**
     * String identifying a IPv4 address formatted in the &#39;dotted decimal&#39;
     * notation as defined in RFC 1166.
     * 
     * @return collectionEntityIpv4Addr
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(example = "198.51.100.1", value = "String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. ")
    @JsonProperty(JSON_PROPERTY_COLLECTION_ENTITY_IPV4_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCollectionEntityIpv4Addr()
    {
        return collectionEntityIpv4Addr;
    }

    @JsonProperty(JSON_PROPERTY_COLLECTION_ENTITY_IPV4_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCollectionEntityIpv4Addr(String collectionEntityIpv4Addr)
    {
        this.collectionEntityIpv4Addr = collectionEntityIpv4Addr;
    }

    public TraceData collectionEntityIpv6Addr(String collectionEntityIpv6Addr)
    {

        this.collectionEntityIpv6Addr = collectionEntityIpv6Addr;
        return this;
    }

    /**
     * Get collectionEntityIpv6Addr
     * 
     * @return collectionEntityIpv6Addr
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_COLLECTION_ENTITY_IPV6_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCollectionEntityIpv6Addr()
    {
        return collectionEntityIpv6Addr;
    }

    @JsonProperty(JSON_PROPERTY_COLLECTION_ENTITY_IPV6_ADDR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCollectionEntityIpv6Addr(String collectionEntityIpv6Addr)
    {
        this.collectionEntityIpv6Addr = collectionEntityIpv6Addr;
    }

    public TraceData interfaceList(String interfaceList)
    {

        this.interfaceList = interfaceList;
        return this;
    }

    /**
     * List of Interfaces (see 3GPP TS 32.422).It shall be encoded as an octet
     * string in hexadecimal representation. Each character in the string shall take
     * a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to
     * \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4
     * bits. The most significant character representing the 4 most significant bits
     * shall appear first in the string, and the character representing the 4 least
     * significant bit shall appear last in the string. Octets shall be coded
     * according to 3GPP TS 32.422. If this attribute is not present, all the
     * interfaces applicable to the list of NE types indicated in the neTypeList
     * attribute should be traced.
     * 
     * @return interfaceList
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "List of Interfaces (see 3GPP TS 32.422).It shall be encoded as an octet string in hexadecimal representation. Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits shall appear first in the string, and the character representing the  4 least significant bit shall appear last in the string. Octets shall be coded according to 3GPP TS 32.422. If this attribute is not present, all the interfaces applicable to the list of NE types indicated in the neTypeList attribute should be traced. ")
    @JsonProperty(JSON_PROPERTY_INTERFACE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInterfaceList()
    {
        return interfaceList;
    }

    @JsonProperty(JSON_PROPERTY_INTERFACE_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInterfaceList(String interfaceList)
    {
        this.interfaceList = interfaceList;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        TraceData traceData = (TraceData) o;
        return Objects.equals(this.traceRef, traceData.traceRef) && Objects.equals(this.traceDepth, traceData.traceDepth)
               && Objects.equals(this.neTypeList, traceData.neTypeList) && Objects.equals(this.eventList, traceData.eventList)
               && Objects.equals(this.collectionEntityIpv4Addr, traceData.collectionEntityIpv4Addr)
               && Objects.equals(this.collectionEntityIpv6Addr, traceData.collectionEntityIpv6Addr)
               && Objects.equals(this.interfaceList, traceData.interfaceList);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(traceRef, traceDepth, neTypeList, eventList, collectionEntityIpv4Addr, collectionEntityIpv6Addr, interfaceList);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class TraceData {\n");
        sb.append("    traceRef: ").append(toIndentedString(traceRef)).append("\n");
        sb.append("    traceDepth: ").append(toIndentedString(traceDepth)).append("\n");
        sb.append("    neTypeList: ").append(toIndentedString(neTypeList)).append("\n");
        sb.append("    eventList: ").append(toIndentedString(eventList)).append("\n");
        sb.append("    collectionEntityIpv4Addr: ").append(toIndentedString(collectionEntityIpv4Addr)).append("\n");
        sb.append("    collectionEntityIpv6Addr: ").append(toIndentedString(collectionEntityIpv6Addr)).append("\n");
        sb.append("    interfaceList: ").append(toIndentedString(interfaceList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
