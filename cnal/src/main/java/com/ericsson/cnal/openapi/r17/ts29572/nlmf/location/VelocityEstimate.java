/*
 * LMF Location
 * LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29572.nlmf.location;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Velocity estimate.
 */
@ApiModel(description = "Velocity estimate.")
@JsonPropertyOrder({ VelocityEstimate.JSON_PROPERTY_H_SPEED,
                     VelocityEstimate.JSON_PROPERTY_BEARING,
                     VelocityEstimate.JSON_PROPERTY_V_SPEED,
                     VelocityEstimate.JSON_PROPERTY_V_DIRECTION,
                     VelocityEstimate.JSON_PROPERTY_H_UNCERTAINTY,
                     VelocityEstimate.JSON_PROPERTY_V_UNCERTAINTY })
public class VelocityEstimate
{
    public static final String JSON_PROPERTY_H_SPEED = "hSpeed";
    private Float hSpeed;

    public static final String JSON_PROPERTY_BEARING = "bearing";
    private Integer bearing;

    public static final String JSON_PROPERTY_V_SPEED = "vSpeed";
    private Float vSpeed;

    public static final String JSON_PROPERTY_V_DIRECTION = "vDirection";
    private VerticalDirection vDirection;

    public static final String JSON_PROPERTY_H_UNCERTAINTY = "hUncertainty";
    private Float hUncertainty;

    public static final String JSON_PROPERTY_V_UNCERTAINTY = "vUncertainty";
    private Float vUncertainty;

    public VelocityEstimate()
    {
    }

    public VelocityEstimate hSpeed(Float hSpeed)
    {

        this.hSpeed = hSpeed;
        return this;
    }

    /**
     * Indicates value of horizontal speed. minimum: 0 maximum: 2047
     * 
     * @return hSpeed
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of horizontal speed.")
    @JsonProperty(JSON_PROPERTY_H_SPEED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float gethSpeed()
    {
        return hSpeed;
    }

    @JsonProperty(JSON_PROPERTY_H_SPEED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void sethSpeed(Float hSpeed)
    {
        this.hSpeed = hSpeed;
    }

    public VelocityEstimate bearing(Integer bearing)
    {

        this.bearing = bearing;
        return this;
    }

    /**
     * Indicates value of angle. minimum: 0 maximum: 360
     * 
     * @return bearing
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of angle.")
    @JsonProperty(JSON_PROPERTY_BEARING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getBearing()
    {
        return bearing;
    }

    @JsonProperty(JSON_PROPERTY_BEARING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBearing(Integer bearing)
    {
        this.bearing = bearing;
    }

    public VelocityEstimate vSpeed(Float vSpeed)
    {

        this.vSpeed = vSpeed;
        return this;
    }

    /**
     * Indicates value of vertical speed. minimum: 0 maximum: 255
     * 
     * @return vSpeed
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of vertical speed.")
    @JsonProperty(JSON_PROPERTY_V_SPEED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getvSpeed()
    {
        return vSpeed;
    }

    @JsonProperty(JSON_PROPERTY_V_SPEED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setvSpeed(Float vSpeed)
    {
        this.vSpeed = vSpeed;
    }

    public VelocityEstimate vDirection(VerticalDirection vDirection)
    {

        this.vDirection = vDirection;
        return this;
    }

    /**
     * Get vDirection
     * 
     * @return vDirection
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_V_DIRECTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public VerticalDirection getvDirection()
    {
        return vDirection;
    }

    @JsonProperty(JSON_PROPERTY_V_DIRECTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setvDirection(VerticalDirection vDirection)
    {
        this.vDirection = vDirection;
    }

    public VelocityEstimate hUncertainty(Float hUncertainty)
    {

        this.hUncertainty = hUncertainty;
        return this;
    }

    /**
     * Indicates value of speed uncertainty. minimum: 0 maximum: 255
     * 
     * @return hUncertainty
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of speed uncertainty.")
    @JsonProperty(JSON_PROPERTY_H_UNCERTAINTY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float gethUncertainty()
    {
        return hUncertainty;
    }

    @JsonProperty(JSON_PROPERTY_H_UNCERTAINTY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void sethUncertainty(Float hUncertainty)
    {
        this.hUncertainty = hUncertainty;
    }

    public VelocityEstimate vUncertainty(Float vUncertainty)
    {

        this.vUncertainty = vUncertainty;
        return this;
    }

    /**
     * Indicates value of speed uncertainty. minimum: 0 maximum: 255
     * 
     * @return vUncertainty
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of speed uncertainty.")
    @JsonProperty(JSON_PROPERTY_V_UNCERTAINTY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Float getvUncertainty()
    {
        return vUncertainty;
    }

    @JsonProperty(JSON_PROPERTY_V_UNCERTAINTY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setvUncertainty(Float vUncertainty)
    {
        this.vUncertainty = vUncertainty;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        VelocityEstimate velocityEstimate = (VelocityEstimate) o;
        return Objects.equals(this.hSpeed, velocityEstimate.hSpeed) && Objects.equals(this.bearing, velocityEstimate.bearing)
               && Objects.equals(this.vSpeed, velocityEstimate.vSpeed) && Objects.equals(this.vDirection, velocityEstimate.vDirection)
               && Objects.equals(this.hUncertainty, velocityEstimate.hUncertainty) && Objects.equals(this.vUncertainty, velocityEstimate.vUncertainty);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(hSpeed, bearing, vSpeed, vDirection, hUncertainty, vUncertainty);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class VelocityEstimate {\n");
        sb.append("    hSpeed: ").append(toIndentedString(hSpeed)).append("\n");
        sb.append("    bearing: ").append(toIndentedString(bearing)).append("\n");
        sb.append("    vSpeed: ").append(toIndentedString(vSpeed)).append("\n");
        sb.append("    vDirection: ").append(toIndentedString(vDirection)).append("\n");
        sb.append("    hUncertainty: ").append(toIndentedString(hUncertainty)).append("\n");
        sb.append("    vUncertainty: ").append(toIndentedString(vUncertainty)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
