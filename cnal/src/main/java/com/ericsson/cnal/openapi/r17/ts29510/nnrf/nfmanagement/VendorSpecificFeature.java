/*
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29510.nnrf.nfmanagement;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Information about a vendor-specific feature
 */
@ApiModel(description = "Information about a vendor-specific feature")
@JsonPropertyOrder({ VendorSpecificFeature.JSON_PROPERTY_FEATURE_NAME, VendorSpecificFeature.JSON_PROPERTY_FEATURE_VERSION })
public class VendorSpecificFeature
{
    public static final String JSON_PROPERTY_FEATURE_NAME = "featureName";
    private String featureName;

    public static final String JSON_PROPERTY_FEATURE_VERSION = "featureVersion";
    private String featureVersion;

    public VendorSpecificFeature()
    {
    }

    public VendorSpecificFeature featureName(String featureName)
    {

        this.featureName = featureName;
        return this;
    }

    /**
     * Get featureName
     * 
     * @return featureName
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_FEATURE_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getFeatureName()
    {
        return featureName;
    }

    @JsonProperty(JSON_PROPERTY_FEATURE_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFeatureName(String featureName)
    {
        this.featureName = featureName;
    }

    public VendorSpecificFeature featureVersion(String featureVersion)
    {

        this.featureVersion = featureVersion;
        return this;
    }

    /**
     * Get featureVersion
     * 
     * @return featureVersion
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_FEATURE_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getFeatureVersion()
    {
        return featureVersion;
    }

    @JsonProperty(JSON_PROPERTY_FEATURE_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFeatureVersion(String featureVersion)
    {
        this.featureVersion = featureVersion;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        VendorSpecificFeature vendorSpecificFeature = (VendorSpecificFeature) o;
        return Objects.equals(this.featureName, vendorSpecificFeature.featureName) && Objects.equals(this.featureVersion, vendorSpecificFeature.featureVersion);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(featureName, featureVersion);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class VendorSpecificFeature {\n");
        sb.append("    featureName: ").append(toIndentedString(featureName)).append("\n");
        sb.append("    featureVersion: ").append(toIndentedString(featureVersion)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
