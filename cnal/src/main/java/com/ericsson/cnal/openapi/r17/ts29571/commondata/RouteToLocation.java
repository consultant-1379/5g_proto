/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * At least one of the \&quot;routeInfo\&quot; attribute and the
 * \&quot;routeProfId\&quot; attribute shall be included in the
 * \&quot;RouteToLocation\&quot; data type.
 */
@ApiModel(description = "At least one of the \"routeInfo\" attribute and the \"routeProfId\" attribute shall be included in the \"RouteToLocation\" data type. ")
@JsonPropertyOrder({ RouteToLocation.JSON_PROPERTY_DNAI, RouteToLocation.JSON_PROPERTY_ROUTE_INFO, RouteToLocation.JSON_PROPERTY_ROUTE_PROF_ID })
public class RouteToLocation
{
    public static final String JSON_PROPERTY_DNAI = "dnai";
    private String dnai;

    public static final String JSON_PROPERTY_ROUTE_INFO = "routeInfo";
    private JsonNullable<RouteInformation> routeInfo = JsonNullable.<RouteInformation>undefined();

    public static final String JSON_PROPERTY_ROUTE_PROF_ID = "routeProfId";
    private JsonNullable<String> routeProfId = JsonNullable.<String>undefined();

    public RouteToLocation()
    {
    }

    public RouteToLocation dnai(String dnai)
    {

        this.dnai = dnai;
        return this;
    }

    /**
     * DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
     * 
     * @return dnai
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.")
    @JsonProperty(JSON_PROPERTY_DNAI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getDnai()
    {
        return dnai;
    }

    @JsonProperty(JSON_PROPERTY_DNAI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDnai(String dnai)
    {
        this.dnai = dnai;
    }

    public RouteToLocation routeInfo(RouteInformation routeInfo)
    {
        this.routeInfo = JsonNullable.<RouteInformation>of(routeInfo);

        return this;
    }

    /**
     * Get routeInfo
     * 
     * @return routeInfo
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonIgnore

    public RouteInformation getRouteInfo()
    {
        return routeInfo.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_ROUTE_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public JsonNullable<RouteInformation> getRouteInfo_JsonNullable()
    {
        return routeInfo;
    }

    @JsonProperty(JSON_PROPERTY_ROUTE_INFO)
    public void setRouteInfo_JsonNullable(JsonNullable<RouteInformation> routeInfo)
    {
        this.routeInfo = routeInfo;
    }

    public void setRouteInfo(RouteInformation routeInfo)
    {
        this.routeInfo = JsonNullable.<RouteInformation>of(routeInfo);
    }

    public RouteToLocation routeProfId(String routeProfId)
    {
        this.routeProfId = JsonNullable.<String>of(routeProfId);

        return this;
    }

    /**
     * Identifies the routing profile Id.
     * 
     * @return routeProfId
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Identifies the routing profile Id.")
    @JsonIgnore

    public String getRouteProfId()
    {
        return routeProfId.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_ROUTE_PROF_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public JsonNullable<String> getRouteProfId_JsonNullable()
    {
        return routeProfId;
    }

    @JsonProperty(JSON_PROPERTY_ROUTE_PROF_ID)
    public void setRouteProfId_JsonNullable(JsonNullable<String> routeProfId)
    {
        this.routeProfId = routeProfId;
    }

    public void setRouteProfId(String routeProfId)
    {
        this.routeProfId = JsonNullable.<String>of(routeProfId);
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        RouteToLocation routeToLocation = (RouteToLocation) o;
        return Objects.equals(this.dnai, routeToLocation.dnai) && equalsNullable(this.routeInfo, routeToLocation.routeInfo)
               && equalsNullable(this.routeProfId, routeToLocation.routeProfId);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a,
                                              JsonNullable<T> b)
    {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(dnai, hashCodeNullable(routeInfo), hashCodeNullable(routeProfId));
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a)
    {
        if (a == null)
        {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] { a.get() }) : 31;
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class RouteToLocation {\n");
        sb.append("    dnai: ").append(toIndentedString(dnai)).append("\n");
        sb.append("    routeInfo: ").append(toIndentedString(routeInfo)).append("\n");
        sb.append("    routeProfId: ").append(toIndentedString(routeProfId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
