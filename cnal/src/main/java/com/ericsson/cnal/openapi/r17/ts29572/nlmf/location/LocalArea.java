/*
 * LMF Location
 * LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29572.nlmf.location;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Local area specified by different shape
 */
@ApiModel(description = "Local area specified by different shape")
@JsonPropertyOrder({ LocalArea.JSON_PROPERTY_SHAPE,
                     LocalArea.JSON_PROPERTY_LOCAL_ORIGIN,
                     LocalArea.JSON_PROPERTY_POINT,
                     LocalArea.JSON_PROPERTY_UNCERTAINTY_ELLIPSOID,
                     LocalArea.JSON_PROPERTY_CONFIDENCE })
@JsonIgnoreProperties(value = "shape", // ignore manually set shape, it will be automatically generated by Jackson
                                       // during serialization
                      allowSetters = true // allows the shape to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "shape", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = EllipsoidArc.class, name = "ELLIPSOID_ARC"),
                @JsonSubTypes.Type(value = Local2dPointUncertaintyEllipse.class, name = "LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Local3dPointUncertaintyEllipsoid.class, name = "LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID"),
                @JsonSubTypes.Type(value = Local2dPointUncertaintyEllipse.class, name = "Local2dPointUncertaintyEllipse"),
                @JsonSubTypes.Type(value = Local3dPointUncertaintyEllipsoid.class, name = "Local3dPointUncertaintyEllipsoid"),
                @JsonSubTypes.Type(value = Point.class, name = "POINT"),
                @JsonSubTypes.Type(value = PointAltitude.class, name = "POINT_ALTITUDE"),
                @JsonSubTypes.Type(value = PointAltitudeUncertainty.class, name = "POINT_ALTITUDE_UNCERTAINTY"),
                @JsonSubTypes.Type(value = PointUncertaintyCircle.class, name = "POINT_UNCERTAINTY_CIRCLE"),
                @JsonSubTypes.Type(value = PointUncertaintyEllipse.class, name = "POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Polygon.class, name = "POLYGON"), })

public class LocalArea
{
    public static final String JSON_PROPERTY_SHAPE = "shape";
    protected String shape;

    public static final String JSON_PROPERTY_LOCAL_ORIGIN = "localOrigin";
    private LocalOrigin localOrigin;

    public static final String JSON_PROPERTY_POINT = "point";
    private RelativeCartesianLocation point;

    public static final String JSON_PROPERTY_UNCERTAINTY_ELLIPSOID = "uncertaintyEllipsoid";
    private UncertaintyEllipsoid uncertaintyEllipsoid;

    public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
    private Integer confidence;

    public LocalArea()
    {
    }

    public LocalArea shape(String shape)
    {

        this.shape = shape;
        return this;
    }

    /**
     * Indicates supported GAD shapes.
     * 
     * @return shape
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates supported GAD shapes.")
    @JsonProperty(JSON_PROPERTY_SHAPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getShape()
    {
        return shape;
    }

    @JsonProperty(JSON_PROPERTY_SHAPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setShape(String shape)
    {
        this.shape = shape;
    }

    public LocalArea localOrigin(LocalOrigin localOrigin)
    {

        this.localOrigin = localOrigin;
        return this;
    }

    /**
     * Get localOrigin
     * 
     * @return localOrigin
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_LOCAL_ORIGIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public LocalOrigin getLocalOrigin()
    {
        return localOrigin;
    }

    @JsonProperty(JSON_PROPERTY_LOCAL_ORIGIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLocalOrigin(LocalOrigin localOrigin)
    {
        this.localOrigin = localOrigin;
    }

    public LocalArea point(RelativeCartesianLocation point)
    {

        this.point = point;
        return this;
    }

    /**
     * Get point
     * 
     * @return point
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public RelativeCartesianLocation getPoint()
    {
        return point;
    }

    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPoint(RelativeCartesianLocation point)
    {
        this.point = point;
    }

    public LocalArea uncertaintyEllipsoid(UncertaintyEllipsoid uncertaintyEllipsoid)
    {

        this.uncertaintyEllipsoid = uncertaintyEllipsoid;
        return this;
    }

    /**
     * Get uncertaintyEllipsoid
     * 
     * @return uncertaintyEllipsoid
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ELLIPSOID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UncertaintyEllipsoid getUncertaintyEllipsoid()
    {
        return uncertaintyEllipsoid;
    }

    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ELLIPSOID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUncertaintyEllipsoid(UncertaintyEllipsoid uncertaintyEllipsoid)
    {
        this.uncertaintyEllipsoid = uncertaintyEllipsoid;
    }

    public LocalArea confidence(Integer confidence)
    {

        this.confidence = confidence;
        return this;
    }

    /**
     * Indicates value of confidence. minimum: 0 maximum: 100
     * 
     * @return confidence
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of confidence.")
    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getConfidence()
    {
        return confidence;
    }

    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConfidence(Integer confidence)
    {
        this.confidence = confidence;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        LocalArea localArea = (LocalArea) o;
        return Objects.equals(this.shape, localArea.shape) && Objects.equals(this.localOrigin, localArea.localOrigin)
               && Objects.equals(this.point, localArea.point) && Objects.equals(this.uncertaintyEllipsoid, localArea.uncertaintyEllipsoid)
               && Objects.equals(this.confidence, localArea.confidence);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(shape, localOrigin, point, uncertaintyEllipsoid, confidence);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class LocalArea {\n");
        sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
        sb.append("    localOrigin: ").append(toIndentedString(localOrigin)).append("\n");
        sb.append("    point: ").append(toIndentedString(point)).append("\n");
        sb.append("    uncertaintyEllipsoid: ").append(toIndentedString(uncertaintyEllipsoid)).append("\n");
        sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
