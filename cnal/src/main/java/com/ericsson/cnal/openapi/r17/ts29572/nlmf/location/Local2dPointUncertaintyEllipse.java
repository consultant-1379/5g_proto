/*
 * LMF Location
 * LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29572.nlmf.location;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Local 2D point with uncertainty ellipse
 */
@ApiModel(description = "Local 2D point with uncertainty ellipse")
@JsonPropertyOrder({ Local2dPointUncertaintyEllipse.JSON_PROPERTY_LOCAL_ORIGIN,
                     Local2dPointUncertaintyEllipse.JSON_PROPERTY_POINT,
                     Local2dPointUncertaintyEllipse.JSON_PROPERTY_UNCERTAINTY_ELLIPSE,
                     Local2dPointUncertaintyEllipse.JSON_PROPERTY_CONFIDENCE })
@JsonIgnoreProperties(value = "shape", // ignore manually set shape, it will be automatically generated by Jackson
                                       // during serialization
                      allowSetters = true // allows the shape to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "shape", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = EllipsoidArc.class, name = "ELLIPSOID_ARC"),
                @JsonSubTypes.Type(value = Local2dPointUncertaintyEllipse.class, name = "LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Local3dPointUncertaintyEllipsoid.class, name = "LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID"),
                @JsonSubTypes.Type(value = Point.class, name = "POINT"),
                @JsonSubTypes.Type(value = PointAltitude.class, name = "POINT_ALTITUDE"),
                @JsonSubTypes.Type(value = PointAltitudeUncertainty.class, name = "POINT_ALTITUDE_UNCERTAINTY"),
                @JsonSubTypes.Type(value = PointUncertaintyCircle.class, name = "POINT_UNCERTAINTY_CIRCLE"),
                @JsonSubTypes.Type(value = PointUncertaintyEllipse.class, name = "POINT_UNCERTAINTY_ELLIPSE"),
                @JsonSubTypes.Type(value = Polygon.class, name = "POLYGON"), })

public class Local2dPointUncertaintyEllipse extends GADShape
{
    public static final String JSON_PROPERTY_LOCAL_ORIGIN = "localOrigin";
    private LocalOrigin localOrigin;

    public static final String JSON_PROPERTY_POINT = "point";
    private RelativeCartesianLocation point;

    public static final String JSON_PROPERTY_UNCERTAINTY_ELLIPSE = "uncertaintyEllipse";
    private UncertaintyEllipse uncertaintyEllipse;

    public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
    private Integer confidence;

    public Local2dPointUncertaintyEllipse()
    {

    }

    public Local2dPointUncertaintyEllipse localOrigin(LocalOrigin localOrigin)
    {

        this.localOrigin = localOrigin;
        return this;
    }

    /**
     * Get localOrigin
     * 
     * @return localOrigin
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_LOCAL_ORIGIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public LocalOrigin getLocalOrigin()
    {
        return localOrigin;
    }

    @JsonProperty(JSON_PROPERTY_LOCAL_ORIGIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLocalOrigin(LocalOrigin localOrigin)
    {
        this.localOrigin = localOrigin;
    }

    public Local2dPointUncertaintyEllipse point(RelativeCartesianLocation point)
    {

        this.point = point;
        return this;
    }

    /**
     * Get point
     * 
     * @return point
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public RelativeCartesianLocation getPoint()
    {
        return point;
    }

    @JsonProperty(JSON_PROPERTY_POINT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPoint(RelativeCartesianLocation point)
    {
        this.point = point;
    }

    public Local2dPointUncertaintyEllipse uncertaintyEllipse(UncertaintyEllipse uncertaintyEllipse)
    {

        this.uncertaintyEllipse = uncertaintyEllipse;
        return this;
    }

    /**
     * Get uncertaintyEllipse
     * 
     * @return uncertaintyEllipse
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ELLIPSE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UncertaintyEllipse getUncertaintyEllipse()
    {
        return uncertaintyEllipse;
    }

    @JsonProperty(JSON_PROPERTY_UNCERTAINTY_ELLIPSE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUncertaintyEllipse(UncertaintyEllipse uncertaintyEllipse)
    {
        this.uncertaintyEllipse = uncertaintyEllipse;
    }

    public Local2dPointUncertaintyEllipse confidence(Integer confidence)
    {

        this.confidence = confidence;
        return this;
    }

    /**
     * Indicates value of confidence. minimum: 0 maximum: 100
     * 
     * @return confidence
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Indicates value of confidence.")
    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getConfidence()
    {
        return confidence;
    }

    @JsonProperty(JSON_PROPERTY_CONFIDENCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConfidence(Integer confidence)
    {
        this.confidence = confidence;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Local2dPointUncertaintyEllipse local2dPointUncertaintyEllipse = (Local2dPointUncertaintyEllipse) o;
        return Objects.equals(this.localOrigin, local2dPointUncertaintyEllipse.localOrigin) && Objects.equals(this.point, local2dPointUncertaintyEllipse.point)
               && Objects.equals(this.uncertaintyEllipse, local2dPointUncertaintyEllipse.uncertaintyEllipse)
               && Objects.equals(this.confidence, local2dPointUncertaintyEllipse.confidence) && super.equals(o);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(localOrigin, point, uncertaintyEllipse, confidence, super.hashCode());
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Local2dPointUncertaintyEllipse {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    localOrigin: ").append(toIndentedString(localOrigin)).append("\n");
        sb.append("    point: ").append(toIndentedString(point)).append("\n");
        sb.append("    uncertaintyEllipse: ").append(toIndentedString(uncertaintyEllipse)).append("\n");
        sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
