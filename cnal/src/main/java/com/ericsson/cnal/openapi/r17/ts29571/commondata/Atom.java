/*
 * Common Data Types
 * Common Data Types for Service Based Interfaces.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29571.commondata;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * contains a search parameter and its positive or negative content.
 */
@ApiModel(description = "contains a search parameter and its positive or negative content.")
@JsonPropertyOrder({ Atom.JSON_PROPERTY_ATTR, Atom.JSON_PROPERTY_VALUE, Atom.JSON_PROPERTY_NEGATIVE })
public class Atom
{
    public static final String JSON_PROPERTY_ATTR = "attr";
    private String attr;

    public static final String JSON_PROPERTY_VALUE = "value";
    private Object value = null;

    public static final String JSON_PROPERTY_NEGATIVE = "negative";
    private Boolean negative;

    public Atom()
    {
    }

    public Atom attr(String attr)
    {

        this.attr = attr;
        return this;
    }

    /**
     * contains the name of a defined query parameter.
     * 
     * @return attr
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "contains the name of a defined query parameter.")
    @JsonProperty(JSON_PROPERTY_ATTR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getAttr()
    {
        return attr;
    }

    @JsonProperty(JSON_PROPERTY_ATTR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAttr(String attr)
    {
        this.attr = attr;
    }

    public Atom value(Object value)
    {

        this.value = value;
        return this;
    }

    /**
     * Get value
     * 
     * @return value
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Object getValue()
    {
        return value;
    }

    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setValue(Object value)
    {
        this.value = value;
    }

    public Atom negative(Boolean negative)
    {

        this.negative = negative;
        return this;
    }

    /**
     * indicates whether the negative condition applies for the query condition.
     * 
     * @return negative
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "indicates whether the negative condition applies for the query condition.")
    @JsonProperty(JSON_PROPERTY_NEGATIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getNegative()
    {
        return negative;
    }

    @JsonProperty(JSON_PROPERTY_NEGATIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNegative(Boolean negative)
    {
        this.negative = negative;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Atom atom = (Atom) o;
        return Objects.equals(this.attr, atom.attr) && Objects.equals(this.value, atom.value) && Objects.equals(this.negative, atom.negative);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(attr, value, negative);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Atom {\n");
        sb.append("    attr: ").append(toIndentedString(attr)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
