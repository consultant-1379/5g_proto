/*
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ericsson.cnal.openapi.r17.ts29520.nnwdaf.eventssubscription;

import java.util.Objects;
import java.util.Arrays;
import com.ericsson.cnal.openapi.r17.ts29122.commondata.TimeWindow;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains analytics metadata information required for analytics aggregation.
 */
@ApiModel(description = "Contains analytics metadata information required for analytics aggregation.")
@JsonPropertyOrder({ AnalyticsMetadataInfo.JSON_PROPERTY_NUM_SAMPLES,
                     AnalyticsMetadataInfo.JSON_PROPERTY_DATA_WINDOW,
                     AnalyticsMetadataInfo.JSON_PROPERTY_DATA_STAT_PROPS,
                     AnalyticsMetadataInfo.JSON_PROPERTY_STRATEGY,
                     AnalyticsMetadataInfo.JSON_PROPERTY_ACCURACY })
public class AnalyticsMetadataInfo
{
    public static final String JSON_PROPERTY_NUM_SAMPLES = "numSamples";
    private Integer numSamples;

    public static final String JSON_PROPERTY_DATA_WINDOW = "dataWindow";
    private TimeWindow dataWindow;

    public static final String JSON_PROPERTY_DATA_STAT_PROPS = "dataStatProps";
    private List<String> dataStatProps = null;

    public static final String JSON_PROPERTY_STRATEGY = "strategy";
    private String strategy;

    public static final String JSON_PROPERTY_ACCURACY = "accuracy";
    private String accuracy;

    public AnalyticsMetadataInfo()
    {
    }

    public AnalyticsMetadataInfo numSamples(Integer numSamples)
    {

        this.numSamples = numSamples;
        return this;
    }

    /**
     * Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
     * minimum: 0
     * 
     * @return numSamples
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.")
    @JsonProperty(JSON_PROPERTY_NUM_SAMPLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getNumSamples()
    {
        return numSamples;
    }

    @JsonProperty(JSON_PROPERTY_NUM_SAMPLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNumSamples(Integer numSamples)
    {
        this.numSamples = numSamples;
    }

    public AnalyticsMetadataInfo dataWindow(TimeWindow dataWindow)
    {

        this.dataWindow = dataWindow;
        return this;
    }

    /**
     * Get dataWindow
     * 
     * @return dataWindow
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DATA_WINDOW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public TimeWindow getDataWindow()
    {
        return dataWindow;
    }

    @JsonProperty(JSON_PROPERTY_DATA_WINDOW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDataWindow(TimeWindow dataWindow)
    {
        this.dataWindow = dataWindow;
    }

    public AnalyticsMetadataInfo dataStatProps(List<String> dataStatProps)
    {

        this.dataStatProps = dataStatProps;
        return this;
    }

    public AnalyticsMetadataInfo addDataStatPropsItem(String dataStatPropsItem)
    {
        if (this.dataStatProps == null)
        {
            this.dataStatProps = new ArrayList<>();
        }
        this.dataStatProps.add(dataStatPropsItem);
        return this;
    }

    /**
     * Get dataStatProps
     * 
     * @return dataStatProps
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DATA_STAT_PROPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getDataStatProps()
    {
        return dataStatProps;
    }

    @JsonProperty(JSON_PROPERTY_DATA_STAT_PROPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDataStatProps(List<String> dataStatProps)
    {
        this.dataStatProps = dataStatProps;
    }

    public AnalyticsMetadataInfo strategy(String strategy)
    {

        this.strategy = strategy;
        return this;
    }

    /**
     * Possible values are: - BINARY: Indicates that the analytics shall only be
     * reported when the requested level of accuracy is reached within a cycle of
     * periodic notification. - GRADIENT: Indicates that the analytics shall be
     * reported according with the periodicity irrespective of whether the requested
     * level of accuracy has been reached or not.
     * 
     * @return strategy
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Possible values are: - BINARY: Indicates that the analytics shall only be reported when the requested level of accuracy is reached within a cycle of periodic notification. - GRADIENT: Indicates that the analytics shall be reported according with the periodicity irrespective of whether the requested level of accuracy has been reached or not. ")
    @JsonProperty(JSON_PROPERTY_STRATEGY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStrategy()
    {
        return strategy;
    }

    @JsonProperty(JSON_PROPERTY_STRATEGY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStrategy(String strategy)
    {
        this.strategy = strategy;
    }

    public AnalyticsMetadataInfo accuracy(String accuracy)
    {

        this.accuracy = accuracy;
        return this;
    }

    /**
     * Possible values are: - LOW: Low accuracy. - HIGH: High accuracy.
     * 
     * @return accuracy
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Possible values are: - LOW: Low accuracy.   - HIGH: High accuracy. ")
    @JsonProperty(JSON_PROPERTY_ACCURACY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getAccuracy()
    {
        return accuracy;
    }

    @JsonProperty(JSON_PROPERTY_ACCURACY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAccuracy(String accuracy)
    {
        this.accuracy = accuracy;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        AnalyticsMetadataInfo analyticsMetadataInfo = (AnalyticsMetadataInfo) o;
        return Objects.equals(this.numSamples, analyticsMetadataInfo.numSamples) && Objects.equals(this.dataWindow, analyticsMetadataInfo.dataWindow)
               && Objects.equals(this.dataStatProps, analyticsMetadataInfo.dataStatProps) && Objects.equals(this.strategy, analyticsMetadataInfo.strategy)
               && Objects.equals(this.accuracy, analyticsMetadataInfo.accuracy);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(numSamples, dataWindow, dataStatProps, strategy, accuracy);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class AnalyticsMetadataInfo {\n");
        sb.append("    numSamples: ").append(toIndentedString(numSamples)).append("\n");
        sb.append("    dataWindow: ").append(toIndentedString(dataWindow)).append("\n");
        sb.append("    dataStatProps: ").append(toIndentedString(dataStatProps)).append("\n");
        sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
        sb.append("    accuracy: ").append(toIndentedString(accuracy)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
