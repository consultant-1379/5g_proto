{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Generated by jsonschema-generator (1.27.0-124 2023-06-15 16:50:09 CEST) from Yang module ericsson-snmp (1.3.0) on Mar 5, 2024, 3:56:52 PM. Features: [ericsson-brm:failsafe-backups, ericsson-brm:housekeeping, ericsson-brm:label-store, ericsson-brm:rollback-at-restore, ericsson-brm:scheduler, ericsson-brm:sftp-client-authentication, ericsson-fm:alert, ericsson-keystore-ext:cmp, ericsson-keystore-ext:manual-renewal, ericsson-keystore-ext:pkcs10, ericsson-keystore-ext:pkcs12, ericsson-keystore-ext:pkcs8, ericsson-keystore-ext:scep, ericsson-notifications:netconf-state-change, ericsson-pm:measurement-jobs, ericsson-pm:realtime-jobs, ericsson-pm:threshold-jobs, ericsson-snmp:dtls, ericsson-snmp:network-prefix-validation, ericsson-snmp:no-auth-no-priv-feature, ericsson-system-ext:authentication-failure-alarm, ericsson-system-ext:ldap, ericsson-system-ext:ldap-authentication, ericsson-system-ext:ldap-clear, ericsson-system-ext:ldap-custom-filter, ericsson-system-ext:ldap-posix-filter, ericsson-system-ext:ldap-sasl-external, ericsson-system-ext:local-target-classes, ericsson-system-ext:ntp-security, ericsson-system-ext:oauth2-client-authentication, iana-crypt-hash:crypt-hash-md5, iana-crypt-hash:crypt-hash-sha-256, iana-crypt-hash:crypt-hash-sha-512, ietf-crypto-types:one-asymmetric-key-format, ietf-crypto-types:one-symmetric-key-format, ietf-crypto-types:encrypted-one-symmetric-key-format, ietf-crypto-types:encrypted-one-asymmetric-key-format, ietf-interfaces:arbitrary-names, ietf-interfaces:if-mib, ietf-interfaces:pre-provisioning, ietf-ip:ipv4-non-contiguous-netmasks, ietf-ip:ipv6-privacy-autoconf, ietf-keystore:key-generation, ietf-keystore:keystore-supported, ietf-keystore:local-definitions-supported, ietf-keystore:keystore-supported, ietf-netconf:candidate, ietf-netconf:confirmed-commit, ietf-netconf:rollback-on-error, ietf-netconf:startup, ietf-netconf:url, ietf-netconf:validate, ietf-netconf:writable-running, ietf-netconf:xpath, ietf-ssh-client:ssh-client-transport-params-config, ietf-ssh-client:ssh-client-keepalives, ietf-ssh-common:ssh-ctr, ietf-ssh-common:ssh-dh-group-exchange, ietf-ssh-common:ssh-ecc, ietf-ssh-common:ssh-sha2, ietf-ssh-common:ssh-x509-certs, ietf-system:authentication, ietf-system:dns-udp-tcp-port, ietf-system:local-users, ietf-system:ntp, ietf-system:ntp-udp-port, ietf-system:radius, ietf-system:radius-authentication, ietf-system:timezone-name, ietf-system:authentication, ietf-system:local-users, ietf-system:ntp, ietf-tls-client:tls-client-hello-params-config, ietf-tls-client:tls-client-keepalives, ietf-tls-client:x509-certificate-auth, ietf-tls-client:raw-public-key-auth, ietf-tls-client:psk-auth, ietf-tls-common:tls-1_0, ietf-tls-common:tls-1_1, ietf-tls-common:tls-1_2, ietf-tls-common:tls-1_3, ietf-tls-common:tls-3des, ietf-tls-common:tls-dhe, ietf-tls-common:tls-ecc, ietf-tls-common:tls-gcm, ietf-tls-common:tls-sha2, ietf-tls-server:tls-server-hello-params-config, ietf-tls-server:tls-server-keepalives, ietf-tls-server:client-auth-config-supported, ietf-tls-server:external-client-auth-supported, ietf-tls-server:x509-certificate-auth, ietf-tls-server:raw-public-key-auth, ietf-tls-server:psk-auth, ietf-truststore:local-definitions-supported, ietf-truststore:raw-public-keys, ietf-truststore:ssh-host-keys, ietf-truststore:truststore-supported, ietf-truststore:x509-certificates, ietf-truststore:truststore-supported, ietf-truststore:ssh-host-keys, ietf-truststore:x509-certificates]. Deviations/extensions: [ericsson-brm-ext-adp, ericsson-data-collector-ext-adp, ericsson-fm-ext-adp, ericsson-keystore-ext, ericsson-netconf-acm-ext, ericsson-pm-dev-adp, ericsson-system-ext-aum, ericsson-system-ext, ericsson-truststore-ext, ericsson-yang-library-ext, ietf-ip, ietf-netconf-with-defaults, ietf-network-instance, tailf-acm]",
  "title": "ericsson-snmp",
  "type": "object",
  "properties": {
    "ericsson-snmp:snmp": {
      "type": "object",
      "description": "Configuration of the SNMP protocol, for example IP addresses and ports.",
      "properties": {
        "heartbeat-interval": {
          "type": "integer",
          "format": "uint32",
          "minimum": 30,
          "maximum": 4294967295,
          "description": "The interval in seconds, with which an SNMP heartbeat notification (eriAlarmHeartBeatNotif) is sent to all targets. heartbeat-interval in this module replaces heartbeat-interval specified in the ericsson-fm model, which has no effect on SNMP heartbeat. If not defined, a default value of 60 seconds will be used. The heartbeatInterval must be greater than 30 sec when oamVIP is enabled",
          "default": "60"
        },
        "administrative-state": {
          "enum": [
            "locked",
            "unlocked"
          ],
          "description": "The administrative state for the SNMP protocol. If locked, no SNMP Traps are generated, for example, alarm, alerts or heartbeats. All access to the SNMP protocol is disabled.",
          "default": "unlocked"
        },
        "enable-source-check-for-v1v2c": {
          "type": "boolean",
          "description": "Enables source IP check on the agent for community based Snmp V1 and Snmp V2C protocol access. If false, agent may accept SNMP GET, SET messages from any IP address. If true, agent only accepts SNMP GET, SET messages from configured target IP subnet.",
          "default": "false"
        },
        "engine-id": {
          "type": "string",
          "description": "Unique identifier of the SNMP agent. Only applicable when using SNMPv3. To be configured when auto discovery of the SNMP Engine ID is not supported or it is desired to use an identifier that is not automatically calculated and remains unchanged across re-initializations. Where SNMP stack can not support setting the Engine ID, the applied value is ignored, keeping the current empty value."
        },
        "engine-boots": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0,
          "maximum": 4294967295,
          "description": "Count of the number of times the SNMP engine has re-booted/re-initialized since engine-id was last configured. Only applicable when using SNMPv3. In order to reset an SNMP engine whose snmpEngineBoots value is about to reach the value 2147483647, manual intervention is required. The engine must be re-configured, either with a new engine-id value, or with new secret values for the authentication and privacy protocols of all users known to that SNMP engine. The engine-boots will be stored and incremented every time SNMP AP re-boots",
          "default": "0"
        },
        "node-credential": {
          "type": "object",
          "description": "Node credential used for SNMP notifications with Transport Security Model. Must be set if Transport Security Model, DTLS, is used.",
          "properties": {
            "server-identity": {
              "type": "object",
              "description": "A locally-defined or referenced end-entity certificate, including any configured intermediate certificates, the TLS server will present when establishing a TLS connection in its Certificate message, as defined in Section 7.4.2 in RFC 5246.",
              "properties": {
                "certificate": {
                  "type": "object",
                  "description": "Specifies the server identity using a certificate.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local key definition.",
                      "properties": {
                        "private-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "encrypted-private-key": {
                          "type": "object",
                          "description": "A container for the encrypted asymmetric private key value.",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The private key, encrypted using the specified symmetric or asymmetric key."
                            },
                            "symmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies a symmetric key used to encrypt this key."
                            },
                            "asymmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies an asymmetric key used to encrypt this key."
                            }
                          }
                        },
                        "algorithm": {
                          "enum": [
                            "rsa1024",
                            "rsa2048",
                            "rsa3072",
                            "rsa4096",
                            "rsa7680",
                            "rsa15360",
                            "secp192r1",
                            "secp224r1",
                            "secp256r1",
                            "secp384r1",
                            "secp521r1",
                            "x25519",
                            "x448"
                          ],
                          "description": "Identifies the key's algorithm."
                        },
                        "public-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "public-key": {
                          "type": "string",
                          "description": "The binary value of the public key. The interpretation of the value is defined by 'public-key-format' field."
                        },
                        "private-key": {
                          "type": "string",
                          "description": "The value of the binary key The key's value is interpreted by the 'private-key-format' field.",
                          "eric-adp-is-passphrase": "true",
                          "format": "eric-adp-cm-secret"
                        },
                        "hidden-private-key": {
                          "type": "array",
                          "items": {
                            "type": "null"
                          },
                          "description": "A permanently hidden key. How such keys are created is outside the scope of this module."
                        },
                        "cert": {
                          "type": "string",
                          "description": "The binary certificate data for this certificate."
                        }
                      },
                      "required": [
                        "algorithm",
                        "public-key"
                      ]
                    },
                    "keystore-reference": {
                      "type": "object",
                      "description": "A reference to a specific certificate (and its associated private key) in the keystore.",
                      "properties": {
                        "asymmetric-key": {
                          "type": "string",
                          "description": "A reference to an asymmetric key in the keystore."
                        },
                        "certificate": {
                          "type": "string",
                          "description": "A reference to a specific certificate of the asymmetric key in the keystore."
                        }
                      }
                    }
                  },
                  "required": [
                    "local-definition"
                  ]
                },
                "raw-private-key": {
                  "type": "object",
                  "description": "Specifies the server identity using a raw private key.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local key definition.",
                      "properties": {
                        "private-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "encrypted-private-key": {
                          "type": "object",
                          "description": "A container for the encrypted asymmetric private key value.",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The private key, encrypted using the specified symmetric or asymmetric key."
                            },
                            "symmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies a symmetric key used to encrypt this key."
                            },
                            "asymmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies an asymmetric key used to encrypt this key."
                            }
                          }
                        },
                        "algorithm": {
                          "enum": [
                            "rsa1024",
                            "rsa2048",
                            "rsa3072",
                            "rsa4096",
                            "rsa7680",
                            "rsa15360",
                            "secp192r1",
                            "secp224r1",
                            "secp256r1",
                            "secp384r1",
                            "secp521r1",
                            "x25519",
                            "x448"
                          ],
                          "description": "Identifies the key's algorithm."
                        },
                        "public-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "public-key": {
                          "type": "string",
                          "description": "The binary value of the public key. The interpretation of the value is defined by 'public-key-format' field."
                        },
                        "private-key": {
                          "type": "string",
                          "description": "The value of the binary key The key's value is interpreted by the 'private-key-format' field.",
                          "eric-adp-is-passphrase": "true",
                          "format": "eric-adp-cm-secret"
                        },
                        "hidden-private-key": {
                          "type": "array",
                          "items": {
                            "type": "null"
                          },
                          "description": "A permanently hidden key. How such keys are created is outside the scope of this module."
                        }
                      },
                      "required": [
                        "algorithm",
                        "public-key"
                      ]
                    },
                    "keystore-reference": {
                      "type": "string",
                      "description": "A reference to an asymmetric key that exists in the keystore. The intent is to reference just the asymmetric key without any regard for any certificates that may be associated with it."
                    }
                  },
                  "required": [
                    "local-definition"
                  ]
                },
                "psk": {
                  "type": "object",
                  "description": "Specifies the server identity using a PSK.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local key definition.",
                      "properties": {
                        "algorithm": {
                          "enum": [
                            "aes-128-cbc",
                            "aes-192-cbc",
                            "aes-256-cbc",
                            "aes-128-ctr",
                            "aes-192-ctr",
                            "aes-256-ctr",
                            "des3-cbc-sha1-kd",
                            "rc4-hmac",
                            "rc4-hmac-exp"
                          ],
                          "description": "The algorithm to be used when generating the key."
                        },
                        "key-format": {
                          "type": "string",
                          "description": "Identifies the symmetric key's format."
                        },
                        "encrypted-key": {
                          "type": "object",
                          "description": "A container for the encrypted symmetric key value.",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The private key, encrypted using the specified symmetric or asymmetric key."
                            },
                            "symmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies a symmetric key used to encrypt this key."
                            },
                            "asymmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies an asymmetric key used to encrypt this key."
                            }
                          }
                        },
                        "key": {
                          "type": "string",
                          "description": "The binary value of the key. The interpretation of the value is defined by 'key-format'. For example, FIXME."
                        },
                        "hidden-key": {
                          "type": "array",
                          "items": {
                            "type": "null"
                          },
                          "description": "A permanently hidden key. How such keys are created is outside the scope of this module."
                        }
                      },
                      "required": [
                        "algorithm"
                      ]
                    },
                    "keystore-reference": {
                      "type": "string",
                      "description": "A reference to an symmetric key that exists in the keystore."
                    }
                  },
                  "required": [
                    "local-definition"
                  ]
                }
              }
            },
            "client-authentication": {
              "type": "object",
              "description": "Specifies how the TLS server can authenticate TLS clients. Any combination of credentials is additive and unordered. Note that no configuration is required for PSK (pre-shared or pairwise-symmetric key) based authentication as the key is necessarily the same as configured in the '../server- identity' node.",
              "properties": {
                "ca-certs": {
                  "type": "object",
                  "description": "A set of certificate authority (CA) certificates used by the TLS server to authenticate TLS client certificates. A client certificate is authenticated if it has a valid chain of trust to a configured CA certificate.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local trust anchor definitions.",
                      "properties": {
                        "cert": {
                          "type": "array",
                          "description": "The binary certificate data for this certificate.",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "truststore-reference": {
                      "type": "string",
                      "description": "A reference to a set of trust anchors that exists in the truststore."
                    }
                  }
                },
                "client-certs": {
                  "type": "object",
                  "description": "A set of client certificates (i.e., end entity certificates) used by the TLS server to authenticate certificates presented by TLS clients. A client certificate is authenticated if it is an exact match to a configured client certificate.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local trust anchor definitions.",
                      "properties": {
                        "cert": {
                          "type": "array",
                          "description": "The binary certificate data for this certificate.",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "truststore-reference": {
                      "type": "string",
                      "description": "A reference to a set of trust anchors that exists in the truststore."
                    }
                  }
                },
                "raw-public-keys": {
                  "type": "object",
                  "description": "A set of raw public keys used by the TLS server to authenticate raw public keys presented by the TLS client. A raw public key is authenticated if it is an exact match to a configured raw public key.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold local raw public key definitions.",
                      "properties": {
                        "raw-public-key": {
                          "type": "array",
                          "uniqueItems": true,
                          "description": "A raw public key definition.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "An arbitrary name for this raw public key."
                              },
                              "algorithm": {
                                "enum": [
                                  "rsa1024",
                                  "rsa2048",
                                  "rsa3072",
                                  "rsa4096",
                                  "rsa7680",
                                  "rsa15360",
                                  "secp192r1",
                                  "secp224r1",
                                  "secp256r1",
                                  "secp384r1",
                                  "secp521r1",
                                  "x25519",
                                  "x448"
                                ],
                                "description": "Identifies the key's algorithm."
                              },
                              "public-key-format": {
                                "type": "string",
                                "description": "Identifies the key's format."
                              },
                              "public-key": {
                                "type": "string",
                                "description": "The binary value of the public key. The interpretation of the value is defined by 'public-key-format' field."
                              }
                            },
                            "required": [
                              "algorithm",
                              "public-key"
                            ]
                          }
                        }
                      }
                    },
                    "truststore-reference": {
                      "type": "string",
                      "description": "A reference to a set of raw public keys that exist in the truststore."
                    }
                  }
                }
              }
            },
            "hello-params": {
              "type": "object",
              "description": "Configurable parameters for the TLS hello message.",
              "properties": {
                "tls-versions": {
                  "type": "object",
                  "description": "Parameters regarding TLS versions.",
                  "properties": {
                    "tls-version": {
                      "type": "array",
                      "description": "Acceptable TLS protocol versions. If this leaf-list is not configured (has zero elements) the acceptable TLS protocol versions are implementation- defined.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "cipher-suites": {
                  "type": "object",
                  "description": "Parameters regarding cipher suites.",
                  "properties": {
                    "cipher-suite": {
                      "type": "array",
                      "description": "Acceptable cipher suites in order of descending preference. The configured host key algorithms should be compatible with the algorithm used by the configured private key. Please see Section 5 of RFC XXXX for valid combinations. If this leaf-list is not configured (has zero elements) the acceptable cipher suites are implementation- defined.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "keepalives": {
              "type": "object",
              "description": "Configures the keep-alive policy, to proactively test the aliveness of the TLS client. An unresponsive TLS client is dropped after approximately max-wait * max-attempts seconds.",
              "properties": {
                "max-wait": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 1,
                  "maximum": 65535,
                  "description": "Sets the amount of time in seconds after which if no data has been received from the TLS client, a TLS-level message will be sent to test the aliveness of the TLS client.",
                  "default": "30"
                },
                "max-attempts": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0,
                  "maximum": 255,
                  "description": "Sets the maximum number of sequential keep-alive messages that can fail to obtain a response from the TLS client before assuming the TLS client is no longer alive.",
                  "default": "3"
                }
              }
            }
          }
        },
        "trust-category": {
          "type": "object",
          "description": "The trust category used for authentication of DTLS protocol users. Must be set if Transport Security Model, DTLS, is used.",
          "properties": {
            "server-identity": {
              "type": "object",
              "description": "A locally-defined or referenced end-entity certificate, including any configured intermediate certificates, the TLS server will present when establishing a TLS connection in its Certificate message, as defined in Section 7.4.2 in RFC 5246.",
              "properties": {
                "certificate": {
                  "type": "object",
                  "description": "Specifies the server identity using a certificate.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local key definition.",
                      "properties": {
                        "private-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "encrypted-private-key": {
                          "type": "object",
                          "description": "A container for the encrypted asymmetric private key value.",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The private key, encrypted using the specified symmetric or asymmetric key."
                            },
                            "symmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies a symmetric key used to encrypt this key."
                            },
                            "asymmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies an asymmetric key used to encrypt this key."
                            }
                          }
                        },
                        "algorithm": {
                          "enum": [
                            "rsa1024",
                            "rsa2048",
                            "rsa3072",
                            "rsa4096",
                            "rsa7680",
                            "rsa15360",
                            "secp192r1",
                            "secp224r1",
                            "secp256r1",
                            "secp384r1",
                            "secp521r1",
                            "x25519",
                            "x448"
                          ],
                          "description": "Identifies the key's algorithm."
                        },
                        "public-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "public-key": {
                          "type": "string",
                          "description": "The binary value of the public key. The interpretation of the value is defined by 'public-key-format' field."
                        },
                        "private-key": {
                          "type": "string",
                          "description": "The value of the binary key The key's value is interpreted by the 'private-key-format' field.",
                          "eric-adp-is-passphrase": "true",
                          "format": "eric-adp-cm-secret"
                        },
                        "hidden-private-key": {
                          "type": "array",
                          "items": {
                            "type": "null"
                          },
                          "description": "A permanently hidden key. How such keys are created is outside the scope of this module."
                        },
                        "cert": {
                          "type": "string",
                          "description": "The binary certificate data for this certificate."
                        }
                      },
                      "required": [
                        "algorithm",
                        "public-key"
                      ]
                    },
                    "keystore-reference": {
                      "type": "object",
                      "description": "A reference to a specific certificate (and its associated private key) in the keystore.",
                      "properties": {
                        "asymmetric-key": {
                          "type": "string",
                          "description": "A reference to an asymmetric key in the keystore."
                        },
                        "certificate": {
                          "type": "string",
                          "description": "A reference to a specific certificate of the asymmetric key in the keystore."
                        }
                      }
                    }
                  },
                  "required": [
                    "local-definition"
                  ]
                },
                "raw-private-key": {
                  "type": "object",
                  "description": "Specifies the server identity using a raw private key.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local key definition.",
                      "properties": {
                        "private-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "encrypted-private-key": {
                          "type": "object",
                          "description": "A container for the encrypted asymmetric private key value.",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The private key, encrypted using the specified symmetric or asymmetric key."
                            },
                            "symmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies a symmetric key used to encrypt this key."
                            },
                            "asymmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies an asymmetric key used to encrypt this key."
                            }
                          }
                        },
                        "algorithm": {
                          "enum": [
                            "rsa1024",
                            "rsa2048",
                            "rsa3072",
                            "rsa4096",
                            "rsa7680",
                            "rsa15360",
                            "secp192r1",
                            "secp224r1",
                            "secp256r1",
                            "secp384r1",
                            "secp521r1",
                            "x25519",
                            "x448"
                          ],
                          "description": "Identifies the key's algorithm."
                        },
                        "public-key-format": {
                          "type": "string",
                          "description": "Identifies the key's format."
                        },
                        "public-key": {
                          "type": "string",
                          "description": "The binary value of the public key. The interpretation of the value is defined by 'public-key-format' field."
                        },
                        "private-key": {
                          "type": "string",
                          "description": "The value of the binary key The key's value is interpreted by the 'private-key-format' field.",
                          "eric-adp-is-passphrase": "true",
                          "format": "eric-adp-cm-secret"
                        },
                        "hidden-private-key": {
                          "type": "array",
                          "items": {
                            "type": "null"
                          },
                          "description": "A permanently hidden key. How such keys are created is outside the scope of this module."
                        }
                      },
                      "required": [
                        "algorithm",
                        "public-key"
                      ]
                    },
                    "keystore-reference": {
                      "type": "string",
                      "description": "A reference to an asymmetric key that exists in the keystore. The intent is to reference just the asymmetric key without any regard for any certificates that may be associated with it."
                    }
                  },
                  "required": [
                    "local-definition"
                  ]
                },
                "psk": {
                  "type": "object",
                  "description": "Specifies the server identity using a PSK.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local key definition.",
                      "properties": {
                        "algorithm": {
                          "enum": [
                            "aes-128-cbc",
                            "aes-192-cbc",
                            "aes-256-cbc",
                            "aes-128-ctr",
                            "aes-192-ctr",
                            "aes-256-ctr",
                            "des3-cbc-sha1-kd",
                            "rc4-hmac",
                            "rc4-hmac-exp"
                          ],
                          "description": "The algorithm to be used when generating the key."
                        },
                        "key-format": {
                          "type": "string",
                          "description": "Identifies the symmetric key's format."
                        },
                        "encrypted-key": {
                          "type": "object",
                          "description": "A container for the encrypted symmetric key value.",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The private key, encrypted using the specified symmetric or asymmetric key."
                            },
                            "symmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies a symmetric key used to encrypt this key."
                            },
                            "asymmetric-key-ref": {
                              "type": "string",
                              "description": "Identifies an asymmetric key used to encrypt this key."
                            }
                          }
                        },
                        "key": {
                          "type": "string",
                          "description": "The binary value of the key. The interpretation of the value is defined by 'key-format'. For example, FIXME."
                        },
                        "hidden-key": {
                          "type": "array",
                          "items": {
                            "type": "null"
                          },
                          "description": "A permanently hidden key. How such keys are created is outside the scope of this module."
                        }
                      },
                      "required": [
                        "algorithm"
                      ]
                    },
                    "keystore-reference": {
                      "type": "string",
                      "description": "A reference to an symmetric key that exists in the keystore."
                    }
                  },
                  "required": [
                    "local-definition"
                  ]
                }
              }
            },
            "client-authentication": {
              "type": "object",
              "description": "Specifies how the TLS server can authenticate TLS clients. Any combination of credentials is additive and unordered. Note that no configuration is required for PSK (pre-shared or pairwise-symmetric key) based authentication as the key is necessarily the same as configured in the '../server- identity' node.",
              "properties": {
                "ca-certs": {
                  "type": "object",
                  "description": "A set of certificate authority (CA) certificates used by the TLS server to authenticate TLS client certificates. A client certificate is authenticated if it has a valid chain of trust to a configured CA certificate.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local trust anchor definitions.",
                      "properties": {
                        "cert": {
                          "type": "array",
                          "description": "The binary certificate data for this certificate.",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "truststore-reference": {
                      "type": "string",
                      "description": "A reference to a set of trust anchors that exists in the truststore."
                    }
                  }
                },
                "client-certs": {
                  "type": "object",
                  "description": "A set of client certificates (i.e., end entity certificates) used by the TLS server to authenticate certificates presented by TLS clients. A client certificate is authenticated if it is an exact match to a configured client certificate.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold the local trust anchor definitions.",
                      "properties": {
                        "cert": {
                          "type": "array",
                          "description": "The binary certificate data for this certificate.",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "truststore-reference": {
                      "type": "string",
                      "description": "A reference to a set of trust anchors that exists in the truststore."
                    }
                  }
                },
                "raw-public-keys": {
                  "type": "object",
                  "description": "A set of raw public keys used by the TLS server to authenticate raw public keys presented by the TLS client. A raw public key is authenticated if it is an exact match to a configured raw public key.",
                  "properties": {
                    "local-definition": {
                      "type": "object",
                      "description": "Container to hold local raw public key definitions.",
                      "properties": {
                        "raw-public-key": {
                          "type": "array",
                          "uniqueItems": true,
                          "description": "A raw public key definition.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "An arbitrary name for this raw public key."
                              },
                              "algorithm": {
                                "enum": [
                                  "rsa1024",
                                  "rsa2048",
                                  "rsa3072",
                                  "rsa4096",
                                  "rsa7680",
                                  "rsa15360",
                                  "secp192r1",
                                  "secp224r1",
                                  "secp256r1",
                                  "secp384r1",
                                  "secp521r1",
                                  "x25519",
                                  "x448"
                                ],
                                "description": "Identifies the key's algorithm."
                              },
                              "public-key-format": {
                                "type": "string",
                                "description": "Identifies the key's format."
                              },
                              "public-key": {
                                "type": "string",
                                "description": "The binary value of the public key. The interpretation of the value is defined by 'public-key-format' field."
                              }
                            },
                            "required": [
                              "algorithm",
                              "public-key"
                            ]
                          }
                        }
                      }
                    },
                    "truststore-reference": {
                      "type": "string",
                      "description": "A reference to a set of raw public keys that exist in the truststore."
                    }
                  }
                }
              }
            },
            "hello-params": {
              "type": "object",
              "description": "Configurable parameters for the TLS hello message.",
              "properties": {
                "tls-versions": {
                  "type": "object",
                  "description": "Parameters regarding TLS versions.",
                  "properties": {
                    "tls-version": {
                      "type": "array",
                      "description": "Acceptable TLS protocol versions. If this leaf-list is not configured (has zero elements) the acceptable TLS protocol versions are implementation- defined.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "cipher-suites": {
                  "type": "object",
                  "description": "Parameters regarding cipher suites.",
                  "properties": {
                    "cipher-suite": {
                      "type": "array",
                      "description": "Acceptable cipher suites in order of descending preference. The configured host key algorithms should be compatible with the algorithm used by the configured private key. Please see Section 5 of RFC XXXX for valid combinations. If this leaf-list is not configured (has zero elements) the acceptable cipher suites are implementation- defined.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "keepalives": {
              "type": "object",
              "description": "Configures the keep-alive policy, to proactively test the aliveness of the TLS client. An unresponsive TLS client is dropped after approximately max-wait * max-attempts seconds.",
              "properties": {
                "max-wait": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 1,
                  "maximum": 65535,
                  "description": "Sets the amount of time in seconds after which if no data has been received from the TLS client, a TLS-level message will be sent to test the aliveness of the TLS client.",
                  "default": "30"
                },
                "max-attempts": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0,
                  "maximum": 255,
                  "description": "Sets the maximum number of sequential keep-alive messages that can fail to obtain a response from the TLS client before assuming the TLS client is no longer alive.",
                  "default": "3"
                }
              }
            }
          }
        },
        "snmp-target-v2c": {
          "type": "array",
          "uniqueItems": true,
          "description": "SNMP target defines a trap receiver and gives access privileges.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "administrative-state": {
                "enum": [
                  "locked",
                  "unlocked"
                ],
                "description": "Administrative state for SNMP target. If locked, traps are not sent.",
                "default": "unlocked"
              },
              "community": {
                "type": "string",
                "description": "SNMP community string."
              },
              "is-mib-writable": {
                "type": "boolean",
                "readOnly": true,
                "description": "Specifies if users have write-access to MIB. If false, users are only allowed to perform read-access, such as SNMP GET.",
                "default": "false"
              },
              "network-prefix-length": {
                "type": "integer",
                "format": "uint8",
                "minimum": 1,
                "maximum": 128,
                "description": "The network prefix length identifying the number of subnet mask bits in the target address. For IPv4 target address, range 1-32 For IPv6 target address, range 1-128 Used only when enable-source-check-for-v1v2c in the snmp list is true. The agent uses the value to determine the source IP address range permitted to execute Snmp GET and SET on managed device. If not present it means that Snmp GET and SET shall be permitted from just a single target IP as configured in host leaf of this list entry."
              },
              "host": {
                "type": "string",
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      }
                    ]
                  },
                  {
                    "format": "hostname"
                  }
                ],
                "description": "The host IP address or a DNS domain name."
              },
              "port": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0,
                "maximum": 65535,
                "description": "The host port.",
                "default": "162"
              },
              "transport-method": {
                "enum": [
                  "trap"
                ],
                "description": "Method type used.",
                "default": "trap"
              }
            },
            "required": [
              "community",
              "host",
              "id"
            ]
          }
        },
        "snmp-view-v2c": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "maxItems": 1,
          "description": "SNMP view gives users access to SNMP MIBs. This list explicitly defines a view for SNMP V2C users. Users are identified by community name.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "community": {
                "type": "array",
                "description": "The SNMP V2C communities that this view shall be applied on.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "snmp-target-v3": {
          "type": "array",
          "uniqueItems": true,
          "description": "SNMP target defines a trap receiver and gives access privileges. This list, defines V3 USM protocol attributes.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "administrative-state": {
                "enum": [
                  "locked",
                  "unlocked"
                ],
                "description": "Administrative state for SNMP target. If locked, traps are not sent.",
                "default": "unlocked"
              },
              "host": {
                "type": "string",
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      }
                    ]
                  },
                  {
                    "format": "hostname"
                  }
                ],
                "description": "The host IP address or a DNS domain name."
              },
              "port": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0,
                "maximum": 65535,
                "description": "The host port.",
                "default": "162"
              },
              "user": {
                "type": "string",
                "description": "SNMP V3 user name for the SNMP V3 message."
              },
              "snmp-security-level": {
                "enum": [
                  "no-auth-no-priv",
                  "auth-no-priv",
                  "auth-priv"
                ],
                "description": "Specifies the level of security applied to messages exchanged with this target.",
                "default": "auth-priv"
              },
              "auth-protocol": {
                "enum": [
                  "md5",
                  "sha1"
                ],
                "description": "Authentication protocol used. Value relevant only when authentication is enabled. See leaf snmpSecurityLevel.",
                "default": "sha1"
              },
              "auth-key": {
                "type": "string",
                "description": "Authentication key used for signing SNMP notifications. Value relevant only if authentication is enabled. See leaf snmpSecurityLevel. If authentication is enabled key MUST contain at least 8 characters.",
                "eric-adp-is-passphrase": "true",
                "format": "eric-adp-cm-secret"
              },
              "priv-protocol": {
                "enum": [
                  "aes-128-cfb",
                  "des-cbc"
                ],
                "description": "Privacy protocol used. Relevant only if privacy is enabled. See leaf snmpSecurityLevel.",
                "default": "aes-128-cfb"
              },
              "priv-key": {
                "type": "string",
                "description": "Privacy key used for encryption. User's privKey encrypts the data portion of the message. Value relevant only if privacy is enabled. See leaf snmpSecurityLevel. If privacy is enabled key MUST contain at least 8 characters.",
                "eric-adp-is-passphrase": "true",
                "format": "eric-adp-cm-secret"
              },
              "is-mib-writable": {
                "type": "boolean",
                "readOnly": true,
                "description": "Specifies if users have write-access to MIB. If false, users are only allowed to perform read-access, such as SNMP GET.",
                "default": "false"
              },
              "transport-method": {
                "enum": [
                  "trap"
                ],
                "description": "Method type used.",
                "default": "trap"
              }
            },
            "required": [
              "host",
              "id",
              "user"
            ]
          }
        },
        "snmp-target-v3dtls": {
          "type": "array",
          "uniqueItems": true,
          "description": "SNMP target defines a trap receiver and gives access privileges. This list defines attributes needed for SNMP over DTLS. nodeCredential and trustCategory defined in the parent snmp container are used. DTLS is used as transport protocol for incoming requests, outgoing responses and SNMP notifications.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "administrative-state": {
                "enum": [
                  "locked",
                  "unlocked"
                ],
                "description": "Administrative state for SNMP target. If locked, traps are not sent.",
                "default": "unlocked"
              },
              "host": {
                "type": "string",
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      }
                    ]
                  },
                  {
                    "format": "hostname"
                  }
                ],
                "description": "The host IP address or a DNS domain name."
              },
              "port": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0,
                "maximum": 65535,
                "description": "The host port.",
                "default": "10162"
              },
              "user": {
                "type": "string",
                "description": "SNMP V3 user name. Used for authorization of incoming SNMP requests. Defined by the subject alternative name field, from the certificate provided by the client during DTLS session setup."
              },
              "is-mib-writable": {
                "type": "boolean",
                "readOnly": true,
                "description": "Specifies if users have write-access to MIB. If false, users are only allowed to perform read-access, such as SNMP GET.",
                "default": "false"
              },
              "transport-method": {
                "enum": [
                  "trap"
                ],
                "description": "Method type used.",
                "default": "trap"
              }
            },
            "required": [
              "host",
              "id",
              "user"
            ]
          }
        },
        "snmp-view-v3": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "maxItems": 1,
          "description": "SNMP view gives users access to SNMP MIBs. This list explicitly defines a view for SNMP V3 users.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "user": {
                "type": "array",
                "description": "The SNMP V3 users that this view shall be applied on.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "eric-adp-genoptions": [
    {
      "module-prefixing": false
    },
    {
      "encoding-format": "eric-rfc7951-json"
    },
    {
      "generate-submodule-jsonschema": false
    },
    {
      "additional-properties": true
    }
  ],
  "eric-adp-encoding-format": "eric-rfc7951-json",
  "eric-adp-yang-module": "ericsson-snmp"
}