{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Generated by jsonschema-generator (1.27.0-124 2023-06-15 16:50:09 CEST) from Yang module ericsson-diameter-adp (1.15.0) on Mar 5, 2024, 3:56:51 PM. Features: [ericsson-brm:failsafe-backups, ericsson-brm:housekeeping, ericsson-brm:label-store, ericsson-brm:rollback-at-restore, ericsson-brm:scheduler, ericsson-brm:sftp-client-authentication, ericsson-fm:alert, ericsson-keystore-ext:cmp, ericsson-keystore-ext:manual-renewal, ericsson-keystore-ext:pkcs10, ericsson-keystore-ext:pkcs12, ericsson-keystore-ext:pkcs8, ericsson-keystore-ext:scep, ericsson-notifications:netconf-state-change, ericsson-pm:measurement-jobs, ericsson-pm:realtime-jobs, ericsson-pm:threshold-jobs, ericsson-snmp:dtls, ericsson-snmp:network-prefix-validation, ericsson-snmp:no-auth-no-priv-feature, ericsson-system-ext:authentication-failure-alarm, ericsson-system-ext:ldap, ericsson-system-ext:ldap-authentication, ericsson-system-ext:ldap-clear, ericsson-system-ext:ldap-custom-filter, ericsson-system-ext:ldap-posix-filter, ericsson-system-ext:ldap-sasl-external, ericsson-system-ext:local-target-classes, ericsson-system-ext:ntp-security, ericsson-system-ext:oauth2-client-authentication, iana-crypt-hash:crypt-hash-md5, iana-crypt-hash:crypt-hash-sha-256, iana-crypt-hash:crypt-hash-sha-512, ietf-crypto-types:one-asymmetric-key-format, ietf-crypto-types:one-symmetric-key-format, ietf-crypto-types:encrypted-one-symmetric-key-format, ietf-crypto-types:encrypted-one-asymmetric-key-format, ietf-interfaces:arbitrary-names, ietf-interfaces:if-mib, ietf-interfaces:pre-provisioning, ietf-ip:ipv4-non-contiguous-netmasks, ietf-ip:ipv6-privacy-autoconf, ietf-keystore:key-generation, ietf-keystore:keystore-supported, ietf-keystore:local-definitions-supported, ietf-keystore:keystore-supported, ietf-netconf:candidate, ietf-netconf:confirmed-commit, ietf-netconf:rollback-on-error, ietf-netconf:startup, ietf-netconf:url, ietf-netconf:validate, ietf-netconf:writable-running, ietf-netconf:xpath, ietf-ssh-client:ssh-client-transport-params-config, ietf-ssh-client:ssh-client-keepalives, ietf-ssh-common:ssh-ctr, ietf-ssh-common:ssh-dh-group-exchange, ietf-ssh-common:ssh-ecc, ietf-ssh-common:ssh-sha2, ietf-ssh-common:ssh-x509-certs, ietf-system:authentication, ietf-system:dns-udp-tcp-port, ietf-system:local-users, ietf-system:ntp, ietf-system:ntp-udp-port, ietf-system:radius, ietf-system:radius-authentication, ietf-system:timezone-name, ietf-system:authentication, ietf-system:local-users, ietf-system:ntp, ietf-tls-client:tls-client-hello-params-config, ietf-tls-client:tls-client-keepalives, ietf-tls-client:x509-certificate-auth, ietf-tls-client:raw-public-key-auth, ietf-tls-client:psk-auth, ietf-tls-common:tls-1_0, ietf-tls-common:tls-1_1, ietf-tls-common:tls-1_2, ietf-tls-common:tls-1_3, ietf-tls-common:tls-3des, ietf-tls-common:tls-dhe, ietf-tls-common:tls-ecc, ietf-tls-common:tls-gcm, ietf-tls-common:tls-sha2, ietf-tls-server:tls-server-hello-params-config, ietf-tls-server:tls-server-keepalives, ietf-tls-server:client-auth-config-supported, ietf-tls-server:external-client-auth-supported, ietf-tls-server:x509-certificate-auth, ietf-tls-server:raw-public-key-auth, ietf-tls-server:psk-auth, ietf-truststore:local-definitions-supported, ietf-truststore:raw-public-keys, ietf-truststore:ssh-host-keys, ietf-truststore:truststore-supported, ietf-truststore:x509-certificates, ietf-truststore:truststore-supported, ietf-truststore:ssh-host-keys, ietf-truststore:x509-certificates]. Deviations/extensions: [ericsson-brm-ext-adp, ericsson-data-collector-ext-adp, ericsson-fm-ext-adp, ericsson-keystore-ext, ericsson-netconf-acm-ext, ericsson-pm-dev-adp, ericsson-system-ext-aum, ericsson-system-ext, ericsson-truststore-ext, ericsson-yang-library-ext, ietf-ip, ietf-netconf-with-defaults, ietf-network-instance, tailf-acm]",
  "title": "ericsson-diameter-adp",
  "type": "object",
  "properties": {
    "ericsson-diameter-adp:diameter": {
      "type": "object",
      "description": "Diameter instance represents a singleton entry point in the configuration model of the Diameter Service.",
      "properties": {
        "user-label": {
          "type": "string",
          "description": "Label for free use."
        },
        "service": {
          "type": "array",
          "uniqueItems": true,
          "description": "A service instance is used to describe the properties of AAA Service implemented by a Diameter Service User. The settings on service instance level are influencing the interaction mechanisms performed between the Diameter Service and related AAA Service.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Used to specify the key of the service instance. The key value provided should match the name the related AAA Service implementation was registering with towards the Diameter Service through one of the Diameter Service User interfaces."
              },
              "service-execution-environment": {
                "enum": [
                  "linux",
                  "dicos"
                ],
                "readOnly": true,
                "description": "Used to indicate the execution environment type the Diameter Service User is using for AAA Service implementation."
              },
              "ingress-request-pending-timer": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0,
                "maximum": 4294967295,
                "description": "Used to specify the time-out period the Diameter Service waits for a AAA Service instance to answer a diameter ingress request message. The time-out value provided is interpreted in milliseconds. The Diameter Stack will free resources allocated for an ingress request message if not answered by AAA Service instance in the indicated time-out period. An egress answer message received for the related ingress request after the indicated time-out period is discarded by the Diameter Service. Each time an egress diameter answer message is dropped by the Diameter Stack due to the time-out configured through the request-pending-timer, the Diameter.EgressAnswMsgDiscarded.TimeOut counter is stepped. Unit: millisecond (ms) MT Impacted: Diameter.EgressAnswMsgDiscarded.TimeOut Update Effect: No impact on established Peer connections. The Diameter Service will wait the indicated time-out period for diameter answer messages pertaining to newly received diameter ingress request messages.",
                "default": "5000"
              },
              "egress-request-pending-timer": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0,
                "maximum": 4294967295,
                "description": "Used to specify the time-out period the Diameter Service waits for an answer message related to the request message sent by the AAA Service instance. The egress request message is stored temporarily in the pending queue of the Diameter Service for this timeout period. The time-out value provided is interpreted in milliseconds. The Diameter Stack will free resources allocated for an egress request message and step the Diameter.EgressReqMsgDiscarded.TimeOut counter if not answered by remote peer in the indicated time-out period. Unit: millisecond (ms) MT Impacted: Diameter.EgressReqMsgDiscarded.TimeOut Update Effect: No impact on established Peer connections.The Diameter Service will wait the indicated time-out period for diameter answer messages pertaining to newly sent diameter egress request messages.",
                "default": "10000"
              },
              "request-send-max-retry": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0,
                "maximum": 4294967295,
                "description": "Used to specify the maximum number of times the Diameter Service retries to send a diameter egress request message. Egress request message resend can be triggered by the following events: Link fail-over That is, the active Peer connection is lost and the stack is failing over to use as active another Peer connection. Time-out The time-out specified runtime by the _AAA Service_ implementation for the related diameter egress request message expires. Diameter answer message An answer with result code `DIAMETER_UNABLE_TO_DELIVER (3002)` is received. Any of the above events should appear the Diameter Service will try to resend the egress request messages the indicated amount of times. This, however, might be constraint by the number of fail-overs Diameter Service can perform upon link loss. That is, if there is no link available to send out a request message no message caching and retries are performed. Diameter Service will indicate related AAA Service instance the inability to deliver request messages. Each time an egress diameter message is resent the Diameter_EgressReqMsgResent_TotalCount counter is stepped. NOTE: The connection is excluded for a certain request in case of time-out. When an answer with result code `3002` is received from a host, all connections towards that host is excluded for a certain request. During the retried delivery of the request, the next available connection is selected based on the routing table but without the excluded connections. Unit: Count MT Impacted: Diameter.EgressReqMsgResent.TotalCount Update Effect: No impact on established Peer connections. Diameter Service will apply the newly configured retry count for egress request messages stored in message pending queue.",
                "default": "3"
              },
              "request-error-handler": {
                "enum": [
                  "stack",
                  "service"
                ],
                "readOnly": true,
                "description": "Used to indicate the layer the diameter error messages are created for related erroneous diameter ingress request messages."
              },
              "request-stack-handler-selection": {
                "enum": [
                  "local",
                  "cluster"
                ],
                "description": "Used to specify the algorithm based on which compute resources are selected for diameter ingress request message processing on Diameter Service level (that is, for message grammar validation, routing entry evaluation and message content based common diameter facility activation). Wether to use the LOCAL or the CLUSTER compute resource selection algorithm should be the result of a dimensioning activity. However, if a AAA Service needs no complex message processing activities to be performed on diameter level the LOCAL algorithm is recommended to be selected. This algorithm will provide better figures both in latency and throughput for such type of AAA Services. The default CLUSTER compute resource selection algorithm is defined on worst case basis (safety margin). Meaning, big diameter cluster with few dominant Peer connections with complex message processing needs on Diameter Service level (that is, not a typical deployment scenario for most of the Diameter Service user AAA Services). Update Effect: No impact on established Peer connections. Diameter Service will apply the newly configured distribution mechanism for message processing.",
                "default": "local"
              },
              "answer-stack-handler-selection": {
                "enum": [
                  "local",
                  "cluster"
                ],
                "description": "Used to specify the algorithm based on which compute resources are selected for diameter ingress answer message processing on Diameter Stack level (that is, for message grammar validation and message content based common diameter facility activation). Wether to use the LOCAL or the CLUSTER compute resource selection algorithm should be the result of a dimensioning activity. However, if a AAA Service needs no complex message processing activities to be performed on diameter level the LOCAL algorithm is recommended to be selected. This algorithm will provide better figures both in latency and throughput for such type of AAA Services. The default CLUSTER compute resource selection algorithm is defined on worst case basis (safety margin). Meaning, big diameter cluster with few dominant Peer connections with complex message processing needs on Diameter Service level (that is, not a typical deployment scenario for most of the Diameter Service user AAA Services). Update Effect: No impact on established Peer connections. Diameter Service will apply the newly configured distribution mechanism for message processing.",
                "default": "local"
              },
              "session-id-format-type": {
                "enum": [
                  "hlbits32",
                  "hlbits64"
                ],
                "readOnly": true,
                "description": "Used to indicate one of the different representation format types of the generated Session-Id AVP. For detailed information, see https://tools.ietf.org/html/rfc6733#section-8.8"
              },
              "enabled": {
                "type": "boolean",
                "description": "Used to enable/disable a AAA Service. As result of a service disable, all related peer diameter connections will be closed with cause indicated by the configured disconnect cause policy. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled",
                "default": "true"
              },
              "predictive-loop-avoidance-enabled": {
                "type": "boolean",
                "readOnly": true,
                "description": "System initialized, used by AAA Services playing Relay or Proxy Agent role. Predictive loop avoidance shall be enabled by relay or proxy agent, so Diameter checks for forwarding loops before forwarding or routing a request. See https://tools.ietf.org/html/rfc6733#section-6.1.7",
                "default": "false"
              },
              "fast-feedback-enabled": {
                "type": "boolean",
                "description": "Used to enable/disable fast feedback on user API when no connection is available towards the Peers where the egress request message could be routed. By default, Diameter is waiting egress-request-pending-timer period for a Peer connection to come up before sending the Diameter Service Users an error indicating no connection. If the fast-feedback-enabled is set to true, Diameter sends such indication immediatelly.",
                "default": "false"
              },
              "message-destination-validation-enabled": {
                "type": "boolean",
                "description": "Can be used to turn off message destination validation for ingress requests. If active, before routing the ingress message to a service, Destination-Host and Destination-Realm AVPs are matched against the actual configuration of the own Diameter Node. In case of a mismatch, the message is answered with DIAMETER_UNABLE_TO_DELIVER. If turned off, the ingress request is routed to a service even when Destination-Host and Destination-Realm AVPs are not matching the actual configuration. Related https://tools.ietf.org/html/rfc6733#section-6.1.4",
                "default": "true"
              },
              "load-regulation-priority": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0,
                "maximum": 19,
                "description": "Can be used during load regulation to prioritize diameter messages carrying the Application-Id implemented by the service. That is, when messages are to be dropped by the stack due to load regulation, those having the lowest priority are dropped first.",
                "default": "9"
              },
              "user-label": {
                "type": "string",
                "description": "Label for free use."
              },
              "application": {
                "type": "array",
                "description": "Used to indicate the set of Diameter Applications (https://tools.ietf.org/html/rfc6733#section-1.3.4) implemented by the AAA Service.",
                "items": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "reroute-policy": {
                "type": "string",
                "description": "Reference to a reroute policy"
              },
              "local-endpoint-reference": {
                "type": "array",
                "uniqueItems": true,
                "description": "A local-endpoint-reference instance is used to associate an already defined diameter transport local endpoint with a AAA Service. A AAA Service can use arbitrary number of transport local endpoints. However, all of these endpoints must be associated with the same Diameter Node (represented by node). The settings on local-endpoint-reference instance level are influencing the way the Peer connections associated with a certain transport endpoint are handled.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Used to specify the key of the local-endpoint-reference instance."
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Used to enable or disable the use of the referred transport local endpoint for the related AAA Service (that is, it disables the related local-endpoint-reference instance). true: The use of the referred transport local endpoint is allowed. false: The use of the referred transport local endpoint is disallowed. Disabling a local-endpoint-reference instance will result in dropping all the Peer connections established through the referred local-endpoint instance between parent AAA Service and related Diameter Peers. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: All established Diameter Peer connections linked to referred endpoint are dropped if value set to false.",
                      "default": "true"
                    },
                    "rank": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0,
                      "maximum": 4294967295,
                      "description": "Used to express precedence for referred transport local endpoint selection during diameter egress request message routing. The rank value is considered during diameter egress request message routing when references towards multiple transport local endpoints are defined for a AAA Service (that is, multiple local-endpoint-reference are defined for same AAA Service) and the referred transport local endpoints are pointing to either: static peers with no connection restriction: Diameter Peers represented by dedicated static-peer in the diameter data tree with connection amount restriction towards same peer disabled (see also restrict-connections of static-peer) dynamic peers with or without connection restriction: Diameter Peers allowed to connect to the own Diameter Node as result of matching conditions expressed through a related dynamic-peer-acceptor with or without restriction on connection amount (see also restrict-connections of dynamic-peer-acceptor). The lowest the value provided the highest the priority assigned to the referred endpoint in related AAA Service configuration context. That is, the highest priority is assigned to a referred transport local endpoint by setting the rank value to 0. Multiple local-endpoint-reference instances of a AAA Service presenting same rank value and pointing to transport local endpoints falling into one of the conditions above defined will have equal priority during routing evaluation. That is, in such conditions the Diameter Service will perform https://tools.ietf.org/html/rfc6733#section-8.8[Session-Id AVP] hashing based message load balancing (load sharing) between the relevant transport connections. If the https://tools.ietf.org/html/rfc6733#section-8.8[Session-Id AVP] is not present in the related diameter request message connections are selected in random order. Update Effect: Depending on configured value a link fail-over might be triggered."
                    },
                    "application": {
                      "type": "array",
                      "description": "Used to restrict the use of referred transport local endpoint to a limited set of Diameter Applications implemented by the AAA Service. That is, the referred Diameter Applications must be a full-set or a sub-set of the Diameter Applications implemented by the parent AAA Service. The values shall refer to those applications that are allowed to use the referred transport local endpoint. Update Effect: All established Diameter Peer connections linked to related AAA Service are dropped and reestablished with updated Diameter Application information.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "local-endpoint": {
                      "type": "string",
                      "description": "Used to specify the reference towards the transport local endpoint the AAA Service should use. That is, the relevant local-endpoint."
                    },
                    "user-label": {
                      "type": "string",
                      "description": "Label for free use."
                    }
                  },
                  "required": [
                    "id",
                    "local-endpoint"
                  ]
                }
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "applications": {
          "type": "array",
          "uniqueItems": true,
          "description": "The instances of applications are used to define https://tools.ietf.org/html/rfc6733#section-1.3.4 Diameter Applications as defined by the Diameter Base Protocol (https://tools.ietf.org/html/rfc6733. A AAA Service can implement the client, server or agent side of one or several Diameter Applications. The behavior of implemented Diameter Applications is defined through related Diameter Application Specifications released by different standardization bodies (for example: 3GPP, IETF, ETSI, and so on) or vendors (for example: Ericsson).",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Used to specify the key of the applications"
              },
              "auth-application-id": {
                "type": "array",
                "description": "Used to advertise support of the Authentication and Authorization portion of a Diameter Application.",
                "items": {
                  "type": "integer",
                  "readOnly": true,
                  "format": "uint32",
                  "minimum": 0,
                  "maximum": 4294967295
                }
              },
              "acct-application-id": {
                "type": "array",
                "description": "Used to advertise support of the Accounting portion of a Diameter Application.",
                "items": {
                  "type": "integer",
                  "readOnly": true,
                  "format": "uint32",
                  "minimum": 0,
                  "maximum": 4294967295
                }
              },
              "supported-vendor-id": {
                "type": "array",
                "description": "Used to advertise support for AVPs defined by vendors other than the device vendor but including the application vendor.",
                "items": {
                  "type": "integer",
                  "readOnly": true,
                  "format": "uint32",
                  "minimum": 0,
                  "maximum": 4294967295
                }
              },
              "vendor-specific-application-id": {
                "type": "array",
                "description": "Used to advertise support of one or more Vendor-Specific Diameter Applications represented by related vendor-specific-application-id instances.",
                "items": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "dictionary": {
                "type": "array",
                "minItems": 1,
                "description": "Used to refer to the Diameter Application Specifications of the Diameter Applications advertised by the applications instance. A Diameter Application Specification is a dictionary holding the grammar of the diameter messages used by a Diameter Application. These dictionaries are stored in related dictionary instances.",
                "items": {
                  "type": "string",
                  "readOnly": true
                }
              }
            },
            "required": [
              "dictionary",
              "id"
            ]
          }
        },
        "vendor-specific-application-id": {
          "type": "array",
          "uniqueItems": true,
          "description": "A vendor-specific-application-id instance is used to provide information about a vendor specific Diameter Application. The information provided in a vendor-specific-application-id instance is used to construct a Vendor-Specific-Application-Id AVP (https://tools.ietf.org/html/rfc6733#section-6.11) which is of type grouped. Each of a vendor-specific-application-id instance represents a Vendor-Specific-Application-Id AVP. The handling rules defined for Vendor-Specific-Application-Id AVP applies for the related vendor-specific-application-id instance as well.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The key of the vendor-specific-application-id instance."
              },
              "vendor-id": {
                "type": "integer",
                "readOnly": true,
                "format": "uint32",
                "minimum": 0,
                "maximum": 4294967295,
                "description": "Used to indicate the identity of the vendor who might have authorship of the Vendor-Specific Diameter Application."
              },
              "auth-application-id": {
                "type": "integer",
                "readOnly": true,
                "format": "uint32",
                "minimum": 0,
                "maximum": 4294967295,
                "description": "Used to advertise support of the Authentication and Authorization portion of a Vendor-Specific Diameter Application."
              },
              "acct-application-id": {
                "type": "integer",
                "readOnly": true,
                "format": "uint32",
                "minimum": 0,
                "maximum": 4294967295,
                "description": "Used in order to advertise support of the Accounting portion of a Vendor-Specific Diameter Application."
              },
              "user-label": {
                "type": "string",
                "description": "Label for free use."
              }
            },
            "required": [
              "id",
              "vendor-id"
            ]
          }
        },
        "dictionary": {
          "type": "array",
          "uniqueItems": true,
          "description": "A dictionary instance is used to store the dictionary of a Diameter Application.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Used to specify the key of the dictionary instance."
              },
              "specification": {
                "type": "string",
                "readOnly": true,
                "description": "Used to load a Diameter Application dictionary."
              },
              "dictionary-extension": {
                "type": "object",
                "description": "Allows the application integrator or operator to extend system created diameter dictionary specification. User must have throughout knowledge of Diameter standard, Dias Language Specification, diameter Peer's behavior and diameter user application logic. In case of any inconsistencies Diameter Configuration Failure alarm is raised. Update Effect: Changes performed on DiaDictionaryExt level is considered during message validation, that is diameter message grammar validation is performed according to the updated dictionary content that is merged on stack level.",
                "properties": {
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "updated-avp": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Used to modify the AVP flag rules of an existing AVP definition. AVP shall be specified by related dictionary specification (that is by ../../specification), otherwise Diameter Configuration Failure alarm is raised.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "avp-name": {
                          "type": "string",
                          "description": "AVP name (avp_name of @avp_types) according to DiaS Language specification, for example: Policy-Counter-Identifier"
                        },
                        "flag-rule-must": {
                          "type": "string",
                          "pattern": "^(-|M|V|MV)$",
                          "description": "Must rule (that is 1st column) from AVP flags (avp_flags) extended format according to DiaS Language specification, where example flag rule in extended format MV|-|-|- could be defined with flag-rule-must(MV) and flag-rule-must-not(-)"
                        },
                        "flag-rule-must-not": {
                          "type": "string",
                          "pattern": "^(-|M|V|MV)$",
                          "description": "Must not rule (that is 4th column) from AVP flags (avp_flags) extended format according to DiaS Language specification, where example flag rule in extended format -|-|-|M could be defined with flag-rule-must(-) and flag-rule-must-not(M)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Used to enable or disable the object.",
                          "default": "true"
                        },
                        "user-label": {
                          "type": "string",
                          "description": "Label for free use."
                        }
                      },
                      "required": [
                        "avp-name",
                        "flag-rule-must",
                        "flag-rule-must-not"
                      ]
                    }
                  },
                  "new-avp": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Used to add a new (non-existing) AVP or Grouped AVP into an existing Command Code Format (CCF_spec in @messages) or Grouped AVP (grouped_avp_spec in @grouped) specification. If an existing AVP is referred, Diameter Configuration Failure alarm is raised.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "avp-types-def": {
                          "type": "string",
                          "description": "AVP type definition according to DiaS Language specification (see @avp_types), for example: Policy-Counter-Identifier 2901 UTF8String -|MV|-|-"
                        },
                        "grouped-def": {
                          "type": "string",
                          "description": "Grouped AVP definition according to DiaS Language specification (see @grouped), for example: Subscription-Id ::= < AVP Header: 443 > { Subscription-Id-Type } { Subscription-Id-Data }"
                        },
                        "command-code": {
                          "type": "array",
                          "uniqueItems": true,
                          "description": "Command Code Format specification (CCF or application message) to be extended with the new AVP. CCF must have already been defined by the dictionary, otherwise alarm Diameter Configuration Failure is raised. As optional AVP in [] (square brackets), the new AVP is appended at the end of the existing definition just before *[ AVP ].",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Identifies the CCF to be extended with the new AVP, for example: SL-Request."
                              },
                              "max-occurrence": {
                                "type": "integer",
                                "format": "uint32",
                                "minimum": 0,
                                "maximum": 4294967295,
                                "description": "Maximum qualifier from RFC6733, that is max from qual = [min] \\\"*\\\" [max] where min must be 0 for optional AVPs, undefined max qualifier means infinite."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "grouped-avp": {
                          "type": "array",
                          "uniqueItems": true,
                          "description": "Grouped AVP to be extended with the new AVP. Grouped AVP must have already been defined by the dictionary, otherwise alarm Diameter Configuration Failure is raised. As optional AVP in [] (square brackets), the new AVP is appended at the end of the existing definition just before *[ AVP ].",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Grouped AVP to be extended with the new AVP"
                              },
                              "max-occurrence": {
                                "type": "integer",
                                "format": "uint32",
                                "minimum": 0,
                                "maximum": 4294967295,
                                "description": "Maximum qualifier from RFC6733, that is max from qual = [min] \\\"*\\\" [max] where min must be 0 for optional AVPs, undefined max qualifier means infinite."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Used to enable or disable the object.",
                          "default": "true"
                        },
                        "user-label": {
                          "type": "string",
                          "description": "Label for free use."
                        }
                      },
                      "required": [
                        "avp-types-def"
                      ]
                    }
                  },
                  "updated-enumeration": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Used to add new value to an existing enumeration, see @enum <avp_name> in DiaS Language specification.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "enum-name": {
                          "type": "string",
                          "description": "Name of the already existing AVP of type Enumerated of the dictionary that is to be extended with new value(s), for example: SL-Request-Type. AVP shall be specified by related dictionary specification (that is by ../../specification), otherwise Diameter Configuration Failure alarm is raised."
                        },
                        "new-enum-field": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "description": "Name and value of the new enum field",
                          "items": {
                            "type": "object",
                            "properties": {
                              "enum-field-name": {
                                "type": "string",
                                "description": "For example: INTERMEDIATE_REQUEST. Must be undefined by the dictionary for the related enumeration, otherwise Diameter Configuration Failure alarm is raised."
                              },
                              "enum-field-value": {
                                "type": "integer",
                                "format": "uint16",
                                "minimum": 0,
                                "maximum": 65535,
                                "description": "For example: 12. Must be undefined by the dictionary for the related enumeration, otherwise Diameter Configuration Failure alarm is raised."
                              }
                            },
                            "required": [
                              "enum-field-name",
                              "enum-field-value"
                            ]
                          }
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Used to enable or disable the object.",
                          "default": "true"
                        },
                        "user-label": {
                          "type": "string",
                          "description": "Label for free use."
                        }
                      },
                      "required": [
                        "enum-name",
                        "new-enum-field"
                      ]
                    }
                  }
                }
              }
            },
            "required": [
              "id",
              "specification"
            ]
          }
        },
        "peer-table": {
          "type": "object",
          "description": "A peer-table system created singleton instance is to be used as a container for static-peer and dynamic-peer-acceptor instances that are used to scope/filter the Diameter Peers which should be considered and stored by the Diameter Service in its internal Peer Table.",
          "properties": {
            "static-peer": {
              "type": "array",
              "uniqueItems": true,
              "description": "A static-peer instance is used to describe in an explicit (static) way a Diameter Peer. Explicit specification of a Diameter Peer is mandated when the own Diameter Node (represented by a node instance) is expected to initiate transport connection setups towards it. Explicit specification of a Diameter Peer is optional when the Peer is expected to initiate transport connection setups towards the own Diameter Node. In such a case the Peer or a matching rule set for Peers can be specified by using the more generic dynamic-peer-acceptor. Changes on static-peer instance level might influence the transport connections already established between the own Diameter Node and Peer.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Used to specify the key of the static-peer instance."
                  },
                  "peer-origin-host": {
                    "type": "string",
                    "format": "hostname",
                    "description": "Used to specify the origin host of the diameter Peer the static-peer instance is meant to represent. The value provided for peer-origin-host, if any, is matched against the value received in the Origin Host AVP during Peer connection establishment (CER/CEA) with a Diameter Peer. If matching fails (that is, the connecting or connected Diameter Peer is no the expected one), the connection establishment is rejected. When remote-endpoint/address is not specified for a static-peer server Diameter will attempt to resolve the hereby defined origin host FQDN of the diameter Peer by Kubernetes DNS and use the result as address(es). Update Effect: All established Diameter Peer connections towards the Peers matching the static-peer expressed constraints are dropped and reestablished by need in accordance with updated information."
                  },
                  "restrict-connections": {
                    "type": "boolean",
                    "description": "Used to disallow more than one Peer connection between the own Diameter Node and the Peer represented by the current static-peer. The Diameter Base Protocol specifies the use of single active connection between Diameter Peers. However, Diameter Nodes can be implemented by using a cluster of compute resources in which case the use of single Peer connection between such Diameter Nodes might be a bottleneck in handling required traffic throughput. Typically such Diameter Node implementations provides settings through which multiple Diameter Peer connections towards same Diameter Peer can be established. The Diameter Service provides support for such a functionality which can be enabled or disabled towards relevant Peer with the help of restrict-connections. Update Effect: All established Diameter Peer connections towards the peers matching the static-peer expressed constraints are dropped and reestablished by need in accordance with updated information.",
                    "default": "true"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Used to enable or disable establishment of peer connections with the Diameter Peer(s) the static-peer instance is meant to represent. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: All established Diameter Peer connections towards the peers matching the static-peer expressed constraints are disconnected upon setting to value false.",
                    "default": "true"
                  },
                  "max-connection-nr": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "description": "Limits the number of connections built from this Peer Diameter Node. Considered by the Diameter Stack if restrict-connections of the same static-peer instance is set to false and the Peer represented by static-peer is playing a connection initiation role towards the own Diameter Node (that is, the static-peer is referred by a local-endpoint through a terminate-connection-from-peer reference). 0 == Any number, that is the number of connections is not limited hereby. See also restrict-connections.",
                    "default": "4294967295"
                  },
                  "required-connection-nr": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "description": "Used to indicate a threshold for the number of redundant connections towards the Diameter Peer. When the configured threshold is crossed, one of the following alarms is raised: ADP Diameter Peer connection Number Below Required Level ADP Diameter Peer Unavailable Update Effect: When set, the configured threshold will be used by the stack during alarm handling.",
                    "default": "1"
                  },
                  "congestion-handling-policy": {
                    "type": "string",
                    "description": "Reference to a congestion-handling policy"
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "remote-endpoint": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "A remote-endpoint instance is used to specify a remote endpoint for a Diameter Peer represented by the parent static-peer instance. Many remote endpoints can be defined by need for a Diameter Peer. It is mandatory to define at least a remote endpoint if the own Diameter Node is configured to initiate connections towards the related Peer. If the Peer is the one initiating connections towards the own Diameter Node the specification of a remote endpoint can be omitted for related Peer.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Used to specify the key of the remote-endpoint instance."
                        },
                        "address": {
                          "type": "array",
                          "description": "Used to specify the list of IP addresses (IPv4 or IPv6 addresses) of the remote endpoint that can be used by the own Diameter Node to connect to a Diameter Peer (that is acting as diameter server, represented by parent static-peer instance). The address should take as value a single IP addresses if the transport protocol to be used is configured to TCP (see also the transport-protocol below). The address can take as value multiple IP addresses if the transport protocol to be used is configured to SCTP. In such a case the use of combined IPv4 and IPv6 addresses is allowed as well. When not specified for a static-peer acting as diameter server, Diameter will attempt to resolve peer-origin-host of its static-peer by Kubernetes DNS and use the result as address(es). When configured Peer acts as diameter client, the specified values are used to restrict connection attempts from specified addresses only. Only when Kubernetes externalTrafficPolicy is set to 'Local', moreover ECFE can communicate using BGP with the FE gateway router, the external IP address of the Peer could be configured hereby. In opposite to this, when Kubernetes externalTrafficPolicy is set to 'Cluster', due to the applied SNAT only the worker local address is received by Diameter, hence the usage of static-peer/remote-endpoint/address representing a client Peer is not recommended in such setups. Update Effect: All established Diameter Peer connections towards the remote endpoint represented by the related remote-endpoint instance are dropped and reestablished with updated information.",
                          "items": {
                            "type": "string",
                            "anyOf": [
                              {
                                "format": "ipv4"
                              },
                              {
                                "format": "ipv6"
                              }
                            ]
                          }
                        },
                        "port": {
                          "type": "integer",
                          "format": "uint16",
                          "minimum": 0,
                          "maximum": 65535,
                          "description": "Used to specify the port number of the remote endpoint that can be used by the own Diameter Node to connect to a Diameter Peer (represented by parent static-peer instance). The port number specified is valid for all the addresses specified for the related local-endpoint instance. It has no effect on configured Peers acting as clients. Update Effect: All established Diameter Peer connections towards the remote endpoint represented by the remote-endpoint instance are dropped and reestablished with updated information.",
                          "default": "3868"
                        },
                        "transport-protocol": {
                          "enum": [
                            "tcp",
                            "sctp"
                          ],
                          "description": "Used to specify the transport protocol of the remote endpoint that can be used by the own Diameter Node when initiating Diameter Peer connections.",
                          "default": "tcp"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Used to enable or disable the remote endpint of the Diameter Peer represented by the parent static-peer. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: All established Diameter Peer connections towards the remote endpoint represented by the related remote-endpoint instance are disconnected upon setting to value false.",
                          "default": "true"
                        },
                        "user-label": {
                          "type": "string",
                          "description": "Label for free use."
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                },
                "required": [
                  "id",
                  "peer-origin-host"
                ]
              }
            },
            "dynamic-peer-acceptor": {
              "type": "array",
              "uniqueItems": true,
              "description": "A dynamic-peer-acceptor instance is used to describe the conditions based on which Peer connection setups initiated by one or a collection of Diameter Peers are to be accepted or rejected by own Diameter Node. The Diameter Peer identifiers (like peer host IP address, origin host or origin realm) are matched against the related value matching patterns expressed in a dynamic-peer-acceptor instance. If matching is found towards all the expressed patterns the initiated Peer connection is accepted by diameter. Otherwise, the remote Peer connection initiation is rejected. Changes on dynamic-peer-acceptor instance level might influence all the Peer connections already established as result of matching towards the patterns expressed in related Peer connection acceptor instance. Note, there is no TLS hostname validation for dynamic Peers.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Used to specify the key of the dynamic-peer-acceptor instance."
                  },
                  "peer-origin-realm": {
                    "type": "array",
                    "description": "Used to specify the Origin Realm (see https://tools.ietf.org/html/rfc6733#section-6.4) validation pattern of the Diameter Peers allowed to initiate connections towards the own Diameter Node. The provided value shall be either a concrete or a pattern based representation (expressed using Perl Compatible Regular Expressions, see https://www.pcre.org/) of the Origin Realm used by Diameter Peers allowed to connect towards the own Diameter Node. The Origin Realm is a Diameter Identity (see https://tools.ietf.org/html/rfc6733#section-4.3.1) data type as defined by the Diameter Base Protocol, see Diameter Base Protocol (RFC 6733) IETF: STANDARD.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "peer-origin-host": {
                    "type": "array",
                    "description": "Used to specify the Origin Host (see https://tools.ietf.org/html/rfc6733#section-6.5) validation pattern of the Diameter Peers allowed to initiate connections towards the own Diameter Node. The provided value shall be either a concrete or a pattern based representation (expressed using Perl Compatible Regular Expressions, see https://www.pcre.org/) of the Origin Host used by Diameter Peers allowed to connect towards the own Diameter Node. The Origin Host is a Diameter Identity (see https://tools.ietf.org/html/rfc6733#section-4.3.1) data type as defined by the Diameter Base Protocol, see Diameter Base Protocol (RFC 6733) IETF: STANDARD.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "peer-host-ip-address": {
                    "type": "array",
                    "description": "Used to specify the Host IP Address (see https://tools.ietf.org/html/rfc6733#section-5.3.5) validation pattern of the Diameter Peers allowed to initiate connections towards the own Diameter Node. The provided value shall be either a concrete or a pattern based representation (expressed using Perl Compatible Regular Expressions, see https://www.pcre.org/) of the Host IP Address used by Diameter Peers allowed to connect towards the own Diameter Node. The Host IP Address (see https://tools.ietf.org/html/rfc6733#section-4.3.1) is an Address data type as defined by the Diameter Base Protocol, see Diameter Base Protocol (RFC 6733) IETF: STANDARD. Only when Kubernetes externalTrafficPolicy is set to 'Local', moreover ECFE can communicate using BGP with the FE gateway router, the external IP address of the Peer could be configured hereby. In opposite to this, when Kubernetes externalTrafficPolicy is set to 'Cluster', due to the applied SNAT only the worker local address is received by Diameter, hence the usage of peer-host-ip-address is not recommended in such setups.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "excluded-host": {
                    "type": "array",
                    "description": "Defines an Origin Host validation pattern used to filter out Diameter Peers that are not allowed to initiate connections towards the own Diameter Node. Serves as exclude-list expression over the include-list defined by peer-origin-host.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "restrict-connections": {
                    "type": "boolean",
                    "description": "Used to disallow the establishment of more than one Diameter Peer connection from the same Diameter Peer. The Diameter Base Protocol specifies the use of single active connection between Diameter Peers (see, Diameter Base Protocol (RFC 6733) IETF: STANDARD). However, Diameter Nodes can be implemented using a cluster of compute resources in which case the use of single Peer connection between such Diameter Nodes might be a bottleneck in handling required traffic throughput. Such Diameter Node implementations provides settings through which multiple Diameter Peer connections towards same Diameter Peer can be established. diameter provides support for such a functionality as well. Update Effect: All established Diameter Peer connections towards the peers matching the dynamic-peer-acceptor expressed constraints are dropped and reestablished by need in accordance with updated information.",
                    "default": "true"
                  },
                  "max-peer-connection-nr": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "description": "Sets the maximum number of connections to be accepted from a single Diameter Peer. That is, from a peer matching the constraints expressed by the actual dynamic-peer-acceptor. In case the max-peer-connection-nr value is set to 0 the related dynamic-peer-acceptor will behave as a blocker. That is, no connections will be allowed from the diameter peers matching the filtering conditions expressed by the dynamic-peer-acceptor. Considered by the Diameter Service if restrict-connections of the same dynamic-peer-acceptor is set to false. Update Effect: If the updated value of max-peer-connection-nr is less than the previously set one, existing connections will be dropped to conform to the newly configured limit.",
                    "default": "4294967295"
                  },
                  "max-connection-nr": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "description": "Used to configure the maximum number of connections to be accepted from Diameter Peers matching the constraints expressed by the current dynamic-peer-acceptor. This is a value to be considered for all Diameter Peers accepted by the current dynamic-peer-acceptor and not a value representing individual connections per Diameter Peer (see also max-peer-connection-nr for connection number constraints per Diameter Peer). In case the max-connection-nr is set to 0 the related dynamic-peer-acceptor will behave as a blocker. That is, no connection establishment will be allowed from any of the Peers matching the constraints expressed hereby. Considered by the Diameter Service if restrict-connections of the same dynamic-peer-acceptor is set to false. Update Effect: If the updated value of max-connection-nr is less than the previously set one, existing connections will be dropped to conform to the newly configured limit.",
                    "default": "4294967295"
                  },
                  "required-connection-nr": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "description": "Used to indicate a threshold for the number of redundant connections towards a Diameter Peer. When the configured threshold is crossed, but there is at least one active connection available towards the Peer, the following alarms is raised: ADP Diameter Peer connection Number Below Required Level Update Effect: When set, the configured threshold will be used by the stack during alarm handling.",
                    "default": "1"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Used to enable or disable establishment of peer connections initiated by Diameter Peer(s) matching the different identity validation patterns as expressed by relevant dynamic-peer-acceptor instance. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: All established Diameter Peer connections towards the Peers matching the dynamic-peer-acceptor expressed constraints are disconnected upon setting to value false.",
                    "default": "true"
                  },
                  "congestion-handling-policy": {
                    "type": "string",
                    "description": "Reference to a congestion-handling policy"
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "transport": {
          "type": "object",
          "description": "A transport instance is a system created singleton object instance in the diameter configuration and it is used as a container for transport configuration. To have the own Diameter Node accept connections from or initiate connections towards Diameter Peer, data nodes of the transport subtree is to be configured accordingly. This is performed by creating one or more Local Endpoints with wanted roles and transport capabilities. Local Endpoints are specified with instances of local-endpoint.",
          "properties": {
            "node": {
              "type": "array",
              "uniqueItems": true,
              "description": "A node instance is used to specify an own Diameter Node. A Diameter Service deployment, on a certain target system, can expose/represent arbitrary number of Diameter Nodes (each of them expressed by related node instance). The different AAA Service implementations using the Diameter Service can be connected to relevant Diameter Nodes. Any changes on the node instance are applied immediately on Diameter Service level. Since all the values provides common content for diameter messages used for Diameter Peer connection setup (CER/CEA messages) and some subsequent messages, changes on related values will have as result the drop of all related Diameter Peer connections and reestablishment with updated information. The Diameter Service level queued egress request messages will be resent to relevant Diameter Peers.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Used to specify the key of the node instance."
                  },
                  "origin-realm": {
                    "type": "string",
                    "format": "hostname",
                    "description": "Used to specify the origin realm of the Diameter Node represented by the node instance. The provided value is to be expressed by complying to the Diameter Identity (https://tools.ietf.org/html/rfc6733#section-4.3.1) data type expression rules as defined by the Diameter Base Protocol. The provided value is used to construct a Origin-Realm AVP (https://tools.ietf.org/html/rfc6733#section-6.4) which is placed in capability exchange messages (CER/CEA messages) during related own Diameter Node linked Peer connection establishment. Update Effect: All established Diameter Peer connections linked to related own Diameter Node are dropped and reestablished with updated information."
                  },
                  "origin-host": {
                    "type": "string",
                    "format": "hostname",
                    "description": "Used to specify the origin host of the Diameter Node represented by the node instance. The provided value is to be expressed by complying to the Diameter Identity (https://tools.ietf.org/html/rfc6733#section-4.3.1) data type expression rules as defined by the Diameter Base Protocol. The provided value is used to construct a Origin-Host AVP (https://tools.ietf.org/html/rfc6733#section-6.3) which is placed in capability exchange messages (CER/CEA messages) during related AAA Service linked Peer connection setup. The provided value must be unique in the context of the related origin realm. Update Effect: All established Diameter Peer connections linked to related own Diameter Node are dropped and reestablished with updated information."
                  },
                  "product-name": {
                    "type": "string",
                    "description": "Used to specify the name of the product behind the Diameter Node implementing different AAA Services by using the diameter stack (for example, EIR, SAPC, IpWorks, MTAS, CSCF, HSS). The provided value is used to construct a Product-Name AVP (https://tools.ietf.org/html/rfc6733#section-5.3.7) placed in related capability exchange messages (CER/CEA messages) during Peer connection setup. The provided product name should remain constant across firmware revisions for the same product (see also firmware-revision). Update Effect: All established Diameter Peer connections linked to related own Diameter Node are dropped and reestablished with updated information."
                  },
                  "vendor-id": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "description": "Used to specify the identity of the vendor implementing the product specified for product-name. The should take as value an IANA allocated SMI Network Management Private Enterprise Code (see https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers ) assigned for the vendor implementing the product specified for product-name. Unless the product developer center is not registered with own vendor identity one should use the value 193 assigned to Ericsson AB. The provided value is used to construct a Vendor-Id AVP (https://tools.ietf.org/html/rfc6733#section-5.3.3) placed in related capability exchange messages (CER/CEA messages) during Peer connection setup. Update Effect: All established Diameter Peer connections linked to related own Diameter Node are dropped and reestablished with updated information.",
                    "default": "193"
                  },
                  "firmware-revision": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "description": "Used to specify the revision of the software product specified for product-name. If there is an value provided it is used to construct a Firmware-Revision AVP (https://tools.ietf.org/html/rfc6733#section-5.3.4) placed in related capability exchange messages (CER/CEA messages) during Peer connection setup. Update Effect: All established Diameter Peer connections linked to related own Diameter Node are dropped and reestablished with updated information."
                  },
                  "host-ip-address": {
                    "type": "array",
                    "description": "Used to specify the list of IP addresses (a list of IPv4 and/or IPv6 addresses) that can be used by a Diameter Peer to connect to the own Diameter Node. The IP addresses specified shall visible for related Diameter Peers (for instance the IP address of external IP load balancer behind which the own Diameter Node is placed or alternatively the SENP VIP address). The provided values are used to construct relevant Host-IP-Address AVP (https://tools.ietf.org/html/rfc6733#section-5.3.5) which is placed in capability exchange messages (CER/CEA messages) during related AAA Service linked Peer connection setup. If no value is provided, the Host-IP-Address AVP is constructed by using the IP addresses provided for the own Diameter Node related Local Endpoints (see local-endpoint). Update Effect: All established Diameter Peer connections linked to related own Diameter Node are dropped and reestablished with updated information.",
                    "items": {
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        }
                      ]
                    }
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "tls-profile": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "TLS profile to be associated with local-endpoints of the node. Properties of tls-profile are used when securing connections for TCP transports with TLS 1.2 or TLS 1.3.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Used to specify the key of the tls-profile instance."
                        },
                        "keystore-reference": {
                          "type": "object",
                          "description": "Reference to a Diameter specific certificate and its associated private key in the keystore, but only those printed by action show-deployed-certificates can be referenced. TLS host name validation in Diameter Peer may require using a certificate where included subject alternative name is matching the originHost of the Diameter Own Node (see node origin-host). Update Effect: All established Diameter Peer connections linked to related tls-profile are dropped and reestablished with updated information.",
                          "properties": {
                            "asymmetric-key": {
                              "type": "string",
                              "description": "A reference to an asymmetric key in the keystore."
                            },
                            "certificate": {
                              "type": "string",
                              "description": "A reference to a specific certificate of the asymmetric key in the keystore."
                            }
                          }
                        },
                        "truststore-reference": {
                          "type": "string",
                          "description": "Reference to a set of Diameter trust anchors that exists in the truststore, but only those printed by action show-deployed-certificates can be referenced. These optional trusts are used when authenticating the Peer. Update Effect: All established Diameter Peer connections linked to related tls-profile are dropped and reestablished with updated information."
                        },
                        "tls-local-version": {
                          "enum": [
                            "tls-1_2-tls-1_3",
                            "tls-1_3-only"
                          ],
                          "description": "Specifies the supported TLS versions. Only TLS 1.2 or newer is allowed for Diameter, while TLS 1.3 must always be supported. Hardening procedure can switch to TLS 1.3 only. Update Effect: All established Diameter Peer connections linked to related tls-profile are dropped and reestablished with updated information.",
                          "default": "tls-1_2-tls-1_3"
                        },
                        "tls-1_2-local-cipher-list": {
                          "type": "array",
                          "description": "Specifies the list of ciphers for TLS 1.2 based on ietf-tls-common. Due to TLS 1.2 being the minimum supported protocol version, some of the hereby listed ciphers can not be used. If a cipher excluded by RFC7540 is configured, alarm DIA Diameter Transport Vulnerability is raised for the related tls-profile. Chosen ciphers must match the deployed certificate. Update Effect: All established Diameter Peer connections linked to related tls-profile are dropped and reestablished with updated information.",
                          "items": {
                            "enum": [
                              "ecdhe-rsa-with-aes-128-gcm-sha256",
                              "ecdhe-rsa-with-aes-256-gcm-sha384",
                              "ecdhe-ecdsa-with-aes-128-gcm-sha256",
                              "ecdhe-ecdsa-with-aes-256-gcm-sha384",
                              "ecdhe-rsa-with-chacha20-poly1305-sha256",
                              "ecdhe-ecdsa-with-chacha20-poly1305-sha256",
                              "rsa-with-aes-128-cbc-sha",
                              "rsa-with-aes-256-cbc-sha",
                              "rsa-with-aes-128-cbc-sha256",
                              "rsa-with-aes-256-cbc-sha256",
                              "dhe-rsa-with-aes-128-cbc-sha",
                              "dhe-rsa-with-aes-256-cbc-sha",
                              "dhe-rsa-with-aes-128-cbc-sha256",
                              "dhe-rsa-with-aes-256-cbc-sha256",
                              "ecdhe-ecdsa-with-aes-128-cbc-sha256",
                              "ecdhe-ecdsa-with-aes-256-cbc-sha384",
                              "ecdhe-rsa-with-aes-128-cbc-sha256",
                              "ecdhe-rsa-with-aes-256-cbc-sha384",
                              "ecdhe-rsa-with-aes-128-cbc-sha",
                              "ecdhe-rsa-with-aes-256-cbc-sha",
                              "rsa-with-3des-ede-cbc-sha",
                              "ecdhe-rsa-with-3des-ede-cbc-sha"
                            ]
                          }
                        },
                        "tls-1_3-local-cipher-suites": {
                          "type": "array",
                          "description": "Specifies the cipher suites for TLS 1.3 in order of preference. Update Effect: All established Diameter Peer connections linked to related tls-profile are dropped and reestablished with updated information.",
                          "items": {
                            "enum": [
                              "tls-aes-256-gcm-sha384",
                              "tls-chacha20-poly1305-sha256",
                              "tls-aes-128-gcm-sha256",
                              "tls-aes-128-ccm-sha256",
                              "tls-aes-128-ccm-8-sha256"
                            ]
                          }
                        },
                        "security-level": {
                          "type": "integer",
                          "format": "uint16",
                          "minimum": 3,
                          "maximum": 5,
                          "description": "Specifies the TLS security level used with this profile. Hardening procedure can increase the applied security level. Level 3 Security level set to 128 bits of security. As a result RSA, DSA and DH keys shorter than 3072 bits and ECC keys shorter than 256 bits are prohibited. In addition to the level 2 exclusions cipher suites not offering forward secrecy are prohibited. TLS versions below 1.1 are not permitted. Session tickets are disabled. Level 4 Security level set to 192 bits of security. As a result RSA, DSA and DH keys shorter than 7680 bits and ECC keys shorter than 384 bits are prohibited. Cipher suites using SHA1 for the MAC are prohibited. TLS versions below 1.2 are not permitted. Level 5 Security level set to 256 bits of security. As a result RSA, DSA and DH keys shorter than 15360 bits and ECC keys shorter than 512 bits are prohibited. Update Effect: All established Diameter Peer connections linked to related tls-profile are dropped and reestablished with updated information.",
                          "default": "3"
                        },
                        "user-label": {
                          "type": "string",
                          "description": "Label for free use."
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  },
                  "dtls-profile": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "DTLS profile to be associated with SCTP local-endpoints of the node. Properties of dtls-profile are used when securing connections for SCTP transports with DTLS 1.2.. DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees. See more at https://www.rfc-editor.org/rfc/rfc6347.html Properties defined here are passed to the SCTP Service.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Used to specify the key of the dtls-profile instance."
                        },
                        "keystore-reference": {
                          "type": "object",
                          "description": "Reference to a Diameter specific certificate and its associated private key in the keystore, but only those printed by action show-deployed-certificates can be referenced. TLS host name validation in Diameter Peer may require using a certificate where included subject alternative name is matching the originHost of the Diameter Own Node (see node origin-host). Update Effect: All established Diameter Peer connections linked to related dtls-profile are dropped and reestablished with updated information.",
                          "properties": {
                            "asymmetric-key": {
                              "type": "string",
                              "description": "A reference to an asymmetric key in the keystore."
                            },
                            "certificate": {
                              "type": "string",
                              "description": "A reference to a specific certificate of the asymmetric key in the keystore."
                            }
                          }
                        },
                        "truststore-reference": {
                          "type": "string",
                          "description": "Reference to a set of Diameter trust anchors that exists in the truststore, but only those printed by action show-deployed-certificates can be referenced. These optional trusts are used when authenticating the Peer. Update Effect: All established Diameter Peer connections linked to related dtls-profile are dropped and reestablished with updated information."
                        },
                        "tls-1_2-local-cipher-list": {
                          "type": "array",
                          "description": "Specifies the list of ciphers for TLS 1.2 based on ietf-tls-common. Due to TLS 1.2 being the minimum supported protocol version, some of the hereby listed ciphers can not be used. If a cipher excluded by RFC7540 is configured, alarm DIA Diameter Transport Vulnerability is raised for the related dtls-profile. Chosen ciphers must match the deployed certificate. Update Effect: All established Diameter Peer connections linked to related dtls-profile are dropped and reestablished with updated information.",
                          "items": {
                            "enum": [
                              "ecdhe-rsa-with-aes-128-gcm-sha256",
                              "ecdhe-rsa-with-aes-256-gcm-sha384",
                              "ecdhe-ecdsa-with-aes-128-gcm-sha256",
                              "ecdhe-ecdsa-with-aes-256-gcm-sha384",
                              "ecdhe-rsa-with-chacha20-poly1305-sha256",
                              "ecdhe-ecdsa-with-chacha20-poly1305-sha256",
                              "rsa-with-aes-128-cbc-sha",
                              "rsa-with-aes-256-cbc-sha",
                              "rsa-with-aes-128-cbc-sha256",
                              "rsa-with-aes-256-cbc-sha256",
                              "dhe-rsa-with-aes-128-cbc-sha",
                              "dhe-rsa-with-aes-256-cbc-sha",
                              "dhe-rsa-with-aes-128-cbc-sha256",
                              "dhe-rsa-with-aes-256-cbc-sha256",
                              "ecdhe-ecdsa-with-aes-128-cbc-sha256",
                              "ecdhe-ecdsa-with-aes-256-cbc-sha384",
                              "ecdhe-rsa-with-aes-128-cbc-sha256",
                              "ecdhe-rsa-with-aes-256-cbc-sha384",
                              "ecdhe-rsa-with-aes-128-cbc-sha",
                              "ecdhe-rsa-with-aes-256-cbc-sha",
                              "rsa-with-3des-ede-cbc-sha",
                              "ecdhe-rsa-with-3des-ede-cbc-sha"
                            ]
                          }
                        },
                        "security-level": {
                          "type": "integer",
                          "format": "uint16",
                          "minimum": 3,
                          "maximum": 5,
                          "description": "Specifies the TLS security level used with this profile. Hardening procedure can increase the applied security level. Level 3 Security level set to 128 bits of security. As a result RSA, DSA and DH keys shorter than 3072 bits and ECC keys shorter than 256 bits are prohibited. In addition to the level 2 exclusions cipher suites not offering forward secrecy are prohibited. TLS versions below 1.1 are not permitted. Session tickets are disabled. Level 4 Security level set to 192 bits of security. As a result RSA, DSA and DH keys shorter than 7680 bits and ECC keys shorter than 384 bits are prohibited. Cipher suites using SHA1 for the MAC are prohibited. TLS versions below 1.2 are not permitted. Level 5 Security level set to 256 bits of security. As a result RSA, DSA and DH keys shorter than 15360 bits and ECC keys shorter than 512 bits are prohibited. Update Effect: All established Diameter Peer connections linked to related dtls-profile are dropped and reestablished with updated information.",
                          "default": "3"
                        },
                        "user-label": {
                          "type": "string",
                          "description": "Label for free use."
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                },
                "required": [
                  "id",
                  "origin-host",
                  "origin-realm",
                  "product-name"
                ]
              }
            },
            "host-address-resolver": {
              "type": "array",
              "uniqueItems": true,
              "description": "A host-address-resolver is used to resolve or determine a host-local IP address the Local Endpoints shall use during peer connection establishment. This object can be used when the Diameter Service is deployed on a target system where a Diameter node (a POD hosting a Diameter Service instance) might be associated with more than one IP address (see also Kubernetes Cluster Networking). Changes on host-address-resolver level are influencing all established Peer connections using the related IP address. That is, affected Peer connections are closed then reestablished by need using updated information.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Used to specify the key of the host-address-resolver instance."
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "ip-family": {
                    "enum": [
                      "ipv4",
                      "ipv6",
                      "any"
                    ],
                    "description": "When dual-stack feature is enabled on Kubernetes level, ip-family can be used to specify the IP family of the address resolved by the host-address-resolver. In other words, to specify the IP family of the IP address the related Diameter EP should bind to. In case the host-address-resolver is configured with an ip-family for which there is no IP address allocated to the Diameter Service in the Kubernetes cluster, alarm DIA Diameter Configuration Incomplete is raised",
                    "default": "any"
                  },
                  "linux-env-var": {
                    "type": "string",
                    "description": "Used to specify a Linux environment variable name the Diameter Service instances must use to resolve the related local IP address they should bind to. The Linux environment variable specified must be injected in related Diameter Service containers as well. Note, Diameter Service injects POD_IP and POD_IPS to represent Kubernetes runtime attributes .status.podIP and .status.podIPs. The .status.podIPs value holds the addresses allocated to the POD. The order in which the IPv4 and IPv6 address are placed in the .status.podIPs depends on the configuration of the Kubernetes cluster. The first item in .status.podIPs is matching the legacy .status.podIP content. Update Effect: All established Diameter Peer connections linked to Local Endpoints referring to the host-address-resolver are dropped and reestablished using the updated information."
                  }
                },
                "required": [
                  "id",
                  "linux-env-var"
                ]
              }
            },
            "secondary-network-address": {
              "type": "array",
              "uniqueItems": true,
              "description": "A secondary-network-address instance is used to specify addressing information used by SENP nVIP microservice in order to uphold separation from the traffic distributed on the default primary network within the Kubernetes cluster.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Used to specify the key of the secondary-network-address instance."
                  },
                  "senp-nvip-address": {
                    "type": "string",
                    "anyOf": [
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      }
                    ],
                    "description": "Used to specify the VIP address provided by SENP nVIP. Update Effect: All established Diameter Peer connections linked to related SENP VIP address are dropped and reestablished with updated information."
                  },
                  "senp-nvip-sctp-service-path": {
                    "type": "string",
                    "description": "Used to specify the secondary networking service path that together with related VIP address defines the SENP properties for the diameter SCTP traffic. Update Effect: All established SCTP Diameter Peer connections linked to related SENP address are dropped and reestablished with updated information."
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  }
                },
                "required": [
                  "id"
                ]
              }
            },
            "local-endpoint": {
              "type": "array",
              "uniqueItems": true,
              "description": "A local-endpoint instance is used to specify a Local Endpoint for the own Diameter Node. A Local Endpoint can play one of the following roles: Connection Initiation The Local Endpoint is configured to play a transport connection initiation role towards the configured Diameter Peer. That is, the Local Endpoint is playing a client role in the Peer connection setup flow. When initiating connections towards a Diameter Peer the initiate-connection-to-peer of the local-endpoint should hold an object reference pointing to that Diameter Peer (represented by a static-peer together with related remote-endpoint) towards which the connection initiation and related peer connection establishment is to be performed. If the local-endpoint is configured as client, it is possible to define both TCP and SCTP transports (see transport-tcp and transport-sctp) at the same time. This kind of setup could be used to implement a fallback from one transport protocol to the other (see also rank parameter of the local-endpoint), as only one of the transports (one connection per computing resource) will be set-up by the stack. The one having the lowest rank is tried first, if it fails, the next configured transport connection is tried. Connection Termination The Local Endpoint is configured to play a connection termination role for Peer Diameter Nodes. That is, the related Local Endpoint is playing a server role in the Peer connection setup flow. It listens on the configured address and port pairs and accepts incoming transport connection requests initiated by Peer Diameter Nodes. The collection of Peer Diameter Nodes allowed to setup peer connections towards a Local Endpoint of the own Diameter Node can be constrained by either using the generic Peer filtering capabilities provided by the dynamic-peer-acceptor or by using concrete Peer specification capabilities provided by the static-peer or both. The Diameter Peer initiated connection acceptance constraints are expressed for a local-endpoint by loading the related terminate-connection-from-peers and/or terminate-connection-from-accepted-peers with an object reference pointing to those static-peer and respectively dynamic-peer-acceptor instances that are used to express the different connection acceptance conditions. If local-endpoint is configured as a server, there must be only one transport defined for it, either SCTP or TCP (see transport-tcp and transport-sctp). If both transports are required for the server, two local-endpoint instances are needed. A Local Endpoint can either play a connection initiation (client) role or connection termination (server) role, therefore, a Local Endpoint must either have the terminate-connection-from-* reference or the initiate-connection-to-peer reference filled with a valid reference value but never both of them. In opposite to SCTP, TCP can only handle one address for a transport connection. As a result, in case of transport-tcp, when multiple IP addresses provided, one available address will be selected at random by the related endpoint during connection setup. If more TCP connections are required, more local-endpoints must be specified referring to multiple address instances. A Local Endpoint can be assigned with several transport capabilities. A transport capability represents a certain transport protocol implementation. The following transport capabilities (transport protocol implementations) are supported by the Diameter Service: TCP Linux Kernel implementation of the Transmission Control Protocol (TCP). E-SCTP Proprietary user-space implementation of the Stream Control Transmission Protocol (SCTP). A Local Endpoint in client role can be assigned with up to two transport capabilities representing distinct transport protocol implementations. That is, for instance, one of the transport capability can represent a TCP protocol implementation while the other one an SCTP protocol implementation. That transport capability is selected first for Peer connection handling which presents the highest configured rank and it is potentially valid for connection establishment (for instance, the configured address is available on the target system). Upon multiple valid transport capabilities with same rank one of them is selected in a random way (for example when specifying one TCP and one SCTP transport capability using same rank). A AAA Service can have assigned any number of Local Endpoints with different roles and transport capabilities. The Diameter Service runs in a cluster configuration on the target system. That is, it might span on an arbitrary number of compute resources (nodes, interpreted as POD individuals for ADP). A Local Endpoint can be configured to start in single or multiple instances on cluster level. The number of instances started for a Local Endpoint can be configured to arbitrary value but the actual instances started will never pass the number of compute resources the Diameter Service is instantiated on. For TCP transport, in case no host-address-resolver is referred by a local-endpoint, and secondary networking is not specified during installation, the primary IP address on Kubernetes configuration level (variable POD_IP hosting the value of Kubernetes runtime attribute .status.podIP) returned by the inbuilt default host resolver is used. For SCTP transport, when SCTP multi-homing with secondary networking is not enabled, the default E-SCTP behavior is to use all local addresses available on primary network, independently from the referred host-address-resolver existence. When secondary networking is defined and SCTP multi-homing is enabled by the installation and no secondary-network-address is assigned, the default SENP VIP(s) and service path defined by the E-SCTP installation is used for diameter traffic. When secondary networking is defined and SCTP multi-homing is enabled by the installation: - when only primary networking custom address is defined it is passed onto E-SCTP, - when only secondary networking custom address is defined it is passed onto E-SCTP, - when both are defined the secondary address(es) takes precedence and passed onto E-SCTP for binding. Changes on local-endpoint are applied immediately on Diameter Service level. The majority of value changes on a local-endpoint will have as result the drop of related Peer connections and reestablishment by need with updated information. Diameter Service level queued egress request messages will be resent to related Diameter Peers.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Used to specify the key of the local-endpoint instance."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Used to enable or disable the use Local Endpoint. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: All established Diameter Peer connections related to the Local Endpoint are closed if value is set to false.",
                    "default": "true"
                  },
                  "dscp": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0,
                    "maximum": 63,
                    "description": "Used to specify the Differentiated Service Code Point (DSCP) to be used during Peer connection setups for the Local Endpoint. Update Effect: Depends on used transport capability. In case of TCP there is no impact on affected peer connections. The DSCP of affected Peer connections are updated without impact on traffic and related connections. In case of SCTP the affected Peer connections are dropped and reestablished by need with updated transport properties.",
                    "default": "0"
                  },
                  "instance-count": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 255,
                    "description": "Used to specify the number of instances a Local Endpoint configured with connection initiation (client) role shall have. This has no effect on Local Endpoint configured with connection termination (server) role. It can take a value from one of the following ranges: 0: The Local Endpoint configured in connection initiation (client) mode shall have an instance started for each of the Diameter Service instances. That is, the actual Local Endpoint instance number is dynamically changing in accordance with actual Diameter Service cluster size. More Local Endpoint instances are created when the Diameter Service is scaled-out and Local Endpoint instances are removed when the Diameter Service is scaled-in. 1..255: The Local Endpoint configured in connection initiation (client) mode shall not pass on cluster level the indicated number of instances (a value specified between 1 and 255). The actual number of Local Endpoint instances created by Diameter Service will never be higher than the lowest threshold value represented by either of the actual Diameter Service cluster size or the configured Local Endpoint instance-count. The default value is 1. That is, a single instance is created for a Local Endpoint configured in connection initiation mode. The default setting assures standards behavior in relation with the restriction on number of Peer connections to be set towards same diameter peer. To have an effect when setting a value higher than one for instance-count, restrict-connections of the referred static-peer or dynamic-peer-acceptor must be set to false (see static-peer, dynamic-peer-acceptor). Update Effect: Depends on local endpoint connection role. In case of connection initiation (client) role, the configured amount of Local Endpoint instances will be applied. New Local Endpoint instances are added by need without affecting existing ones. Existing Local Endpoint instances with related peer connections are removed by need without affecting the other ones. In case of connection termination (server) role, there is no effect on value change.",
                    "default": "1"
                  },
                  "watchdog-timer": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 6000,
                    "maximum": 4294967295,
                    "description": "Used to configure the Watchdog Initial Timer (Twinit) of the Peer connections assigned with the local endpoint (see also Authentication, Authorization and Accounting (AAA) Transport Profile (RFC 3539) IETF: STANDARD). Unit: millisecond (ms) Update Effect: No impact on affected Peer connections.",
                    "default": "30000"
                  },
                  "reconnect-timer": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 1000,
                    "maximum": 4294967295,
                    "description": "Used to configure the Tc timer (https://tools.ietf.org/html/rfc6733#section-12) of the peer connections assigned with the local endpoint. That is, it is used to set the frequency the transport connection attempts are done to a diameter peer with whom no active transport connection exists. It is not recommended to configure too small Tc timer, as it can result in transport failures if related NAT cache is not flushed before the retry. Unit: millisecond (ms) Update Effect: No impact on affected Peer connections.",
                    "default": "30000"
                  },
                  "node": {
                    "type": "string",
                    "description": "Used to assign a Local Endpoint with an own Diameter Node represented by related node instance. Should take as single value a reference to that node to which the Local Endpoint must be assigned (see node). Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished with updated own Diameter Node information."
                  },
                  "initiate-connection-to-peer": {
                    "type": "string",
                    "description": "Used to set a Local Endpoint to play a connection initiator (client) role. It can take a value if terminate-connection-from-accepted-peers and terminate-connection-from-peer are not set. It shall refer to that static-peer that represents the Diameter Peer the Local Endpoint should initiate connection establishment towards (see static-peer). Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished by need with updated information."
                  },
                  "disconnect-cause-handling-policy": {
                    "type": "string",
                    "description": "Used to express the Disconnect-Cause handling policy to follow upon Peer connection close as result of operations over service instances or upon AAA Service disconnection from Diameter Service. Should take as value a reference to disconnect-cause-handling-policy. Update Effect: No impact on established Peer connections. Upon update, the Local Endpoint will apply the referred policy. If not set the Diameter Service uses the default Disconnect-Cause handling policy set to REBOOTING."
                  },
                  "terminate-connection-from-peer": {
                    "type": "array",
                    "description": "Used to set a Local Endpoint to play connection termination (server) role. It can take a value if the initiate-connection-to-peer is not set. It shall hold a list of references towards those static-peer instances which are representing Diameter Peers allowed to initiate connection establishment towards the Local Endpoint (see static-peer). Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished by need with updated information.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "terminate-connection-from-accepted-peers": {
                    "type": "array",
                    "description": "Used to set a Local Endpoint to play connection termination (server) role. It can take a value if the initiate-connection-to-peer is not set. It shall hold a list of references towards those dynamic-peer-acceptor instances which are used to express a pattern based representation of Diameter Peers allowed to initiate connection establishment towards the Local Endpoint (see dynamic-peer-acceptor). Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished by need with updated information.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "transport-tcp": {
                    "type": "object",
                    "description": "Used to assign TCP transport capability for a Local Endpoint.",
                    "properties": {
                      "port": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 65535,
                        "description": "Used to specify the port to be used by the TCP transport capability of a Local Endpoint. Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished with updated information. Depending on local endpoint role, it defaults to: 0: if local endpoint is configured in connection initiation (client) mode. 3868: if local endpoint is configured in connection termination (server) mode.",
                        "default": "0"
                      },
                      "rank": {
                        "type": "integer",
                        "format": "uint32",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "description": "Used to express precedence for transport capability selection for a Local Endpoint. That transport capability will be selected for a Local Endpoint that is valid to use (for instance, diameter can bind to specified address) and contains the lowest rank. In case of multiple valid transport capabilities assigned to a Local Endpoint with same rank one will be selected by random. Update Effect: No effect on already established Peer connections for related Local Endpoint. The new value is considered for newly established Peer connections."
                      },
                      "backlog": {
                        "type": "integer",
                        "format": "uint32",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "description": "Used to specify the backlog size of incoming connections handled by a Local Endpoint (the queue size of sockets in LISTEN state, see http://man7.org/linux/man-pages/man2/listen.2.html). This is only valid for Local Endpoints configured in connection termination (server) role. The value applied also depends on underlying OS settings (might be constrained by OS to less than configured). Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished with updated information.",
                        "default": "1024"
                      },
                      "no-delay": {
                        "type": "boolean",
                        "description": "Used to enable or disable the use of the Nagle algorithm for the TCP transport capability of a Local Endpoint. By default, TCP_NODELAY socket option is applied, the use of Nagle algorithm (see https://tools.ietf.org/html/rfc3539#section-3.2) is disabled. Update Effect: All established Diameter Peer connections assigned to local endpoint are preserved and updated with new configuration.",
                        "default": "true"
                      },
                      "address": {
                        "type": "array",
                        "description": "Offers the possibility to assign an IP address to a transport capability. In case of multiple IP addresses provided, one available address will be selected at random by the related endpoint during connection setup. Update Effect: All established Diameter Peer connections for the transport capability assigned to local endpoint are dropped and reestablished by need with updated information.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tls-profile": {
                        "type": "string",
                        "description": "If defined, endpoint uses TLS to secure the communication with properties of the referred tls-profile. If not defined, alarm DIA Diameter Transport Vulnerability is raised for the related endpoint. Update Effect: All established Diameter Peer connections assigned to local tcp endpoint are dropped and reestablished with updated information."
                      },
                      "tls-host-name-validation": {
                        "type": "boolean",
                        "description": "Can be used to turn off hostname validation on TLS secured static connections. By default, peer certificate received during TLS handshake must contain the id defined by peer-origin-host of referred static-peer instance. If turned off, alarm DIA Diameter Transport Vulnerability is raised for the related endpoint. Note, there is no hostname validation for dynamic Peers allowed by filters in dynamic-peer-acceptor instances. Has no effect on connections without TLS, that is if tls-profile is empty. Update Effect: All established Diameter Peer connections assigned to local tcp endpoint are dropped and reestablished with updated information.",
                        "default": "true"
                      }
                    }
                  },
                  "transport-sctp": {
                    "type": "object",
                    "description": "Used to assign SCTP transport capability for a Local Endpoint. Either primary or secondary NW address(es) or no address is to be defined.",
                    "properties": {
                      "port": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 65535,
                        "description": "Used to specify the port to be used by the E-SCTP transport capability of a Local Endpoint. Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished with updated information. Depending on local endpoint role, it defaults to: 0: if local endpoint is configured in connection initiation (client) mode. 3868: if local endpoint is configured in connection termination (server) mode.",
                        "default": "0"
                      },
                      "rank": {
                        "type": "integer",
                        "format": "uint32",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "description": "Used to express precedence for transport capability selection for a Local Endpoint. That transport capability will be selected for a Local Endpoint that is valid to use (for instance, diameter can bind to specified address) and contains the lowest rank. In case of multiple valid transport capabilities assigned to a Local Endpoint with same rank one will be selected by random. Update Effect: No effect on already established Peer connections for related Local Endpoint. The new value is considered for newly established Peer connections."
                      },
                      "outbound-streams": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 65535,
                        "description": "Used to configure the Number of Outbound Streams (OS) (https://tools.ietf.org/html/rfc4960#section-3.3.2) wished for the associations created for the Peer connections assigned with the local endpoint (see also Stream Control Transmission Protocol (RFC 4960) IETF: STANDARD). Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished with updated information. Unit: Count",
                        "default": "1"
                      },
                      "max-inbound-streams": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 65535,
                        "description": "Used to configure the Number of Inbound Streams (MIS) (https://tools.ietf.org/html/rfc4960#section-3.3.2) wished for the associations created for the Peer connections assigned with the local endpoint (see also Stream Control Transmission Protocol (RFC 4960) IETF: STANDARD). Update Effect: All established Diameter Peer connections assigned to local endpoint are dropped and reestablished with updated information. Unit: Count",
                        "default": "1"
                      },
                      "address": {
                        "type": "array",
                        "description": "Gives the possibility to assign IP address(es) to an E-SCTP transport capability. Note, Diameter normally does not pass it to E-SCTP to trigger default E-SCTP behaviour that is binding to all available local addresses on primary network. The only exception is when multi-homing is enabled and a custom primary address is defined hereby, that is passed onto E-SCTP for binding. Update Effect: All established Diameter Peer connections for the transport capability assigned to local endpoint are dropped and reestablished by need with updated information.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "secondary-network-address": {
                        "type": "array",
                        "description": "Gives the possibility to assign SENP VIP address(es) and related service path to an E-SCTP transport capability. At least two addresses are required for SCTP multi-homing. Diameter passes the configured values to E-SCTP for binding. Update Effect: All established Diameter Peer connections for the transport capability assigned to local endpoint are dropped and reestablished by need with updated information.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "dtls-profile": {
                        "type": "string",
                        "description": "If defined, SCTP service uses DTLS to secure the communication with properties of the hereby referred dtls-profile. If not defined, alarm DIA Diameter Transport Vulnerability is raised for the related endpoint. Update Effect: All established Diameter Peer connections assigned to local sctp endpoint are dropped and reestablished with updated information."
                      },
                      "tls-host-name-validation": {
                        "type": "boolean",
                        "description": "Can be used to turn off hostname validation on DTLS secured static connections. By default, peer certificate received during TLS handshake must contain the id defined by peer-origin-host of referred static-peer instance. If turned off, alarm DIA Diameter Transport Vulnerability is raised for the related endpoint. Note, there is no hostname validation for dynamic Peers allowed by filters in dynamic-peer-acceptor instances. Has no effect on connections without DTLS, that is if dtls-profile is empty. Update Effect: All established Diameter Peer connections assigned to local tcp endpoint are dropped and reestablished with updated information.",
                        "default": "true"
                      },
                      "sctp-profile": {
                        "type": "integer",
                        "description": "If defined, SCTP endpoint uses configuration from the referred SCTP profile. Otherwise, default sctp configuration is used (profile 0). Update Effect: All established Diameter Peer connections assigned to local sctp endpoint are dropped and reestablished with updated information."
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "node"
                ]
              }
            }
          }
        },
        "peer-selector": {
          "type": "array",
          "uniqueItems": true,
          "description": "A peer-selector instance is used to group a collection of Diameter Nodes to form a destination domain egress request messages can be passed towards as result of evaluation of those routing entries that are referring to it. Practically, in routing perspective, a peer-selector instance returns a set of Diameter Peer connections organized in increased order of their determined rank. That available Diameter Peer connection will be selected when matching criteria is found during related routing entry evaluation that is with the lowest rank. Egress request routing selects a connection from this returned set of connections by using a Session-Id AVP based hashing algorithm. If the Session-Id AVP is not present in the related diameter request message connection is selected in random order. In case multiple Peers referred by the selector through static-peer-group, peer-reference or dynamic-peer-group have equal ranks, then all the connections to these Peers are returned by the selector. If the ranks are different, only the Peer or Peers with the lowest rank is selected. The peer selections (or peer groups) should be used when Diameter Peers are to be grouped based on different criteria to form destination domains egress request messages can be passed towards as result of related routing entry evaluation. That is, peer selections are to be created only with the purpose to use them as destination domains during routing entry evaluations. In other cases the use of peer selections (peer groups) can be omitted. Define peer selections only if the route-to-peer-selection action is planned to be used when creating routing rules.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Used to specify the key of the peer-selector instance."
              },
              "update-message-destination": {
                "type": "boolean",
                "description": "When set to true in linux service-execution-environment, Diameter routing function executing route-to-peer-selection routing action checks if the Destination-Host and Destination-Realm AVPs are included in the egress request message. If they are included, Diameter ensures that they do match the peer-origin-host of the selected static-peer and its realm, respectively. This function is to be used by diameter user applications utilizing peer-selector to implement fail-over between multiple directly connected Peer Nodes (probably serving different realms) while Destination-Host and Destination-Realm AVP pair is included into the request by the user application. Message destination updates performed by Diameter routing ensures that the request won't get rejected by the message destination validation even at alternative Diameter Peer Nodes.",
                "default": "false"
              },
              "user-label": {
                "type": "string",
                "description": "Label for free use."
              },
              "static-peer-group": {
                "type": "array",
                "uniqueItems": true,
                "description": "A static-peer-group instance is used to specify a group of Diameter Peers by referring to their explicit representation expressed through related static-peer instances. Any change in the number of static peers assigned to the static-peer-group instance will be applied immediately impacting in this way the related routing entries evaluated by the routing logic of diameter.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Used to specify the key of the static-peer-group instance."
                    },
                    "rank": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0,
                      "maximum": 4294967295,
                      "description": "Used to assign a rank to the group of Diameter Peers represented by the collection of static-peer instances referred by child peer-reference instances. The lower the rank value the higher the configured rank of the static-peer-group. The default value is 0 (highest rank). Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated.",
                      "default": "0"
                    },
                    "update-message-destination": {
                      "type": "boolean",
                      "description": "Deprecated, use function on peer-selector level.",
                      "default": "false"
                    },
                    "user-label": {
                      "type": "string",
                      "description": "Label for free use."
                    },
                    "peer-reference": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "description": "A peer-reference instance is used to assign a rank to an explicit representation of a Diameter Peer (represented through referred static-peer instance). Any change on peer-reference instance values will be applied immediately impacting in this way the related routing entries evaluated by the routing logic of diameter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Used to specify the key of the peer-reference instance."
                          },
                          "rank": {
                            "type": "integer",
                            "format": "uint32",
                            "minimum": 0,
                            "maximum": 4294967295,
                            "description": "Used to assign a rank to the set of Diameter Peers represented by the collection of static-peer instances referred by the peer values. The lower the rank value the higher the configured rank of the referred Peer Diameters. The default value is 0 (highest rank). Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated.",
                            "default": "0"
                          },
                          "peer": {
                            "type": "array",
                            "minItems": 1,
                            "description": "Used to refer to a set of Diameter Peers, represented by related static-peer instances, ought to be assigned with same rank. Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "user-label": {
                            "type": "string",
                            "description": "Label for free use."
                          }
                        },
                        "required": [
                          "id",
                          "peer"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "peer-reference"
                  ]
                }
              },
              "dynamic-peer-group": {
                "type": "array",
                "uniqueItems": true,
                "description": "A dynamic-peer-group instance is used to specify a group of Diameter Peers by referring to their pattern based representation expressed through related dynamic-peer-acceptor instances. Any change in the number of Diameter Peers assigned dynamically (pattern based) to the dynamic-peer-group instance will be applied immediately impacting in this way the related routing entries evaluated by the routing logic of diameter.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Used to specify the key of the dynamic-peer-group instance."
                    },
                    "rank": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0,
                      "maximum": 4294967295,
                      "description": "Used to assign a rank to the set of Diameter Peers matching with related identity patterns expressed through dynamic-peer-acceptor instances referred by the peer values. The lower the rank value the higher the configured rank of the referred Diameter Peers. The default value is 0 (highest rank). Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated.",
                      "default": "0"
                    },
                    "peer": {
                      "type": "array",
                      "minItems": 1,
                      "description": "Used to refer to a set of dynamic-peer-acceptor instance accepted Diameter Peer ought to be assigned with same rank. Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "user-label": {
                      "type": "string",
                      "description": "Label for free use."
                    }
                  },
                  "required": [
                    "id",
                    "peer"
                  ]
                }
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "routing-table": {
          "type": "array",
          "uniqueItems": true,
          "description": "Service diameter bases its message routing mechanism on the sequential evaluation of a collection of routing rules organized in a table called routing table. Each AAA Service using diameter must have a routing table associated. A routing table can be dedicated to a single AAA Service or shared between multiple AAA Services. There can be only a single routing table associated with a certain AAA Service. When a routing decision is to be made, the corresponding Diameter ingress or egress request message is checked against such a routing table by evaluating the routing rules (also called routing entries) in it one by one. The evaluation begins with the first routing rule in the relevant routing table then continues with the next ones up until either a routing rule fires or all the routing rules in the routing table are exhausted. A routing table is represented by a routing-table instance. Any change in the content of a routing table will be applied immediately impacting in this way the related routing rules/entries evaluated by the message routing mechanism of diameter. diameter will run a message routing mechanism whenever an ingress or egress request message is received by it: Egress Request Message Routing Whenever an egress request message is created by a AAA Service and passed down the diameter stack for delivery towards wanted destination a message routing mechanism is executed, on diameter stack level, to determine the Peer connection the egress request message is to be sent through in order to have the message starting its route towards its final destination. The message routing mechanism can either take direct instruction via the runtime API from a AAA Service on the Diameter Peer(s) to be used to send an egress request message towards, or it can determine it itself by using the information stored in a previously loaded routing table. That is, a routing table assigned to a AAA Service is evaluated during egress request message sending only if there is no peer list provided by related AAA Service during message sending request invocation method invoked to request sending an egress request message holds a peers=NULL list). Ingress Request Message Routing Whenever an ingress request message is received by the diameter stack through one of its Peer connections the AAA Service the message shall be passed towards is evaluated as well by using related routing entries expressed in the routing table. The Diameter answer messages always follow the routing path built for the related request message. This is the reason why answer messages are never matched against the routing rules defined in the routing table. The expression of a routing table for a AAA Service is mandatory. A routing table associated with a AAA Service is constructed by using one or several routing entries.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Used to specify the key of the routing-table instance."
              },
              "service": {
                "type": "array",
                "minItems": 1,
                "description": "Used to refer to a set of AAA Services, represented by related service instances, the routing table should be associated with. A routing table can be assigned to many AAA Services. However, a AAA Service must be assigned with a single routing table only. Update Effect: No effect on already established Peer connections but on routing evaluation. Introduced change will be applied next time a routing entry is evaluated.",
                "items": {
                  "type": "string"
                }
              },
              "user-label": {
                "type": "string",
                "description": "Label for free use."
              },
              "routing-entry": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "description": "A routing-entry instance is used to specify a routing rule/entry. Each routing rule is constructed with the help of an expression and an action (see also related expression and action of the routing-entry instance). A routing rule can be enabled (default) or disabled by need. Only the enabled routing rules present in a routing table are considered during request message routing evaluation (disabled ones are just simply skipped). Any change in the content of a routing rule will be applied immediately impacting in this way the next routing rules/entries evaluated by the message routing mechanism of diameter.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0,
                      "maximum": 4294967295,
                      "description": "Used to specify the key of the routing-entry instance. It shall be set to the number of the related routing rule/entry. This is how user can control the order of evaluation of a routing rule/entry in the related routing table. It is recommended to increment this value in steps of 100 or 1000. In this way it is easy to inject further routing entries in an existing routing table between 2 existing routing entries."
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Used to enable or disable a routing rule/entry. When routing rule is disabled the routing rule is inactive, therefore, skipped by the diameter routing mechanism. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated.",
                      "default": "true"
                    },
                    "expression": {
                      "type": "string",
                      "description": "Used to specify the expression part of a routing rule. The expression is that part of the routing rule the request message is matched against and evaluates to either TRUE or FALSE. If it evaluates to TRUE the action of the routing rule is executed. If it evaluates to FALSE the action of the routing rule is skipped and the routing mechanism continues with matching the request message against the expression of the next routing rule in the routing table. See more about routing language elements in Routing Rule Specification Language. Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated."
                    },
                    "action": {
                      "type": "string",
                      "description": "Used to specify the action part of a routing rule. The action is that part of the routing rule which is executed if the expression part of the routing rule evaluates to TRUE (that is, when the expression fires). See more about routing language elements in Routing Rule Specification Language. Update Effect: No effect on already established Peer connections but on routing information. Introduced change will be applied next time a routing entry is evaluated."
                    },
                    "user-label": {
                      "type": "string",
                      "description": "Label for free use."
                    }
                  },
                  "required": [
                    "action",
                    "expression",
                    "id"
                  ]
                }
              }
            },
            "required": [
              "id",
              "routing-entry",
              "service"
            ]
          }
        },
        "policies": {
          "type": "object",
          "description": "Container holding various policy objects.",
          "properties": {
            "reroute-policy": {
              "type": "array",
              "uniqueItems": true,
              "description": "Specifies the answer message error codes for automatic message re-routing. The reroute-policy instance can be used to specify the answer message error codes triggering automatic egress request message rerouting using configured routing rules. The context of this policy can be scoped on AAA Service level.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Key of the routing policy."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Can be used to enable or disable the actual reroute policy. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: When enabled, the Diameter Service will apply the reroute-policy configuration. When disabled, the Diameter Service will apply the default behavior for egress request message rerouting.",
                    "default": "true"
                  },
                  "reroute-error-id": {
                    "type": "array",
                    "minItems": 1,
                    "description": "Used to specify the Diameter Result Codes which should trigger an egress request message re-routing to alternate peer based on the configured routing table. Error codes are received in the Result-Code data field of a Result-Code AVP. The following error categories exists: 1xxx (Informational) 3xxx (Protocol Errors) 4xxx (Transient Failures) 5xxx (Permanent Failure) Update Effect: When set, the Diameter Service will start to behave according to the configured reroute-policy. It will automatically reroute messages upon reception of error answers holding the configured error codes.",
                    "items": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 1000,
                      "maximum": 5999
                    }
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  }
                },
                "required": [
                  "id",
                  "reroute-error-id"
                ]
              }
            },
            "disconnect-cause-handling-policy": {
              "type": "array",
              "uniqueItems": true,
              "description": "Defines the content of the Disconnect-Cause AVP sent in the DPR.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Key of the disconnect cause handling policy."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Can be used to enable or disable the actual DisconnectCause handling policy. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: When enabled, the Diameter Service will apply the disconnect-cause-handling-policy. When disabled, the Diameter Service will apply the default behavior for DPR message content construction.",
                    "default": "true"
                  },
                  "disconnect-cause": {
                    "enum": [
                      "rebooting",
                      "busy",
                      "do_not_want_to_talk_to_you"
                    ],
                    "description": "Defines the content of the Disconnect-Cause AVP to be sent in DPRs. It is used in the Disconnect-Peer-Request message to inform the Diameter Peer about the reason of the disconnection. Update Effect: When set, the Diameter Service will apply the new configuration over scoped Local Endpoints. That is, upon Diameter Peer connection disconnection the configured error code will be applied.",
                    "default": "rebooting"
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  }
                },
                "required": [
                  "id"
                ]
              }
            },
            "congestion-handling-policy": {
              "type": "array",
              "uniqueItems": true,
              "description": "The congestion-handling-policy can be used to define the conditions (thresholds) which will trigger a traffic congestion handling towards relevant Diameter Peers. As result of congestion handling, congested Diameter Peer connection will be excluded temporarily from the list of potential routes and alternate routes (determined based on loaded routing table) will be used to send egress request messages towards relevant target Diameter Nodes. The context of this policy can be scoped on Peer level",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Key of the congestion handling policy."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Used to enable or disable a congestion-handling-policy. When disabled, the following alarm is raised: ADP Diameter Managed Object Disabled Update Effect: When enabled, the Diameter Service will apply the congestion-handling-policy configuration for scoped Diameter Peers. When disabled, the Diameter Service will apply the default behavior for Diameter Peer connection congestion handling.",
                    "default": "true"
                  },
                  "congestion-threshold-raise-level": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Used to specify the arm threshold the congestion handling policy is to be applied over the congested diameter peer connections of scoped Diameter Peers. The congested peer connection will be temporarily removed from the possible routes determined based on loaded routing table. The value, in percentage representation, represents the utilization level of the internal queue of the Local Endpoint used to send egress messages towards the scoped Diameter Peer. Update Effect: When set, the Diameter Service will apply the new threshold value.",
                    "default": "85"
                  },
                  "congestion-threshold-cease-level": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Used to specify the disarm threshold the congestion handling policy is to be ceased over the Diameter Peer connections, of scoped Diameter Peers, getting out of congestion. The Peer connection will be considered again as possible route to be used based on loaded routing table. The value, in percentage representation, represents the utilization level of the internal queue of the Local Endpoint used to send egress messages towards the scoped Diameter Peer. Update Effect: When set, the Diameter Service will apply the new threshold value.",
                    "default": "75"
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "load-control": {
          "type": "object",
          "description": "Container holding overload protection and load regulation parameters effective on stack level.",
          "properties": {
            "ingress-connection-backlog-limit": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0,
              "maximum": 4294967295,
              "description": "Used to limit the number of parallel incoming transport connections per computing resource (Diameter POD) being setup to the stack at the same time. Parallel TCP and SCTP connections are counted until capability exchange is finished, that is when CEA is sent. This is an overload protection function to improve robustness against extreme load peaks. It ensures that Diameter remains in service even at significant increase of incoming transport connections. Rejected attempts are measured by related Diameter_ConnTermDrop_OverloadProtection counter. By default(value 0), backlog of incoming connections is not limited. Calculated value shall be the result of careful user application dimensioning including load tests on different Diameter cluster sizes with various number of client Peer connections built at the same time. Update Effect: Diameter Service applies the configured backlog limit.",
              "default": "0"
            },
            "user-label": {
              "type": "string",
              "description": "Label for free use."
            },
            "load-regulation": {
              "type": "object",
              "description": "Container holding stack level load regulation related functions. Load regulation function secures high diameter traffic throughput at sustained high load via rejecting excessive ingress requests with with DIAMETER_TOO_BUSY result code. The aim of the load regulation mechanism is to regulate the incoming traffic level in a way that it maximizes the amount of successfully handled traffic on a compute resource at sustained overload, that is, to keep the load on regulation-limit level or below. Load regulation algorithm of Diameter can be applied over several measurement types monitored on stack level, see measurement-name of regulator. Measurement value samples are fetched at every granularity-period for each measurement. The number of granularity-period samplings used to calculate trends can be configured both for short and long term trend prediction. If the utilization level of any of the monitored measurement types goes above the configured hysteresis-on-limit resource utilization level, the load regulation mechanism is turned on, if it goes below the configured hysteresis-off-limit resource utilization level, the load regulation mechanism is turned off. The hysteresis-on-limit and hysteresis-off-limit utilization limits are set relative but lower or equal to the regulation-limit parameter that configures the engineered capacity of the resources for a certain system type configuration. Load regulation is not able to tolerate the negative feedback caused by the retry mechanism of the Peer node, hence make sure that retry function is turned off in the Peer. (In Diameter GS configuration see /diameter/service/request-send-max-retry). To lessen the load caused by Peer retries, incoming resent requests (with T-flag set) are dropped when regulation is taking place (when requests are rejected by load regulation). To save resources, the higher the rejection rate the less incoming requests are answered with DIAMETER_TOO_BUSY, the rest of the incoming requests are simply dropped.",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Used to enable or disable load regulation in Diameter. Update Effect: When enabled, the Diameter Service regulates ingress traffic by the configured regulators. In this case, configured `requests` must be equal to configured `limit` value in Diameter helm resources configuration. When disabled (by default), no load regulation is applied.",
                  "default": "false"
                },
                "granularity-period": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 1000,
                  "maximum": 300000,
                  "description": "Granularity period of load regulation. It defines how often the measurement values are updated for load regulation calculation. Update Effect: Diameter Service applies load regulation with the defined granularity.",
                  "default": "1000"
                },
                "reject-rate-aging-step": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "Used to set the size of the step in percentage used during aging. Aging of reject rate is applied when no measurement value has been received during the granularity period. In this case, the new reject rate value is calculated via decreasing the last value with reject-rate-aging-step percentage. Reject rate defines the percentage of the traffic that is to be rejected when load regulation is applied. Aging prevents freeze of load regulation when no measurement values are received. Update Effect: Diameter Service applies load regulation with the defined aging step.",
                  "default": "10"
                },
                "history-size": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 10,
                  "maximum": 500,
                  "description": "Used to set size of the stored history. Update Effect: Load regulation history is maintained and dumped with defined size.",
                  "default": "256"
                },
                "user-label": {
                  "type": "string",
                  "description": "Label for free use."
                },
                "regulator": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "Specifies a regulator function of Diameter load regulation.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Key of the regulator."
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Can be used to enable or disable the regulator. Update Effect: When enabled, Diameter Service will apply regulation defined hereby.",
                        "default": "true"
                      },
                      "measurement-name": {
                        "enum": [
                          "cpuload",
                          "memory-utilization"
                        ],
                        "description": "Defines the measurement type used by the regulator. Update Effect: Diameter Service applies load regulation using the defined measurement.",
                        "default": "cpuload"
                      },
                      "maximum-value": {
                        "type": "integer",
                        "format": "uint32",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "description": "Used to specify the upper limit for the releated measurement type to give a base for the related percentage based parameters defined for the regulator. Percentage based measurement types should keep default 100. Shall be used for measurement types that are not percentage based, like for example latency. Update Effect: When set, the Diameter Service starts regulation according to the specified value.",
                        "default": "100"
                      },
                      "regulation-limit": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "Used to specify the limit of the regulation in percentage relative to the maximum-value of the configured measurement. If resource usage rises above the specified load regulation limit, reject rate of ingress requests is significantly increased. Load regulation aims to keep the resource consumption around/under the configured regulation limit. The stack increases the reject rate (RR) until the configured regulation limit (LIM) is reached/crossed by the measured value (MVAL/VAL). Until the reject rate is not zero the stack answers messages with DIAMETER_TOO_BUSY (or just drops them) to decrease the resource consumption. Ingress requests rejected by load regulation are measured by Diameter_IngressReqMsgDiscarded_DiaServerLoadReg meas type. Diameter user applications can configure PM threshold based alarm on it. Update Effect: When set, the Diameter Service starts regulation according to the specified value.",
                        "default": "80"
                      },
                      "hysteresis-on-limit": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "Used to set the utilization level the load regulation mechanism is to be switched on. It is to be expressed as a percentage value relative to the configured maximum-value and lower or equal to regulation-limit. Update Effect: When set, the Diameter Service starts regulation according to the specified value.",
                        "default": "60"
                      },
                      "hysteresis-off-limit": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "Used to set the utilization level the load regulation mechanism is to be switched off. It is to be expressed as a percentage value relative to the configured maximum-value and lower or equal to regulation-limit and hysteresis-on-limit. Update Effect: When set, the Diameter Service starts regulation according to the specified value.",
                        "default": "50"
                      },
                      "short-term-samples": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 1,
                        "maximum": 300,
                        "description": "Used to set the short-term monitoring interval (number of measurement samples) for resource utilization trend prediction. It expresses how many load-regulation granularity-period to consider for short term sampling. Update Effect: When set, the Diameter Service starts regulation according to the specified value.",
                        "default": "1"
                      },
                      "long-term-samples": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 1,
                        "maximum": 300,
                        "description": "Used to set the long-term monitoring interval (number of measurement samples) for resource utilization trend prediction. It expresses how many load-regulation granularity-period to consider for long term sampling. Update Effect: When set, the Diameter Service starts regulation according to the specified value.",
                        "default": "5"
                      },
                      "user-label": {
                        "type": "string",
                        "description": "Label for free use."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "eric-adp-genoptions": [
    {
      "module-prefixing": false
    },
    {
      "encoding-format": "eric-rfc7951-json"
    },
    {
      "generate-submodule-jsonschema": false
    },
    {
      "additional-properties": true
    }
  ],
  "eric-adp-encoding-format": "eric-rfc7951-json",
  "eric-adp-yang-module": "ericsson-diameter-adp"
}