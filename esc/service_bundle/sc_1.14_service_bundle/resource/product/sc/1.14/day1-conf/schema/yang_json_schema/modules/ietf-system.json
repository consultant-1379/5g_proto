{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Generated by jsonschema-generator (1.27.0-124 2023-06-15 16:50:09 CEST) from Yang module ietf-system (2014-08-06) on Mar 5, 2024, 3:56:52 PM. Features: [ericsson-brm:failsafe-backups, ericsson-brm:housekeeping, ericsson-brm:label-store, ericsson-brm:rollback-at-restore, ericsson-brm:scheduler, ericsson-brm:sftp-client-authentication, ericsson-fm:alert, ericsson-keystore-ext:cmp, ericsson-keystore-ext:manual-renewal, ericsson-keystore-ext:pkcs10, ericsson-keystore-ext:pkcs12, ericsson-keystore-ext:pkcs8, ericsson-keystore-ext:scep, ericsson-notifications:netconf-state-change, ericsson-pm:measurement-jobs, ericsson-pm:realtime-jobs, ericsson-pm:threshold-jobs, ericsson-snmp:dtls, ericsson-snmp:network-prefix-validation, ericsson-snmp:no-auth-no-priv-feature, ericsson-system-ext:authentication-failure-alarm, ericsson-system-ext:ldap, ericsson-system-ext:ldap-authentication, ericsson-system-ext:ldap-clear, ericsson-system-ext:ldap-custom-filter, ericsson-system-ext:ldap-posix-filter, ericsson-system-ext:ldap-sasl-external, ericsson-system-ext:local-target-classes, ericsson-system-ext:ntp-security, ericsson-system-ext:oauth2-client-authentication, iana-crypt-hash:crypt-hash-md5, iana-crypt-hash:crypt-hash-sha-256, iana-crypt-hash:crypt-hash-sha-512, ietf-crypto-types:one-asymmetric-key-format, ietf-crypto-types:one-symmetric-key-format, ietf-crypto-types:encrypted-one-symmetric-key-format, ietf-crypto-types:encrypted-one-asymmetric-key-format, ietf-interfaces:arbitrary-names, ietf-interfaces:if-mib, ietf-interfaces:pre-provisioning, ietf-ip:ipv4-non-contiguous-netmasks, ietf-ip:ipv6-privacy-autoconf, ietf-keystore:key-generation, ietf-keystore:keystore-supported, ietf-keystore:local-definitions-supported, ietf-keystore:keystore-supported, ietf-netconf:candidate, ietf-netconf:confirmed-commit, ietf-netconf:rollback-on-error, ietf-netconf:startup, ietf-netconf:url, ietf-netconf:validate, ietf-netconf:writable-running, ietf-netconf:xpath, ietf-ssh-client:ssh-client-transport-params-config, ietf-ssh-client:ssh-client-keepalives, ietf-ssh-common:ssh-ctr, ietf-ssh-common:ssh-dh-group-exchange, ietf-ssh-common:ssh-ecc, ietf-ssh-common:ssh-sha2, ietf-ssh-common:ssh-x509-certs, ietf-system:authentication, ietf-system:dns-udp-tcp-port, ietf-system:local-users, ietf-system:ntp, ietf-system:ntp-udp-port, ietf-system:radius, ietf-system:radius-authentication, ietf-system:timezone-name, ietf-system:authentication, ietf-system:local-users, ietf-system:ntp, ietf-tls-client:tls-client-hello-params-config, ietf-tls-client:tls-client-keepalives, ietf-tls-client:x509-certificate-auth, ietf-tls-client:raw-public-key-auth, ietf-tls-client:psk-auth, ietf-tls-common:tls-1_0, ietf-tls-common:tls-1_1, ietf-tls-common:tls-1_2, ietf-tls-common:tls-1_3, ietf-tls-common:tls-3des, ietf-tls-common:tls-dhe, ietf-tls-common:tls-ecc, ietf-tls-common:tls-gcm, ietf-tls-common:tls-sha2, ietf-tls-server:tls-server-hello-params-config, ietf-tls-server:tls-server-keepalives, ietf-tls-server:client-auth-config-supported, ietf-tls-server:external-client-auth-supported, ietf-tls-server:x509-certificate-auth, ietf-tls-server:raw-public-key-auth, ietf-tls-server:psk-auth, ietf-truststore:local-definitions-supported, ietf-truststore:raw-public-keys, ietf-truststore:ssh-host-keys, ietf-truststore:truststore-supported, ietf-truststore:x509-certificates, ietf-truststore:truststore-supported, ietf-truststore:ssh-host-keys, ietf-truststore:x509-certificates]. Deviations/extensions: [ericsson-brm-ext-adp, ericsson-data-collector-ext-adp, ericsson-fm-ext-adp, ericsson-keystore-ext, ericsson-netconf-acm-ext, ericsson-pm-dev-adp, ericsson-system-ext-aum, ericsson-system-ext, ericsson-truststore-ext, ericsson-yang-library-ext, ietf-ip, ietf-netconf-with-defaults, ietf-network-instance, tailf-acm]",
  "title": "ietf-system",
  "type": "object",
  "properties": {
    "ietf-system:system": {
      "type": "object",
      "description": "System group configuration.",
      "properties": {
        "ntp": {
          "type": "object",
          "description": "Configuration of the NTP client.",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Indicates that the system should attempt to synchronize the system clock with an NTP server from the 'ntp/server' list.",
              "default": "true"
            },
            "server": {
              "type": "array",
              "uniqueItems": true,
              "description": "List of NTP servers to use for system clock synchronization. If '/system/ntp/enabled' is 'true', then the system will attempt to contact and utilize the specified NTP servers.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An arbitrary name for the NTP server."
                  },
                  "association-type": {
                    "enum": [
                      "server",
                      "peer",
                      "pool"
                    ],
                    "description": "The desired association type for this NTP server.",
                    "default": "server"
                  },
                  "iburst": {
                    "type": "boolean",
                    "description": "Indicates whether this server should enable burst synchronization or not.",
                    "default": "false"
                  },
                  "prefer": {
                    "type": "boolean",
                    "description": "Indicates whether this server should be preferred or not.",
                    "default": "false"
                  },
                  "administrative-state": {
                    "enum": [
                      "locked",
                      "unlocked"
                    ],
                    "description": "Locks or unlocks the administrative state of the NTP client function. This is a convenience function to permit some or all NtpServer instances to be temporarily locked without the need to delete the object List of supported key algorithms by the ME.",
                    "default": "unlocked"
                  },
                  "mac-algorithm": {
                    "type": "array",
                    "description": "The hash algorithm used towards the corresponding NTP Server.",
                    "items": {
                      "enum": [
                        "hmac-sha2-224",
                        "hmac-sha2-256",
                        "hmac-sha2-256-128",
                        "hmac-sha2-384",
                        "hmac-sha2-384-192",
                        "hmac-sha2-512",
                        "hmac-sha2-512-256"
                      ]
                    }
                  },
                  "pre-shared-key": {
                    "type": "string",
                    "description": "The pre shared key for the NTP authentication.",
                    "eric-adp-is-passphrase": "true",
                    "format": "eric-adp-cm-secret"
                  },
                  "key-id": {
                    "type": "string",
                    "format": "uint64",
                    "description": "The key ID for the NTP authentication. This is an integer identifying the cryptographic key used to generate the message authentication code."
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "udp": {
                    "type": "object",
                    "description": "Contains UDP-specific configuration parameters for NTP.",
                    "properties": {
                      "address": {
                        "type": "string",
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "format": "ipv4"
                              },
                              {
                                "format": "ipv6"
                              }
                            ]
                          },
                          {
                            "format": "hostname"
                          }
                        ],
                        "description": "The address of the NTP server."
                      },
                      "port": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 65535,
                        "description": "The port number of the NTP server.",
                        "default": "123"
                      }
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "radius": {
          "type": "object",
          "description": "Configuration of the RADIUS client.",
          "properties": {
            "server": {
              "type": "array",
              "uniqueItems": true,
              "description": "List of RADIUS servers used by the device. When the RADIUS client is invoked by a calling application, it sends the query to the first server in this list. If no response has been received within 'timeout' seconds, the client continues with the next server in the list. If no response is received from any server, the client continues with the first server again. When the client has traversed the list 'attempts' times without receiving any response, it gives up and returns an error to the calling application.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An arbitrary name for the RADIUS server."
                  },
                  "authentication-type": {
                    "type": "string",
                    "description": "The authentication type requested from the RADIUS server.",
                    "default": "radius-pap"
                  },
                  "udp": {
                    "type": "object",
                    "description": "Contains UDP-specific configuration parameters for RADIUS.",
                    "properties": {
                      "address": {
                        "type": "string",
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "format": "ipv4"
                              },
                              {
                                "format": "ipv6"
                              }
                            ]
                          },
                          {
                            "format": "hostname"
                          }
                        ],
                        "description": "The address of the RADIUS server."
                      },
                      "authentication-port": {
                        "type": "integer",
                        "format": "uint16",
                        "minimum": 0,
                        "maximum": 65535,
                        "description": "The port number of the RADIUS server.",
                        "default": "1812"
                      },
                      "shared-secret": {
                        "type": "string",
                        "description": "The shared secret, which is known to both the RADIUS client and server."
                      }
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "options": {
              "type": "object",
              "description": "RADIUS client options.",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 1,
                  "maximum": 255,
                  "description": "The number of seconds the device will wait for a response from each RADIUS server before trying with a different server.",
                  "default": "5"
                },
                "attempts": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 1,
                  "maximum": 255,
                  "description": "The number of times the device will send a query to all of its RADIUS servers before giving up.",
                  "default": "2"
                }
              }
            }
          }
        },
        "authentication": {
          "type": "object",
          "description": "The authentication configuration subtree.",
          "properties": {
            "user": {
              "type": "array",
              "uniqueItems": true,
              "description": "The list of local users configured on this device.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a-zA-Z_][a-zA-Z0-9_.-]*$",
                    "description": "The user name string identifying this entry."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for this entry.",
                    "eric-adp-is-passphrase": "true",
                    "format": "eric-adp-cm-secret"
                  },
                  "authorized-key": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "A list of public SSH keys for this user. These keys are allowed for SSH authentication, as described in RFC 4253.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "An arbitrary name for the SSH key."
                        },
                        "algorithm": {
                          "type": "string",
                          "description": "The public key algorithm name for this SSH key. Valid values are the values in the IANA 'Secure Shell (SSH) Protocol Parameters' registry, Public Key Algorithm Names."
                        },
                        "key-data": {
                          "type": "string",
                          "description": "The binary public key data for this SSH key, as specified by RFC 4253, Section 6.6, i.e.: string certificate or public key format identifier byte[n] key/certificate data."
                        }
                      },
                      "required": [
                        "algorithm",
                        "key-data",
                        "name"
                      ]
                    }
                  },
                  "password-policy": {
                    "type": "string",
                    "description": "The password policy. If not defined, the default-password-policy is used."
                  },
                  "account-policy": {
                    "type": "string",
                    "description": "The user account policy. If not defined, the default-account-policy is used."
                  },
                  "administrative-state": {
                    "enum": [
                      "locked",
                      "unlocked"
                    ],
                    "description": "The administrative state of the user account. Specifies the state of the user account based on administration performed by the MS. If set to unlocked but account state is locked, unlock-operational-lock must be invoked.",
                    "default": "unlocked"
                  },
                  "groups": {
                    "type": "array",
                    "description": "Together with 'privacy-groups' leaf these are the groups of the user provided for the NACM module if /nacm/enable-external-groups is true.",
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z][a-zA-Z0-9_.-]*[a-zA-Z0-9]$"
                    }
                  },
                  "privacy-groups": {
                    "type": "array",
                    "description": "Togeter with 'groups' leaf these are the groups of the user provided for the NACM module if /nacm/enable-external-groups is true. The groups here define access to privacy classified data in the model.",
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z][a-zA-Z0-9_.-]*[a-zA-Z0-9]$"
                    }
                  },
                  "full-name": {
                    "type": "string",
                    "description": "The full name of the user assigned to the user account."
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "authentication-failure-delay": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0,
              "maximum": 255,
              "description": "Average delay after a failed login attempt in seconds. Value 0 means no delay.",
              "default": "3"
            },
            "target-types": {
              "type": "array",
              "description": "Lists the target types of the ME for Target Based Access Control (TBAC). Authentication methods use TBAC to determine whether a user can be authorized in the ME, and which groups apply to the user in the ME, based on the target types specified in this attribute. This leaf can contain any classifier string for the ME such as geographical, network, or functional identifiers.",
              "items": {
                "type": "string",
                "pattern": "^(\\\\\\\\[a-fA-F0-9]{2}|[A-Za-z0-9!$%&'./:=?@^_`{|}~-])((\\\\\\\\[a-fA-F0-9]{2}|[A-Za-z0-9!$%&'./:=?@^_`{|}~\\-# ])*(\\\\\\\\[a-fA-F0-9]{2}|[A-Za-z0-9!$%&'./:=?@^_`{|}~\\-#]))?$"
              }
            },
            "legal-notice": {
              "type": "string",
              "description": "The legal notice presented to the user when starting a session. The message is presented to the client before authentication takes place. Depends on the client capability and configuration if the message is presented to the user. The user receives this information before authentication. The purpose of the message is to warn the user about the consequences of unauthorized access.",
              "default": "IF YOU ARE NOT AN AUTHORIZED USER,\n           PLEASE EXIT IMMEDIATELY"
            },
            "privacy-notice": {
              "type": "string",
              "description": "The privacy notice presented to the user.",
              "default": "This system processes sensitive personal data.\n           The misuse of such data may generate considerable\n           harm to the data subjects. Be reminded of the\n           confidentiality obligations you have when accessing\n           this kind of data and the disciplinary consequences\n           of improper handling.\n           Version: 1.0, Last Updated: May 21, 2019"
            },
            "post-login-notice": {
              "type": "string",
              "description": "A legal notice that, for any reason related to specific regulations, must be accessible only after users log in.",
              "default": ""
            },
            "default-password-quality": {
              "type": "object",
              "description": "The default password quality.",
              "properties": {
                "max-consecutive-characters-per-class": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "Maximum consecutive characters per class in a password. Specifies the maximum number of characters that can appear consecutively from a given character class. Value 0 means that consecutive character classes are not checked. Possible character classes are digits, uppercase, lowercase, and other characters."
                },
                "min-digit": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "Minimum number of digits in passwords. Minimum number of digits a new password must have to be accepted by the ME. Value 0 means the check is disabled."
                },
                "min-lower": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "Minimum number of lower case characters in passwords. Minimum number of lower case characters a new password must have to be accepted by the ME. Value 0 means the check is disabled."
                },
                "min-upper": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "Minimum number of upper case characters in passwords. Minimum number of upper case characters a new password must have to be accepted by the ME. Value 0 means the check is disabled."
                },
                "min-other": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "Minimum number of non-alphanumeric characters in passwords. Minimum number of non-alphanumeric characters a new password must have to be accepted by the ME. Value 0 means the check is disabled. Only the following characters are considered as non-alphanumeric: ! \\\" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\\\ ] ^ _ ` { | } ~"
                },
                "min-points": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 1,
                  "maximum": 4,
                  "description": "Minimum password quality points. Minimum number of quality points a new password must have to be accepted by the ME. One quality point is awarded for each character class used in the password. Possible character classes are digits, uppercase, lowercase, and other characters. min-points takes effect when its value is higher than the number of specific character attributes (min-digit, min-upper, min-lower, min-other) that are not set to 0"
                }
              }
            },
            "default-password-policy": {
              "type": "object",
              "description": "The default password policy. By default it uses the default-password-quality configuration.",
              "properties": {
                "expiry-warning": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 24855,
                  "description": "Password expiry warning in days. Specifies the number of days before the expiry date when the ME starts to notify the user at authentication to change password due to approaching expiry date. Value 0 means expiry warnings are never sent.",
                  "default": "7"
                },
                "failure-count-interval": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0,
                  "maximum": 2147483647,
                  "description": "The time interval within which consecutive failed login attempts count in seconds. Specifies the time interval it takes to obsolete records in password-failure-times used for leaf max-failure. Value 0 means the failure counter is reset only on successful authentication.",
                  "default": "1800"
                },
                "history-length": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0,
                  "maximum": 2147483647,
                  "description": "Specifies the number of passwords remembered by the ME to avoid the reuse of old passwords. Value 0 means old passwords are not recorded.",
                  "default": "12"
                },
                "lockout-duration": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0,
                  "maximum": 2147483647,
                  "description": "Account lockout duration in seconds due to password failures. Specifies the time in seconds after an automatically locked user account is unlocked automatically. Value 0 means that only the administrator can unlock a user account manually by invoking unlock-operational-lock action on the user account.",
                  "default": "0"
                },
                "max-age": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 24855,
                  "description": "Password maximum age in days.Specifies the number of days after a password is considered expired. Value 0 means passwords never expire.",
                  "default": "90"
                },
                "max-failure": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0,
                  "maximum": 2147483647,
                  "description": "Maximum failed login attempts to lock a user account. Specifies the number of consecutive failed login attempts which locks the user account automatically, as counted in password-failure-times of the respective users. Value 0 means that an unlimited number of failed attempts is allowed, the user account is not locked by failures.",
                  "default": "5"
                },
                "min-age": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 24855,
                  "description": "Password minimum age in days. Specifies the minimum number of days that need to pass before a password can be changed. Value 0 means there is no control on the minimum age of passwords.",
                  "default": "15"
                },
                "min-length": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "Minimum length of passwords. Specifies the minimum character lengths of passwords that the ME can accept.",
                  "default": "12"
                },
                "must-change": {
                  "type": "boolean",
                  "description": "Indicates if the password must change after password set or reset by administrator.",
                  "default": "true"
                }
              }
            },
            "password-policy": {
              "type": "array",
              "uniqueItems": true,
              "description": "List of password policies. The leaves that do not get a value use the defaults configured in default-password-policy.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the policy configuration."
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "expiry-warning": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 24855,
                    "description": "Password expiry warning in days. Specifies the number of days before the expiry date when the ME starts to notify the user at authentication to change password due to approaching expiry date. Value 0 means expiry warnings are never sent.",
                    "default": "7"
                  },
                  "failure-count-interval": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 2147483647,
                    "description": "The time interval within which consecutive failed login attempts count in seconds. Specifies the time interval it takes to obsolete records in password-failure-times used for leaf max-failure. Value 0 means the failure counter is reset only on successful authentication.",
                    "default": "1800"
                  },
                  "history-length": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 2147483647,
                    "description": "Specifies the number of passwords remembered by the ME to avoid the reuse of old passwords. Value 0 means old passwords are not recorded.",
                    "default": "12"
                  },
                  "lockout-duration": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 2147483647,
                    "description": "Account lockout duration in seconds due to password failures. Specifies the time in seconds after an automatically locked user account is unlocked automatically. Value 0 means that only the administrator can unlock a user account manually by invoking unlock-operational-lock action on the user account.",
                    "default": "0"
                  },
                  "max-age": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 24855,
                    "description": "Password maximum age in days.Specifies the number of days after a password is considered expired. Value 0 means passwords never expire.",
                    "default": "90"
                  },
                  "max-failure": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0,
                    "maximum": 2147483647,
                    "description": "Maximum failed login attempts to lock a user account. Specifies the number of consecutive failed login attempts which locks the user account automatically, as counted in password-failure-times of the respective users. Value 0 means that an unlimited number of failed attempts is allowed, the user account is not locked by failures.",
                    "default": "5"
                  },
                  "min-age": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 24855,
                    "description": "Password minimum age in days. Specifies the minimum number of days that need to pass before a password can be changed. Value 0 means there is no control on the minimum age of passwords.",
                    "default": "15"
                  },
                  "min-length": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 65535,
                    "description": "Minimum length of passwords. Specifies the minimum character lengths of passwords that the ME can accept.",
                    "default": "12"
                  },
                  "must-change": {
                    "type": "boolean",
                    "description": "Indicates if the password must change after password set or reset by administrator.",
                    "default": "true"
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "default-account-policy": {
              "type": "object",
              "description": "The default user account policy.",
              "properties": {
                "dormant-timer": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "Account dormant timer in days. Specifies the number of days it takes for the ME to automatically set the user account into dormant status when the account was not used in this time period. Dormant status results the ME to automatically lock and/or delete the user account. Value 0 means the dormant time is not measured which implies that the account cannot become dormant.",
                  "default": "180"
                },
                "dormant-action": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Action taken by the ME after an account has been locked due to dormancy by the ME. Value 0: No action. The account remains in locked state. Value 1: Delete the account automatically. See also the attribute dormant-action-timer. The attribute has no meaning if dormant-timer has value 0.",
                  "default": "0"
                },
                "dormant-action-timer": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "The time delay in days for ME to apply dormant action. After an account gets into dormant status and gets locked, the ME waits this many days before performing the action defined by attribute dormant-action. Value 0 means that the action is applied immediatelly. The attribute has no significance if dormant-timer or dormant-action has value 0",
                  "default": "90"
                }
              }
            },
            "account-policy": {
              "type": "array",
              "uniqueItems": true,
              "description": "List of user account policies. The leaves that do not get a value use the defaults configured in default-account-policy.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the user account policy."
                  },
                  "user-label": {
                    "type": "string",
                    "description": "Label for free use."
                  },
                  "dormant-timer": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 65535,
                    "description": "Account dormant timer in days. Specifies the number of days it takes for the ME to automatically set the user account into dormant status when the account was not used in this time period. Dormant status results the ME to automatically lock and/or delete the user account. Value 0 means the dormant time is not measured which implies that the account cannot become dormant.",
                    "default": "180"
                  },
                  "dormant-action": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Action taken by the ME after an account has been locked due to dormancy by the ME. Value 0: No action. The account remains in locked state. Value 1: Delete the account automatically. See also the attribute dormant-action-timer. The attribute has no meaning if dormant-timer has value 0.",
                    "default": "0"
                  },
                  "dormant-action-timer": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0,
                    "maximum": 65535,
                    "description": "The time delay in days for ME to apply dormant action. After an account gets into dormant status and gets locked, the ME waits this many days before performing the action defined by attribute dormant-action. Value 0 means that the action is applied immediatelly. The attribute has no significance if dormant-timer or dormant-action has value 0",
                    "default": "90"
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "admin-user": {
              "type": "object",
              "description": "The administrator user. Used for initial and recovery scenarios when authentication to regular user accounts is inaccessible. Password is first set at deployment. Change of password requires a backup to be able to revert to last state.",
              "properties": {
                "password": {
                  "type": "string",
                  "description": "The password for this entry.",
                  "eric-adp-is-passphrase": "true",
                  "format": "eric-adp-cm-secret"
                },
                "authorized-key": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "A list of public SSH keys for this user. These keys are allowed for SSH authentication, as described in RFC 4253.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "An arbitrary name for the SSH key."
                      },
                      "algorithm": {
                        "type": "string",
                        "description": "The public key algorithm name for this SSH key. Valid values are the values in the IANA 'Secure Shell (SSH) Protocol Parameters' registry, Public Key Algorithm Names."
                      },
                      "key-data": {
                        "type": "string",
                        "description": "The binary public key data for this SSH key, as specified by RFC 4253, Section 6.6, i.e.: string certificate or public key format identifier byte[n] key/certificate data."
                      }
                    },
                    "required": [
                      "algorithm",
                      "key-data",
                      "name"
                    ]
                  }
                }
              }
            },
            "oauth2-client": {
              "type": "array",
              "uniqueItems": true,
              "description": "A list of OAuth2 clients configured in this device.",
              "items": {
                "type": "object",
                "properties": {
                  "client-id": {
                    "type": "string",
                    "pattern": "^[a-zA-Z_][a-zA-Z0-9_.-]*$",
                    "description": "The client identifier to be registered."
                  },
                  "groups": {
                    "type": "array",
                    "description": "The authorization groups that the OAuth2 client can access in a token request as scope.",
                    "items": {
                      "type": "string",
                      "pattern": "^[!\\[\\]\\^_`#-Za-~]+$"
                    }
                  },
                  "client-secret": {
                    "type": "string",
                    "description": "A client secret to authenticate an OAuth2 client.",
                    "eric-adp-is-passphrase": "true",
                    "format": "eric-adp-cm-secret"
                  },
                  "private-key-jwt": {
                    "type": "object",
                    "description": "A set of raw public keys used by the OAuth2 server to authenticate an OAuth2 client using JWT.",
                    "properties": {
                      "local-definition": {
                        "type": "object",
                        "description": "Container to hold local raw public key definitions.",
                        "properties": {
                          "raw-public-key": {
                            "type": "array",
                            "uniqueItems": true,
                            "description": "A raw public key definition.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "An arbitrary name for this raw public key."
                                },
                                "algorithm": {
                                  "enum": [
                                    "rsa1024",
                                    "rsa2048",
                                    "rsa3072",
                                    "rsa4096",
                                    "rsa7680",
                                    "rsa15360",
                                    "secp192r1",
                                    "secp224r1",
                                    "secp256r1",
                                    "secp384r1",
                                    "secp521r1",
                                    "x25519",
                                    "x448"
                                  ],
                                  "description": "Identifies the key's algorithm."
                                },
                                "public-key-format": {
                                  "type": "string",
                                  "description": "Identifies the key's format."
                                },
                                "public-key": {
                                  "type": "string",
                                  "description": "The binary value of the public key. The interpretation of the value is defined by 'public-key-format' field."
                                }
                              },
                              "required": [
                                "algorithm",
                                "public-key"
                              ]
                            }
                          }
                        }
                      },
                      "truststore-reference": {
                        "type": "string",
                        "description": "A reference to a set of raw public keys that exist in the truststore."
                      }
                    }
                  }
                },
                "required": [
                  "client-id"
                ]
              }
            }
          }
        },
        "ldap": {
          "type": "object",
          "description": "Configuration of the LDAP client. At least one server must be configured with common configuration of transport security, LDAP authentication method, and user search base.",
          "properties": {
            "server": {
              "type": "array",
              "uniqueItems": true,
              "minItems": 1,
              "description": "List of LDAP servers used by the ME. When the LDAP client is invoked by a calling application, it sends the query to the first server in this list. If no response has been received within 'timeout' seconds, the client continues with the next server in the list. If no response is received from any server, it gives up and returns an error to the calling application.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An arbitrary name for the LDAP server."
                  },
                  "tcp": {
                    "type": "object",
                    "description": "Contains TCP-specific configuration parameters for LDAP.",
                    "properties": {
                      "address": {
                        "type": "string",
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "format": "ipv4"
                              },
                              {
                                "format": "ipv6"
                              }
                            ]
                          },
                          {
                            "format": "hostname"
                          }
                        ],
                        "description": "The address of the LDAP server."
                      },
                      "ldap": {
                        "type": "object",
                        "description": "The connection is established by using the ldap protocol. The client is using StartTLS operation if TLS is configured.",
                        "properties": {
                          "port": {
                            "type": "integer",
                            "format": "uint16",
                            "minimum": 0,
                            "maximum": 65535,
                            "description": "The port number of the LDAP server.",
                            "default": "389"
                          }
                        }
                      },
                      "ldaps": {
                        "type": "object",
                        "description": "The connection is established by using the ldaps protocol. Configuration of TLS is mandatory for ldaps.",
                        "properties": {
                          "port": {
                            "type": "integer",
                            "format": "uint16",
                            "minimum": 0,
                            "maximum": 65535,
                            "description": "The port number of the LDAP server.",
                            "default": "636"
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "security": {
              "type": "object",
              "description": "Container for LDAP security options.",
              "properties": {
                "user-base-dn": {
                  "type": "string",
                  "pattern": "^([a-zA-Z][a-zA-Z0-9-]*=(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,# ])((\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,])*(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+, ]))?[,\\+])*[a-zA-Z][a-zA-Z0-9-]*=(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,# ])((\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,])*(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+, ]))?$",
                  "description": "Default base DN to use in LDAP operations. The base DN must be specified in an LDAP DN format, for example, 'ou=people,dc=mycompany,dc=com'. All LDAP objects used for authentication must be accessible from the base DN."
                },
                "clear": {
                  "type": "array",
                  "items": {
                    "type": "null"
                  },
                  "description": "LDAP insecure clear connection. User passwords are sent in cleartext."
                },
                "tls": {
                  "type": "object",
                  "description": "LDAP secure TLS connection",
                  "properties": {}
                },
                "simple-authenticated": {
                  "type": "object",
                  "description": "The ME requests unauthenticated simple bind from the LDAP server.",
                  "properties": {
                    "bind-dn": {
                      "type": "string",
                      "pattern": "^([a-zA-Z][a-zA-Z0-9-]*=(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,# ])((\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,])*(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+, ]))?[,\\+])*[a-zA-Z][a-zA-Z0-9-]*=(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,# ])((\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+,])*(\\\\( |#|\\\\|>|<|;|\"|\\+|,|[a-fA-F0-9]{2})|[^\\\\><;\"+, ]))?$",
                      "description": "Default bind DN used to access the LDAP servers. When configured, the ME uses the specified DN as the bind name for LDAP searches. The bind DN must be specified in an LDAP DN format, for example 'cn=bindaccount,dc=mycomp,dc=com'."
                    },
                    "bind-password": {
                      "type": "string",
                      "description": "The password used with binddn to authenticate.",
                      "eric-adp-is-passphrase": "true",
                      "format": "eric-adp-cm-secret"
                    }
                  }
                },
                "sasl-external": {
                  "type": "array",
                  "items": {
                    "type": "null"
                  },
                  "description": "The ME requests SASL EXTERNAL bind from the LDAP server. For this authentication type, TLS is mandatory."
                }
              },
              "required": [
                "user-base-dn"
              ]
            },
            "options": {
              "type": "object",
              "description": "LDAP client options.",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 1,
                  "maximum": 255,
                  "description": "The number of seconds the ME will wait for a response from each LDAP server before trying with a different server.",
                  "default": "5"
                },
                "enable-referrals": {
                  "type": "boolean",
                  "description": "Toggle to enable the use of referrals. When set to false, the ME ignores referrals returned by the LDAP server. When set to true, the ME follows referrals. Referrals can be used for authentication and authorization only if the referral URI refers back to a directory tree within the same LDAP server instance; otherwise, access is denied for referred user accounts.",
                  "default": "false"
                }
              }
            }
          },
          "required": [
            "security",
            "server"
          ]
        }
      }
    },
    "ietf-system:system-state": {
      "type": "object",
      "description": "System group operational state.",
      "readOnly": true,
      "properties": {
        "authentication": {
          "type": "object",
          "description": "The authentication state subtree.",
          "properties": {
            "user": {
              "type": "array",
              "uniqueItems": true,
              "description": "The local user state subtree.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The user name string identifying this entry."
                  },
                  "state": {
                    "enum": [
                      "locked",
                      "unlocked"
                    ],
                    "description": "The state of the user account. In locked state, users are not able to authenticate to this user account. In unlocked state, users are able to authenticate to this user account. Automatic lock can be placed due to dormant account. Manual locking and unlocking performed by administrative-state is also reflected by the account state. A manual lock has precedence over an automatic lock, thus enabling an account must always start with checking the value of the administrative-state attribute and setting it unlocked. If already unlocked and the account state is locked, the ME automatically locked the account, unlock-operational-lock must be invoked for unlock."
                  },
                  "usage-state": {
                    "enum": [
                      "unused",
                      "active",
                      "dormant"
                    ],
                    "description": "The state of the user account based on user activity. The user account is dormant if the system time passes the value of last-login-time plus the dormant-timer, thus indicating lock due to user account inactivity. When the user account is dormant the user account gets locked by changing user account state to locked. The user account is unused when no successful authentication was performed to it. The user account is active in all other cases."
                  },
                  "locked-time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the user account was locked. Specifies the time the user account was locked regardless if that was due to an administrative lock or an automatic operational lock. The value is cleared when the user account is unlocked."
                  },
                  "last-login-time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of the last successful login."
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "admin-user": {
              "type": "object",
              "description": "The admin user state subtree.",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_.-]*$",
                  "description": "The user name string identifying the admin user."
                },
                "last-login-time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date of the last successful login."
                }
              }
            }
          }
        }
      }
    }
  },
  "eric-adp-genoptions": [
    {
      "module-prefixing": false
    },
    {
      "encoding-format": "eric-rfc7951-json"
    },
    {
      "generate-submodule-jsonschema": false
    },
    {
      "additional-properties": true
    }
  ],
  "eric-adp-encoding-format": "eric-rfc7951-json",
  "eric-adp-yang-module": "ietf-system"
}