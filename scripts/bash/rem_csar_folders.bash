#!/bin/bash

####################################################################################
#
# Author   : eedjoz
#
# Revision : R1A
# Date     : 2020-06-08
#
# Deskcheck: -
#
# Author   : eedjoz
#
# Revision : R2A
# Date     : 2020-09-22
#
# Author   : eedjoz
#
# Revision : R3A
# Date     : 2020-12-14
# Content  : Increase the amount of csar pkgs stored in artifactory to 20
#
# Deskcheck: -#
####################################################################################
#
#  (C) COPYRIGHT ERICSSON GMBH 2020
#
#  The copyright to the computer program(s) herein is the property of
#  Ericsson GmbH, Germany.
#
#  The program(s) may be used and/or copied only  with the written permission
#  of Ericsson GmbH in accordance with the terms and conditions stipulated in
#  the agreement/contract under which the program(s) have been supplied.
#
####################################################################################

####################################################################################
# https://cc-jira.rnd.ki.sw.ericsson.se/browse/DND-21993

# The file csar_folders_user.txt was created by an own task inside the "csar" bob rule
# and it contains the names of the csar folders which have been generated by the user in 
# the "generic-local" test repo:
# https://armdocker.rnd.ericsson.se/artifactory/proj-5g-bsf-generic-local/$user/
# in case there is no csar folder created, the file will be created but it will be empty.
# In case there are csar folders created the file will contain in each line the name of 
# each of the folders starting from the oldest created, eg:
# under https://armdocker.rnd.ericsson.se/artifactory/proj-5g-bsf-generic-local/eedjoz/ 
# might display the following:
#
# 1.1.0+9cf8e317a          (-> this is the first created)
# 1.1.0-1496
# 1.1.0-1498_cmYP_6-0-0-21 (-> this is the latest created)

# The logic in this script is as follows:
## 1) It will be checked whether the user is "eiffelesc". 
#    This will indicate that the csar creation is being triggered by Jenkins. 
#    ONLY in this case it will proceed (it is not currently considered that 
#    the deletion takes place for another different user.

## 2) It will be checked whether the branch is "master"  
#    ONLY in this case it will proceed (it is not currently considered that 
#    the deletion takes place automatically for another different branch).

## 3) It will be checked whether the file "csar_folders_user.txt" exists.

## 4) It will checked whether the number of lines in the file is equal or higher than the max amount 
#    of packages allowed to be stored (value in variable "numMaxCsarAllowed").
#    In this case the exceeding number of folders will be deleted (starting from the oldest), hence 
#    line by line, from the file starting from the first one. 

# Variables
OUTPUT_DIR="./.bob"
numMaxCsarAllowed=20
numCsarStored=0
delete_list=""
status=0

# Parameters
branch="$1"
subpath="$2"
authorization="$3"

# Check if the csar package creation has been triggered via Jenkins (only in this case we will proceed)
if [ "$USER" != "eiffelesc" ]; then
   echo "This csar package is not triggered via Jenkins. No clean up for old versions in the repo will be done"
   exit 0
fi


# Check if the branch is master (only in this case we will proceed)
cat $branch | grep master                                               &> /dev/null
status=$?
if [ $status -eq 1 ]; then
   echo "The branch from which the csar package has been triggered is not master. No clean up for old versions in the repo will be done."
   exit 0
fi


# Check if the file has been created in previous step by a task inside the bob rule csar
if [ ! -f $OUTPUT_DIR/csar_folders_user.txt ]; then
   echo "Error: $OUTPUT_DIR/csar_folders_user.txt does not exist."
   exit 1
fi

# Get how many csar folders are currently stored
numCsarStored=$(cat $OUTPUT_DIR/csar_folders_user.txt | wc -l)
 
if [ $numCsarStored -ge $numMaxCsarAllowed ]; then 
# Create a list of folders which will be deleted
# As after the process, a new csar will be created
#it is needed to delete one more than the difference between numCsarStored and numMaxCsarAllowed
   delete_list=$(cat $OUTPUT_DIR/csar_folders_user.txt | head -$((numCsarStored-numMaxCsarAllowed+1)))
   echo -e "\nThe following "$((numCsarStored-numMaxCsarAllowed+1))" folder(s) will be deleted:"   
   echo -e "\n$delete_list"
    for i in $delete_list; do
#former authentication curl -f -k -H "X-JFrog-Art-Api:$ARTIFACTORY_TOKEN" -X DELETE https://armdocker.rnd.ericsson.se/artifactory/proj-5g-bsf-generic-local/eiffelesc/master/$i//   &> /dev/null
       curl -f -k -H "Authorization: Bearer ${authorization}" -X DELETE https://armdocker.rnd.ericsson.se/artifactory/proj-5g-bsf-generic-local/${subpath}/master/$i//   &> /dev/null

       status=$?
       if [ $status -eq 22 ]; then
          echo -e "\nThe folder $i does no longer exist in artifactory. HTTP error 404 received."
       fi
    done
else
   echo -e "\n"$((numMaxCsarAllowed-numCsarStored))" csar folder(s) can still be stored on the repo without any other being deleted."
   exit 0
fi
